// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x6e\xdb\x38\x13\xbe\xcf\x53\x0c\xf4\xa3\x40\x13\x98\x52\x92" +
	"\xfe\xe9\xb6\x6a\x1a\x6c\x8f\xbb\xbd\xe8\x62\x11\x77\x1f\x80\x12\x69\x89\xb5\x44\x0a\xe4\x38\xae\xd7\xf0\xbb\x2f" +
	"\xa8\x83\x2d\x51\x94\xe3\x1e\x72\x13\x8a\x9c\xc3\x37\xc3\x99\x8f\xa4\xb7\x5b\xc6\x17\x42\x72\x08\xe6\xab\xb2\xa4" +
	"\x7a\x13\xec\x76\x67\x00\x00\xdb\x2d\x81\xe8\x22\x53\xb8\xa9\x78\x0c\x99\xc0\x7c\x95\x84\xa9\x2a\xa3\xaf\x54\x1a" +
	"\xa5\xb3\x28\x53\x28\x4a\xde\xfd\xd3\xbc\x52\x1a\xc3\x7b\x6e\x56\x05\xbe\x5d\xa5\x4b\x8e\x17\x11\x90\xdd\xee\xac" +
	"\xb6\x76\x8b\x34\x29\x38\xa4\x05\x35\xe6\x75\x60\x5a\x57\x77\xf5\x5a\xb3\x9e\x28\xb6\x39\x7c\x6f\xb7\x62\x11\x7e" +
	"\x32\x7f\x6b\xf5\x95\xa7\xad\xbd\x16\xd8\x41\x45\xdf\x0d\x26\x9a\x49\x76\xb7\xdd\x8a\xab\x17\x12\x82\x56\x39\xd8" +
	"\xed\x6e\x23\x64\x5e\xd9\x0e\x10\x0a\x2c\x78\x70\xb7\xdd\x86\x5f\xec\xc8\xa7\x71\x1b\xf5\xfd\x6d\xb7\x5c\xb2\x1e" +
	"\x20\x8b\x17\xa4\x42\x08\xdf\x53\xe4\xf7\x54\x66\x3c\xfc\x50\x56\xb8\xf9\x5e\xd0\x5f\x44\xc9\x41\x5b\xfd\xf8\x34" +
	"\xe0\x25\x27\xb5\x78\x8d\xfe\xe0\xfc\xb3\x90\xa2\xa4\xc5\x1c\xb5\x90\xd9\xf7\xc7\x33\xc2\x39\xc0\xa8\x69\xba\xe4" +
	"\x0c\xac\x73\x3f\x4a\x17\x61\xc1\x17\x68\x01\x96\x42\xbe\x5f\x69\x8a\x42\x49\x08\xbb\x51\xf8\x87\xdd\xdb\xa1\x11" +
	"\x17\x9d\x58\x00\x95\x0c\xc2\x4f\xe6\x5e\xad\x24\xe3\x0c\x9e\xe6\xd4\x7c\x2c\x68\x06\x81\xc9\xd5\xfa\xc3\x37\x9a" +
	"\x62\x70\x0e\xdf\x9b\xee\x5a\x0f\xf0\xd1\x80\x7e\x28\xa8\xda\xf8\x8f\xd4\x52\x74\x61\x81\x5f\x44\x4e\x34\xcd\xc2" +
	"\x01\xfc\x47\x4d\x4b\x6e\xf6\x80\x8f\xc8\x2f\x94\x2e\x29\xfe\xb5\x2a\x13\xae\x21\xac\xf5\xde\xa9\x95\x44\x9f\x66" +
	"\xad\x15\xb9\xfe\x6f\xa3\x5e\x87\xde\x46\x75\x3b\xdf\x9d\x75\xd0\xcf\x0e\x34\x92\xaa\xb2\x54\xf2\xdd\x7c\xde\x11" +
	"\xc9\xad\xc1\x4d\xc1\xc1\xf2\xc8\xeb\x00\xf9\x37\x8c\x52\x63\x7a\xad\x1f\x6b\xa5\x10\xb6\x03\xe4\x84\x2c\x94\x44" +
	"\x62\xc4\xbf\x3c\x86\xab\xeb\x0a\x5f\xf9\x96\x17\xb4\x14\xc5\x26\x86\xc0\x6c\x0c\xf2\x92\xac\x44\x30\x03\x42\xab" +
	"\xaa\xe0\xa4\x99\x9a\xc1\xdb\x42\xc8\xe5\x67\x9a\xce\xeb\xef\x8f\x4a\xe2\x0c\x82\x39\xcf\x14\x87\x7f\x3e\x05\x33" +
	"\xb8\x57\x89\x42\x35\x83\x3f\x79\xf1\xc0\x51\xa4\x74\x06\x6f\xb4\xa0\xc5\x0c\x0c\x95\x86\x18\xae\xc5\x62\x06\xc1" +
	"\x1b\x6b\x14\xde\xa9\x42\x69\xf8\x50\xaa\xaf\xd6\xd3\xde\x8c\x67\x66\xbe\x29\x13\x55\x04\x2e\xec\xba\x6e\x06\xd8" +
	"\x4b\x25\x95\xa9\x68\xca\xa7\x45\xd7\x5c\x64\x39\xc6\x20\xed\x26\x16\xaf\xce\x1c\xc1\xd4\x82\x8a\x21\x29\x68\xba" +
	"\x74\x8d\x24\x59\xb7\xbc\xce\x05\x7a\x7c\x60\xc1\x3b\x89\xff\x3d\xbb\x7a\x7e\x93\xfc\xdf\x95\xd1\x6a\x4d\x14\x63" +
	"\x7b\x29\x5e\xff\x8d\x50\xd4\x05\x41\xd6\x82\x61\x1e\xc3\xd5\xe5\xe5\x93\x91\xaf\x5a\x80\x51\xa4\x9d\xd4\xcb\x9b" +
	"\x09\x21\xcc\x3b\x6f\x0f\x54\x3f\x6d\x23\x3c\x9f\x94\x4d\xb2\x81\x74\x17\xf3\xb4\x42\x97\xd0\x44\x15\x6c\x52\xc8" +
	"\xa6\xbe\xa9\xbf\xcb\xf0\x85\xe6\xe5\x28\xe2\xf6\x10\x23\x89\xd2\x8c\xeb\x21\xe2\x41\xd2\x7a\x40\x76\x07\x23\x39" +
	"\x96\x85\x53\xf5\xbd\x9a\x6f\xcc\xec\x27\x9c\x58\x1e\xcd\x4e\x42\xd3\x65\xa6\x2d\x53\x92\x53\x72\x33\xa8\xc8\x9e" +
	"\xeb\x66\xca\x8f\xbf\x39\xd0\x87\x01\xb4\x1b\xdb\x58\xe8\x55\x84\x8b\x6e\x9f\xb1\x82\x56\x86\xc7\xd0\x8d\x06\x8e" +
	"\x0e\x9e\xf2\x19\x20\x73\x5c\x15\x42\x72\x92\xb7\x1b\x79\x15\x5e\xdf\xd4\x5b\xd4\x97\xa8\x28\x63\x42\x66\x76\xff" +
	"\xea\x55\xb8\x1a\x88\xec\x7a\xf6\xc3\xba\x11\xac\x97\x66\xe4\xf8\x1a\x59\xba\xf4\x67\x24\x77\xd3\x61\x7b\x8e\xd4" +
	"\xdd\x6d\xbb\x77\xad\x69\x35\x84\x68\xd9\x90\xd0\x42\x64\x32\x06\x7b\x9a\x0c\x57\x1f\xb8\xb6\x84\x54\x74\x12\x89" +
	"\x42\x54\xa5\xdf\xb5\x9b\x1e\x57\x17\x55\x35\x81\x99\x53\x36\x46\x3e\x55\x3f\x6e\xcf\x1d\xab\xcb\x61\x2f\xfb\x2a" +
	"\xae\x5f\xea\xa3\xbe\xf3\x29\x74\x8d\xeb\xa8\x34\xd3\xfe\x32\x0d\x0f\xbc\xf3\x78\xb1\x1e\xd8\xe9\xa8\x31\xc5\x18" +
	"\xa0\x8e\xa5\x8d\x2d\x17\x05\x7b\x7a\x2d\xc9\xd5\xf9\x78\x13\xa6\xb2\x78\x02\x3b\x84\x36\x2c\xc1\x46\x0d\x36\xac" +
	"\xa8\xe6\x3c\xf0\x04\xf5\xf2\xe5\x13\xbf\xd9\xba\x1c\x88\xb6\xf9\x72\x4c\xf7\x6b\xb1\x5e\x9f\xc0\xe5\xe9\x8f\xe1" +
	"\xb6\x1f\xce\x94\x63\x5b\x38\xe6\xde\xfe\x89\x1f\x4e\xf5\x6a\x98\xd4\x4f\x01\x03\x77\x7e\x28\x03\x23\xcf\x1d\x23" +
	"\x07\x2b\x2d\x77\xfb\x2b\x82\xae\x50\xf9\x08\x2b\x86\x67\xd5\x37\x30\xaa\x10\xac\x8d\xd5\x77\x04\x38\x41\x97\x54" +
	"\x67\x42\xc6\x70\x09\x97\xf0\x6c\x9a\x3b\xf6\x88\x46\x45\xb4\x27\x9f\xf0\xe6\x48\x38\x09\x2a\xa4\xee\x79\xd2\xf8" +
	"\x26\xa8\xaa\x78\x44\x7e\x1e\x65\x64\xb3\xfe\x97\xcb\x09\x8f\x6c\x5f\x9b\x83\xda\xd9\xf5\x3e\x4f\xce\xad\x64\xc0" +
	"\x3c\xa1\xbd\xe2\x9c\x5e\x85\xf0\x18\xa3\x0e\xf8\xd0\x67\xdc\x73\xcc\xb9\x17\xb2\x13\x58\xc7\xb9\x97\x9d\x4f\x53" +
	"\xfa\xcf\x04\xb0\xb0\x97\xe2\x5f\x13\xc4\x2f\x82\xd4\xb6\x9e\xfb\xdf\x38\xf8\xa2\x8b\xb6\xec\xec\x81\x16\xd7\x35" +
	"\xff\xea\x22\x3a\x66\xd0\x57\xb4\x4d\xc3\x5c\x1f\x6b\x18\xa4\x1a\x09\xa3\x9b\x59\x37\xb6\x69\xa8\x3f\x54\x45\x3c" +
	"\x89\x3b\x39\x4e\xa9\x90\xbb\x51\x91\xd2\x90\x7c\x53\xe5\x5c\x1a\x1f\x41\x90\x35\x4f\x96\x02\x8f\x89\x4c\x2c\xb5" +
	"\x6f\xa4\xa8\x7e\x24\xdd\x9d\x1d\x79\x31\x41\xc9\x99\xa0\xaf\x83\x4a\x0b\x89\xbd\xf7\xd3\xef\x15\xcd\xdc\x58\x1b" +
	"\x06\x1c\x83\xe8\x92\xfb\x5b\x78\x53\xfa\xe9\xc0\x3e\xf2\x8e\x3e\xc6\x2e\x2b\xff\xc9\x70\xe4\x3e\x38\x7e\x0e\x58" +
	"\xc8\x24\xd1\x9c\x2e\x89\x90\x46\x30\x0b\xf6\x41\x09\xe6\xb7\xac\x47\x94\xf8\x98\xb6\x23\x45\x17\x68\xe9\xdb\xcd" +
	"\xbc\x73\x0b\x9a\x74\x92\xf0\x85\xd2\x27\x3b\x39\x2a\x74\x04\x2f\x13\xa6\x2a\xe8\x26\x6e\x32\x49\x2c\x24\xae\x89" +
	"\xbd\x3f\x4c\x50\x84\x67\xab\x7e\x11\xe8\x11\x11\xfd\xa4\x97\xd3\xa3\xb6\x57\xa3\x51\xc8\xd0\xef\x10\xdf\x4f\x0e" +
	"\x2b\x83\xaa\x6c\x7e\x72\x68\x97\xff\x0b\x00\x00\xff\xff\xe5\x11\x01\xd3\xd7\x14\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 5335,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548952571, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\xf8\x13\xff\xa1\x0d\x22\xa9\xb9" +
	"\x05\x81\x64\xa0\xd9\xda\x73\x16\xa0\x57\x5a\x1c\x5b\x6c\x45\xd2\x15\x47\x76\x0c\x41\xef\x5e\x90\x5a\x6d\x53\xb1" +
	"\x0b\xa4\xbe\x58\x9a\x5d\xdf\x37\x33\x64\x55\x05\x24\xba\x58\x69\xdc\xad\xe1\x86\xac\x04\x66\xe5\x22\x4c\xb5\x8c" +
	"\x7e\x32\x65\x74\xb1\x8a\x50\xcb\x68\xa5\x03\xfb\x57\xc0\x5a\x17\x18\x3e\x81\x29\x73\xbc\x2d\xd3\x5f\x80\x17\x11" +
	"\x09\xea\x7a\x36\xab\x2a\x0e\x4b\xa1\x80\xd0\x46\x4e\xeb\x7a\x46\x08\x21\x1f\x13\xbe\x89\xf4\xff\xc2\xc9\xc8\x4d" +
	"\x42\xc2\x41\x98\x03\x5b\x1a\x27\x7b\x90\x6b\xdc\xdd\x65\x22\xe7\x05\xa8\xc1\xc0\x64\x7a\xfb\xf0\xc6\x52\xe7\xc8" +
	"\x14\x27\xe1\x77\x66\x9e\x74\xa9\x38\xf0\xce\x9a\x7c\xca\x98\x79\xcc\xd9\x8a\xd0\xde\x9c\x7e\x26\xf6\xcb\x6c\x94" +
	"\x98\x8b\x0d\x49\x73\x66\x4c\x42\x9b\x22\xe8\xdc\x29\x9a\x14\x62\x49\x9a\x32\xda\xa4\xdd\x2f\x46\xb6\xc8\xa1\x73" +
	"\x74\x2f\x81\xe6\x7c\xe4\x3b\x58\x66\xc0\xb8\x4f\x5e\x1c\x0b\x5b\x87\x3e\x6e\x16\x6c\x05\x07\x3a\x8f\xcd\x9a\xa9" +
	"\x5e\x2a\x30\x07\x3a\xaf\xaa\xf0\xc5\x3e\xd5\x75\x1c\x59\xf5\x3c\x8e\x30\x3b\x1d\x52\x48\xe7\x2b\xae\xae\x15\xa1" +
	"\xf7\x65\xc1\x50\x68\x45\x6d\x90\x29\xef\x06\x85\x1e\xbc\x03\x24\xce\xca\xd3\x90\xc4\xcf\xcb\x06\x8a\x7b\x72\xc4" +
	"\x91\x0f\x30\x1b\x67\x02\xde\x85\xe6\xbb\x63\x79\x55\x15\x4c\xad\xc0\xcf\xea\xe0\x3c\xc1\x4d\xa3\xe4\x7b\xd8\xa3" +
	"\x27\xfb\xc8\xf6\x10\x10\x29\x54\x87\x3a\x09\xbb\xa7\xf0\x1b\xe0\xa9\x58\xe7\xd3\xf0\xb7\x99\xdb\x78\xa7\xd2\xfb" +
	"\x79\x21\x93\xdc\xbc\xc3\xa4\x9f\x9b\x18\x97\x5a\x63\x57\xb6\x29\x17\xa8\x91\xe5\xde\x99\x9a\x9e\x9d\xbe\xe7\x5e" +
	"\x9c\xf3\x7b\xad\xe6\x69\xd7\x31\x46\xed\x52\x3a\x26\xe9\x5f\xcc\xc9\xa9\xc4\x03\x47\x1f\x35\x37\x16\xeb\x7d\x45" +
	"\x1c\xb9\x45\x36\xde\x7f\x90\x1b\x38\x08\xea\x3e\xb3\xd9\xc8\x9e\x74\x4e\xab\x34\x92\xf0\x9e\x21\x3c\xd9\x59\x9b" +
	"\xb4\x25\x07\xfb\xd7\x2d\x36\xe2\xe6\xd3\xad\xb7\x3e\x82\xfd\x6e\x2e\x36\xe7\xb5\x98\xb7\xe8\xc3\x54\x0d\xc2\xc6" +
	"\xd3\x5b\xce\xf2\x9c\x75\x3b\xc1\x42\xb3\x5e\x42\x77\xfc\x34\x27\xdd\xd4\x96\xd9\x87\xeb\x3d\x90\x06\x6b\x04\xb9" +
	"\xce\x19\x0e\x87\x71\x7f\x5e\xfa\xed\xa7\x67\x76\xba\x5f\x8e\x90\x3e\x34\x1d\xbf\xb7\xe6\x9d\x68\x16\xff\xc7\x75" +
	"\x6a\xaf\x04\x24\x43\x99\xcf\x67\xb1\xfd\x23\x39\x53\xab\x84\x56\x95\x7b\xb8\x65\x06\x48\x5d\x53\xab\xec\x77\x77" +
	"\x2c\x01\x19\x49\x33\x56\x18\xc0\x84\xbe\xbe\x3c\x06\xd7\x74\xac\x52\x4c\x42\x42\x37\x02\xb6\xf6\x2a\x41\x47\x05" +
	"\xa6\x5a\x21\x28\x4c\xe8\x56\x70\xcc\x12\x0e\x1b\x91\x42\xe0\x5e\x2e\x49\x69\xa0\x08\x4c\xca\x72\xdb\xd9\x89\xd2" +
	"\x97\x44\x28\x81\x82\xe5\x4e\x08\xc9\x55\xf8\xe5\x92\x48\xf6\x26\x64\x29\xf7\x44\x42\xed\x8b\xf6\x8a\xc9\x10\xd7" +
	"\x01\xfc\x2e\xc5\x26\xa1\x3f\x82\xd7\xaf\xc1\x9d\x96\x6b\x86\x62\x91\x03\x1d\xea\x11\x90\x00\xb7\xbd\xdc\x5e\x35" +
	"\x5c\x27\xd9\x63\xda\xfd\xcf\x66\x87\x94\xa6\x5a\x4a\xad\xee\x9e\x9f\x87\x2b\xd6\x48\x59\x1a\xd4\xb2\x55\xc6\x51" +
	"\x83\x5c\xdc\x2c\x52\xd7\x45\x7b\xd7\x9c\xe7\x52\x4a\x56\xec\x7c\x81\x3a\x15\x69\xaf\x63\x75\xdd\xb3\xe7\xed\xaf" +
	"\xde\x2a\x8e\x9a\x6c\x71\xe4\xa8\xfd\x13\x00\x00\xff\xff\x16\x42\x6d\x7d\x5f\x0a\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 2655,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548953463, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x89\x9e\x82\xc8\xea\xa2\x28" +
	"\xb0\x58\x48\x01\xda\x3c\xd0\x5e\x8a\x22\xce\x02\xbd\xd2\xe2\x58\x62\x97\x0f\x55\x1c\x39\x6b\x08\xfa\xef\x0b\x92" +
	"\x92\x2d\x67\xa5\x24\x5e\x5d\x28\xce\x70\xbe\x79\x71\x66\xd8\x75\x09\xa4\x57\xa5\xa5\x43\x8d\x9f\xa0\x94\x54\xb5" +
	"\xdb\x75\x61\x75\xfa\x1f\x37\xce\x36\x65\x5a\x5a\x92\x1a\xc7\xa5\xc1\xda\x36\xb4\xfe\xa3\x2d\xbe\x20\x3d\x86\xcd" +
	"\x55\x0a\x49\xdf\xaf\x56\x5d\x27\x70\x27\x0d\x02\x8b\x5c\xd6\xf7\x2b\x00\x80\x37\x35\x90\xd5\x69\x69\x13\xbf\x0c" +
	"\xf0\x8f\xe8\x5a\x45\x11\x66\x80\x8f\x48\x3f\x6f\x03\x0d\x3e\xe5\xb0\x3e\x11\x15\xf2\x9d\x0b\xb4\x7b\x5d\xd3\xe1" +
	"\xb6\x92\x4a\x34\x68\x4e\x07\x5c\x65\x9f\xef\xbf\xf2\x22\x0a\xfe\xc9\xdd\xa3\x6d\x8d\x40\x31\x39\x19\x8e\x66\x42" +
	"\xee\xa1\x50\xdc\xb9\x9c\x45\x4d\xec\x26\x30\x22\x8e\xdc\x0d\x1a\x06\xe4\xf1\xcb\x88\x6f\x15\x8e\x82\x61\x93\x08" +
	"\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x90\x8b\x39\x7a\xf3\x3d\x31\xea\x4f\xaf\x50\x6f\x51\x08\x14\x40\x92\x14" +
	"\x02\x59\xf8\x82\x58\x0f\x3b\x6e\x44\xd4\xe8\x80\x6c\x89\x54\x61\x03\xd2\x40\xdd\x48\x43\x28\xe0\x9f\xbb\x07\x77" +
	"\x95\xbe\x30\x7d\x62\x0d\x14\x56\xb9\x9a\x9b\x9c\xfd\xc6\x8e\xbe\x78\x60\x76\xd3\x75\xeb\x27\xff\xd7\xf7\x59\x4a" +
	"\xd5\x8c\xcd\xe9\x9c\xd1\x8b\x9e\x04\x65\x51\x81\xe0\x14\xf0\xe5\x87\x8f\x06\xd8\x9d\xdf\x2d\x29\x79\x55\x72\x43" +
	"\xbc\xa1\x1f\x13\xbd\x37\xe2\xbd\x82\xbe\x04\x26\xd6\xb6\x0d\x27\x69\xcd\xbb\xa5\xab\xe4\x59\x8a\x09\xc0\xdf\x96" +
	"\xd0\x2d\x4a\x2f\x04\x35\x5d\xbc\x37\x5b\x2b\x0e\xdf\xd3\xbb\xae\xe1\xa6\x44\x58\x3f\x34\x5c\xa3\x1b\x96\xc5\x6b" +
	"\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\xfc\xe0\x9d\xd9\xd9\x46\x73\xf2\xb9\x83\x75\xc8\x43\xf0\x68\xc6\xc4" +
	"\x45\xa0\x31\xae\x11\xe9\x49\xea\x1f\x42\xb2\xf5\x00\xb4\x78\x1c\x8e\x65\xfc\x97\xdb\x90\xad\x6b\x14\x0b\x81\x98" +
	"\x95\x90\xa6\x54\x78\xc7\x5f\x96\xff\xb2\xdc\xd4\x9f\x7b\xf3\x3e\x5d\xa8\x1c\x5e\xa8\xc0\x87\xfe\x42\x25\x6f\x9e" +
	"\x7b\xeb\xcc\xbb\xf3\x32\xe6\x56\x4b\x33\x16\x0c\xac\xc7\xbf\x0b\xf2\x6b\x42\xb1\xf8\x56\x14\xca\xe6\x35\xc9\xf9" +
	"\xca\x59\xf2\x28\x4b\x17\x2a\x27\xa3\x9d\xb5\x74\xbc\x5f\xed\x96\x2c\x71\x35\xdb\xca\x5f\x6b\x74\x63\x57\xfd\xf5" +
	"\x54\xf8\x4f\x01\xe8\xc2\xa6\xb3\x1c\xc0\x65\x8c\x9b\x0b\x5b\x8b\x77\xf8\x9c\x91\xa5\x61\xa4\x4c\xc7\xe0\xcc\x0d" +
	"\x9d\x0e\xce\x99\x99\x21\xe4\xfe\x1c\xf5\xd8\x94\xc2\x04\x8e\x83\x7e\xae\x27\x75\x1d\xa1\xae\x95\x6f\x2d\xe3\xab" +
	"\xe2\x38\xf8\x27\x06\x9d\xe5\x75\xba\x1f\x54\x8f\xa4\x55\xf6\x93\xb0\x85\x7f\x88\x40\x45\x5a\xdd\xac\x32\xbf\x80" +
	"\xe2\xa6\xcc\x19\x1a\xe6\x09\xc7\xe6\x9a\x69\x24\x0e\x45\xc5\x1b\x87\x94\xb3\xcf\x4f\x0f\xc9\x47\x36\x65\x19\xae" +
	"\x31\x67\x7b\x89\xcf\xfe\xd1\xc2\x26\x46\x15\xd6\x10\x1a\xca\xd9\xb3\x14\x54\xe5\x02\xf7\xb2\xc0\x24\x6c\xae\xa1" +
	"\x75\xd8\x24\xae\xe0\xca\xc7\x35\x37\xf6\x1a\xa4\x91\x24\xb9\x0a\x44\xcc\x3f\xac\x7f\xb9\x06\xcd\xbf\x4a\xdd\xea" +
	"\x33\x92\x34\xe7\xa4\x33\x63\x2a\xa2\x3a\xc1\xff\x5b\xb9\xcf\xd9\xbf\xc9\xe7\xdf\x93\x5b\xab\x6b\x4e\x72\xab\x90" +
	"\x9d\xec\x91\x98\xa3\x28\xc7\x16\x99\x85\x54\xf9\x3b\x12\xd6\xd5\xea\x65\xc8\x0b\xab\xb5\x35\xb7\x9b\xcd\xe9\x2d" +
	"\x37\x61\xb6\x8e\xac\x1e\x98\x59\x1a\x03\x97\xc5\x52\x9a\x9e\xdb\xb4\x5a\xf3\xe6\xc0\x60\x78\xd6\xf5\xfd\x6a\x36" +
	"\xad\x47\x6e\x96\x46\x90\x2c\x0d\x49\xfa\x16\x00\x00\xff\xff\xc8\x46\x1b\x05\xa2\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2722,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548953463, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
