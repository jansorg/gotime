// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\xdb\x3a\x12\xbe\xcf\x53\x0c\x54\x14\x48\x02\x53\x76\x92" +
	"\x4d\xb7\x55\xd3\x60\xfb\xbb\xdb\x8b\x2e\x0e\x92\x9e\x07\xa0\x44\x5a\x62\x43\x91\x02\x49\xc5\x71\x8d\xbc\xfb\x01" +
	"\x29\xc9\x96\x28\xca\x71\xda\x26\x17\x96\xc8\xe1\xcc\x37\xc3\x99\x6f\x28\x6e\x36\x84\x2e\x99\xa0\x10\xdd\xd6\x65" +
	"\x89\xd5\x3a\x7a\x7c\x3c\x02\x00\xd8\x6c\x10\xcc\x4f\x73\x69\xd6\x15\x4d\x20\x67\xa6\xa8\xd3\x38\x93\xe5\xfc\x07" +
	"\x16\x5a\xaa\x7c\x9e\x4b\xc3\x4a\xda\xfd\x28\x5a\x49\x65\xe2\x1b\xaa\x6b\x6e\x3e\xd4\xd9\x1d\x35\xa7\x73\x40\x8f" +
	"\x8f\x47\x4e\xdb\x95\xc1\x29\xa7\x90\x71\xac\xf5\xbb\x48\xb7\xa6\xae\xdd\x5c\x33\x9f\x4a\xb2\xde\xbd\x6f\x36\x6c" +
	"\x19\x7f\xd5\x7f\x29\xf9\x83\x66\xad\xbe\x16\xd8\x6e\x89\xba\x1e\x0c\x34\x83\xe4\x7a\xb3\x61\x67\xaf\x05\x44\xed" +
	"\xe2\xe8\xf1\xf1\x6a\x6e\x48\x50\xb6\x03\x64\x98\xe1\x34\xba\xde\x6c\xe2\xef\xf6\x29\xb4\xe2\x6a\xde\xb7\xb7\xd9" +
	"\x50\x41\x7a\x80\x2c\x5e\x10\xd2\x40\xfc\x09\x1b\x7a\x83\x45\x4e\xe3\xcf\x65\x65\xd6\xcf\x05\xfd\x9d\x95\x14\x94" +
	"\x5d\x9f\x1c\x06\xbc\xa4\xc8\x89\x3b\xf4\x3b\xe3\xdf\x98\x60\x25\xe6\xb7\x46\x31\x91\x3f\xdf\x9f\x11\xce\x01\x46" +
	"\x85\xb3\x3b\x4a\xc0\x1a\x0f\xa3\xf4\x11\x72\xba\x34\x16\x60\xc9\xc4\xa7\x5a\x61\xc3\xa4\x80\xb8\x7b\x8a\xff\x6b" +
	"\xf7\x76\xa8\xc4\x47\xc7\x96\x80\x05\x81\xf8\xab\xbe\x91\xb5\x20\x94\xc0\x71\x81\xf5\x17\x8e\x73\x88\x74\x21\x57" +
	"\x9f\x1f\x70\x66\xa2\x13\x78\x6e\xb8\xdd\x3a\x30\x4f\x3a\xf4\x4b\x4e\x39\xe5\xbf\x92\x4b\xf3\x53\x0b\xfc\x74\x3e" +
	"\x1a\xdc\x01\xff\xa2\x70\x49\xf5\x16\xec\x84\xec\x52\xaa\x12\x9b\xff\xd7\x65\x4a\x15\xc4\x6e\xcd\x47\x59\x0b\x33" +
	"\xb9\x6a\xee\xdb\xbd\x9a\xf7\x2a\xf3\x6a\xee\xca\xf8\xfa\xa8\x83\x7c\xb4\xa3\x8f\x4c\x96\xa5\x14\x1f\x6f\x6f\x3b" +
	"\x02\xb9\xd2\x66\xcd\x29\x58\xfe\x78\x17\x19\xfa\x60\xe6\x99\xd6\xbd\x92\x4f\x94\x94\x06\x36\x83\xc0\x20\xb4\x94" +
	"\xc2\x20\xcd\x7e\xd2\x04\xce\xce\x2b\xf3\x36\x34\xbd\xc4\x25\xe3\xeb\x04\x22\xbd\xd6\x86\x96\xa8\x66\xd1\x0c\x10" +
	"\xae\x2a\x4e\x51\x33\x34\x83\x0f\x9c\x89\xbb\x6f\x38\xbb\x75\xef\x5f\xa4\x30\x33\x88\x6e\x69\x2e\x29\xfc\xfd\x35" +
	"\x9a\xc1\x8d\x4c\xa5\x91\x33\xf8\x1f\xe5\xf7\xd4\xb0\x0c\xcf\xe0\xbd\x62\x98\xcf\x40\x63\xa1\x91\xa6\x8a\x2d\x67" +
	"\x10\xbd\xb7\x4a\xe1\xa3\xe4\x52\xc1\xe7\x52\xfe\xb0\x96\xb6\x6a\x02\x23\xb7\xeb\x32\x95\x3c\xf2\x61\xbb\x7c\x19" +
	"\x60\x2f\xa5\x90\xba\xc2\x19\x9d\x16\x5d\x51\x96\x17\x26\x01\x61\x37\x91\xbf\x3d\xf2\x04\x33\x0b\x2a\x81\x94\xe3" +
	"\xec\xce\x57\x92\xe6\xdd\xf4\xaa\x60\x26\x60\xc3\x70\xda\x49\xbc\xb8\x38\x7b\x75\x99\xfe\xcb\x97\x51\x72\x85\x24" +
	"\x21\x5b\x29\xea\xfe\x7c\x29\x37\x8b\x6a\x51\x6b\x4a\x12\x78\xf1\xfa\x8d\xfd\x1f\xa1\x91\x8a\x50\xd5\xca\xf2\xc6" +
	"\xa9\x7b\xac\x8e\x87\xcb\x4f\x46\x1e\xba\x64\x43\x2b\x46\x4c\x91\xc0\xd9\x62\xf1\x72\xe4\x87\x13\x20\xd8\xe0\xa7" +
	"\xa5\x4c\xd1\xb9\xd2\x33\x7d\x32\x29\x9b\xe6\x03\xe9\x2e\xa0\xd3\x0b\xba\xdd\x4a\x25\x27\x93\x42\x76\x5f\x9b\xe4" +
	"\x5e\xc4\xaf\x15\x2d\x47\x2e\xb7\x9d\x71\x10\xb2\x0e\xc3\x60\x47\x7a\x40\x1e\x77\x4a\x0a\x53\x72\xaf\xa4\x7a\x05" +
	"\xd5\xa8\xd9\x0e\x78\xbe\x3c\x19\x9d\x14\x67\x77\xb9\xb2\xf4\x8b\x0e\x89\xcd\x20\xdd\x7b\xa6\x9b\xa1\x30\xfe\xe6" +
	"\x94\x30\x74\xa0\xdd\xd9\x46\x43\x2f\x25\x7c\x74\xdb\x88\x71\x5c\x69\x9a\x40\xf7\x34\x30\xb4\xb3\x54\xcc\xc0\x10" +
	"\xcf\x14\x67\x82\xa2\xa2\xdd\xc8\xb3\xf8\xfc\xd2\x6d\x51\x5f\xa2\xc2\x84\x30\x91\xdb\xfd\x73\xb3\x70\x36\x10\xe9" +
	"\xbb\x52\xc4\xae\xcc\xac\x99\xe6\xc9\x33\x36\x52\xb5\x98\xd0\xe3\xc7\xc3\x56\x34\x72\xdc\x61\xb9\x61\xa5\x70\x35" +
	"\xc4\x68\xb9\x16\x61\xce\x72\x91\x80\xed\x51\xc3\xd9\x7b\xaa\x2c\xdd\xf1\x4e\x22\x95\xc6\xc8\x09\x17\xfc\xf8\xf8" +
	"\x6b\x8d\xac\x26\x30\x53\x4c\xc6\xc8\xa7\x12\xc8\x2f\xba\x7d\x89\x39\x2c\xe6\x50\xca\xf5\x73\x7d\x54\x78\xa1\x05" +
	"\x5d\xe5\x7a\x4b\x9a\xe1\x70\x9e\xc6\x3b\xe6\x79\x3a\x5b\x77\xfc\xb4\x57\x99\x24\x04\x8c\x4a\x84\xf5\xad\x60\x9c" +
	"\x1c\x9f\x0b\x74\x76\x02\x86\xcc\x06\x12\xb6\x1b\x07\xe5\x0e\x8d\xf6\x01\x34\xd2\xda\x2b\xb1\x51\xec\x01\x0c\x49" +
	"\x84\x34\xc7\x09\xc7\xda\x34\x26\x4f\x66\xbe\x48\x31\x12\x09\x67\x3b\x52\x6d\x71\x4d\x95\x4d\x6c\x23\xcf\xc8\x88" +
	"\x04\x86\x49\xdf\x34\xc4\x40\xdc\xdf\xbc\x79\x19\x56\xeb\x32\xb6\xb1\xee\xa9\xee\x97\x8b\x9b\x9f\xc0\x15\x28\xe1" +
	"\x61\x66\xee\x9a\xea\xbe\x2c\x1b\xf7\x87\xfe\x91\x27\xbe\x98\x0c\x4c\xea\x3e\x82\x34\x5c\x87\xb1\x0c\xb4\xbc\x9a" +
	"\x0e\xaf\x3d\x5e\xe8\xba\x7c\xbe\x27\x7d\x2d\x6d\x9b\x0a\xe7\x3e\xae\x8d\x0c\x71\x73\x02\x17\xd5\x03\x68\xc9\x19" +
	"\x69\x0d\x85\xba\x9d\x17\xbb\x12\xab\x9c\x89\x04\x16\xb0\x80\x8b\x69\x96\xdc\x22\x1a\x71\xd6\x96\x66\xe3\xcb\xc9" +
	"\xa0\xe8\x3a\x35\xd2\x60\xbf\x75\x36\xb6\x91\x91\xd5\xbe\x84\xb5\xf5\xb4\x55\x60\xdb\x8a\x37\xe2\x03\x6a\x9d\x6d" +
	"\xb4\x7a\x01\x19\x9f\x94\x26\xfa\x64\x11\x67\x92\x6f\x8d\xb8\x1e\xd3\x1f\x08\x9b\xb4\xcd\xe0\xb7\x6c\xda\xe4\x39" +
	"\xbc\x7a\xe0\xa9\x66\x15\xe8\x96\x96\x9d\xc2\x59\x15\x68\xc6\x25\x7e\xe8\xce\x7d\xe7\x8b\xd1\xac\x43\x26\xef\xa9" +
	"\x5a\x72\xb9\x4a\x80\x72\xce\x2a\xcd\xf4\x50\xa8\x9b\x47\x0f\x09\x14\x8c\x10\x2a\x26\x3a\x61\xc8\xf7\xc0\x09\xc7" +
	"\x3f\xe8\x1f\xd0\x6f\xbc\xf3\xfe\xc9\x74\x33\xff\x8d\xf8\x76\x75\x1f\x4c\x8f\x67\x16\xbf\x53\xf5\x8b\x7a\x46\x41" +
	"\x18\xd2\x61\x3f\xe4\x4b\xfb\x79\xf8\x67\xc2\xfe\xa7\x82\xd8\x50\xb0\xff\xab\x3d\x7c\xf3\xd3\x96\x38\x9a\x7a\x73" +
	"\x8c\x7e\x3a\xdf\xa7\x30\x44\x3b\x0d\xe5\x9d\xef\xa3\x3c\x83\x95\x41\x04\xaf\x67\xdd\xb3\x0d\x83\x7b\x91\x15\x0a" +
	"\x04\xee\x60\x3f\x85\x34\xd4\xf7\x0a\x95\x1a\x15\xeb\xaa\xa0\x42\x87\x28\x1e\xad\x68\x7a\xc7\xcc\x3e\x91\x89\xa9" +
	"\xbe\x61\xd2\xde\x9e\xa0\x9f\x54\xc9\x7d\xd9\xe5\x7d\x38\xee\x74\x81\xbb\xa6\x70\x57\x0f\xd7\xed\xd5\x63\xf0\x1e" +
	"\x02\x4a\x4a\x18\x7e\x17\x55\x8a\x09\xd3\xbb\x95\xf8\x4f\x85\x73\x3f\x6e\x4d\x57\x1d\x3b\xd4\x6d\xd4\xbf\xe3\xcb" +
	"\x32\xdc\x1c\xdc\x61\x6d\xdf\x15\xc7\xa2\x0a\x1f\x37\xf6\x7c\x08\x8d\x3f\x71\x2d\x64\x94\x2a\x8a\xef\x10\x13\x9a" +
	"\x11\x0b\xf6\x5e\xb2\x89\xba\x52\xa3\x06\xf9\xd4\x6a\x4f\x0a\x2f\x8d\x6d\xe6\x93\xbb\xd8\x9c\xfe\x27\x8d\xa4\x74" +
	"\x29\xd5\xc1\x46\xf6\x0a\xed\xc1\x4b\x98\xae\x38\x5e\x27\x4d\x24\x91\x85\x44\x15\xb2\xe7\xe1\x89\x06\x14\xd8\xaa" +
	"\x3f\x04\x7a\x44\x6a\xbf\x69\xe5\x70\xaf\xed\x41\x64\xe4\x32\xf4\x2b\x24\x74\x91\x57\x6b\x23\xcb\xe6\x22\xaf\x9d" +
	"\xfe\x27\x00\x00\xff\xff\x56\xb6\x92\x65\x25\x18\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6181,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549009354, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\xcc\x4b\xe4\x90\x2c\x22\x69\xf7" +
	"\xb6\x58\x48\x06\xde\xcd\xee\xb6\x3d\xf4\x92\x64\x8b\xa2\x37\x5a\xa4\x2d\xb6\x12\xe9\x8a\x94\x9d\x54\xf0\x7f\x2f" +
	"\x48\x59\xa2\x3e\x28\x59\x4e\x8c\x22\x87\xbd\xd8\x12\x39\x9c\x21\x9f\x99\x79\x66\xa8\xb2\xf4\x20\x78\xb7\x11\xea" +
	"\x79\x4b\x3f\xc1\x86\xa9\xa4\x58\xf9\xb1\xc8\x82\x3f\x31\x97\x22\xdf\x04\x4a\x64\xc1\x46\x78\xfa\x2f\xa7\x5b\x91" +
	"\x2b\xff\x9e\xca\x22\x55\x9f\x8b\xf8\x2f\xaa\xde\x05\xe0\x1d\x0e\x8b\x45\x59\x12\xba\x66\x9c\x02\x7a\xc4\xab\x94" +
	"\x56\x93\xe8\x70\x58\x00\x00\x5c\xc6\x46\xa5\xe9\x6a\x65\xc6\xe0\x53\x04\xbe\x1d\x4c\x29\x5e\x4b\x33\xf6\x35\xdb" +
	"\xaa\xe7\xbb\x84\xa5\x24\xa7\xdc\x0a\xc8\x44\xec\xbf\x3e\xe1\xd8\x2c\xc4\x9c\x80\xff\x33\x96\xf7\xa2\xe0\x84\x92" +
	"\x5a\x1a\xae\x13\x2c\xbf\xa5\x78\x03\xa8\x11\x47\x37\xa0\x8f\xa7\xb5\x84\x4a\x9f\x0c\xe2\x14\x4b\x19\x21\xf3\xe2" +
	"\x09\x42\xd0\xd2\xcc\x56\x12\x09\xc5\xa4\xfd\x9e\xdb\x97\xa3\x40\xb3\x3e\xf1\xf6\x8c\x50\xb4\x0c\xe5\x16\xf3\x66" +
	"\x94\xa9\x94\xa2\x65\x59\xfa\x8f\xfa\xe9\x70\x08\x03\x3d\xbd\x0c\x03\x95\x8c\xab\x62\x99\x59\xc3\x3e\x7c\xe4\x80" +
	"\xbe\x14\x39\x56\x4c\x70\xa4\x17\xf7\x57\x95\x25\x5b\x83\x05\xe3\x88\xcf\x2c\xbd\x15\x7a\x64\x5a\x3b\xe5\xa4\xa5" +
	"\x33\x0c\xda\x00\x68\xf9\x1e\x3c\x2b\x41\x9e\xed\x7b\x59\xe6\x98\x6f\x28\x54\xde\xec\xed\x6d\x80\x65\x35\x48\x3a" +
	"\x58\x29\xe2\x94\xe9\x1f\x28\x63\xbc\x46\x09\xfc\xfa\xc9\xff\x89\xaa\x31\x1d\xa7\x61\x3b\xd7\xd2\x51\xcf\x98\xb9" +
	"\x2e\x8e\x43\x2c\x1d\x48\x77\xb1\x0c\xd5\x5a\x08\xd5\x09\xc5\x7a\x6f\xb9\xd8\x7b\xb2\x58\x29\xa1\x70\x8a\x06\x41" +
	"\xd5\xf8\xfb\xd1\xcc\xbb\xdc\xec\x08\x91\xf6\x39\x8f\x19\x3a\x04\xf6\x12\xb1\x78\xca\x90\xc5\xf5\xdc\xd8\xb4\x78" +
	"\x85\x81\x49\xee\xe5\xa2\x5e\xd3\x62\xb7\x5f\xb1\xca\xd9\xd3\x7f\x46\x6f\xa3\xc4\x43\xb0\xc2\xd0\x70\xd0\xf1\x29" +
	"\x33\x9b\x3b\x93\x90\x5e\x4a\x40\x65\xb9\x67\x2a\x01\xc6\x09\x7d\x6a\x5c\x61\xa8\xb4\x3a\x96\x84\xf7\x0e\x97\x5e" +
	"\x0e\xab\xae\xd6\x8a\x39\x3a\xf6\x47\xb3\x74\x10\x54\x2d\x02\xd1\xf1\x3f\x4c\x3e\x67\x42\x8e\x11\xa5\x3b\x71\x5e" +
	"\xca\x85\x0e\x60\xe7\x31\x63\xd2\x71\xa9\x97\x8b\x3d\x02\xf3\x18\x21\x7b\xe2\xc1\xe9\x17\xaf\xc4\xb6\xc7\x80\x4e" +
	"\x29\xa8\x93\xdf\x66\xee\x2f\x75\x2d\xfe\x83\xe6\x62\x44\x79\x63\xa4\x1d\xaf\x75\x3d\xf2\xfe\xa1\xb9\x38\xc9\xed" +
	"\x26\x94\x27\xf6\x44\x53\x49\xe7\x58\x7f\xb5\x9d\x41\x34\x35\xea\x27\x0b\xc2\x94\x9b\x63\x91\x36\xb4\x0e\x1a\x7d" +
	"\xf3\x63\x99\xde\xed\xfc\xe9\x52\xd8\x27\xfe\xb7\x53\x83\x9a\xfc\x60\xb7\x57\xb1\x0e\x4c\xcd\x98\xd7\x15\x19\xf5" +
	"\x58\xe8\xe6\x54\xe4\xf6\x32\xb9\x87\x9b\xdb\x8f\x75\x18\x5c\xb7\x01\xbc\x96\x45\x66\x6c\xfd\x86\xd3\x82\xca\x3a" +
	"\x79\xe1\x8a\xdd\x68\x48\x6f\xc6\x43\xe3\x74\xbd\x9a\xe7\xed\xe3\x96\xcf\x2f\xc8\x2f\x2c\x87\x6f\xa7\xcf\xaf\xb6" +
	"\x4a\xd8\xae\x46\xa8\x5a\x8f\xda\xf1\xca\xd6\xc0\x64\x55\xc1\x6b\x50\x06\x44\xaf\x68\xb6\x4d\xb1\xea\x97\xfa\xc6" +
	"\x97\xad\x05\x15\x5f\x80\xee\x62\x5c\x1d\x6b\x5b\x57\xfb\x52\xe4\x30\xed\x64\x9e\x8a\x22\xcd\x39\x9d\x25\x8f\xad" +
	"\x81\x0b\x05\xfe\x17\xac\xe8\xbd\x4e\x86\x51\xd9\x3e\x34\x86\x09\xc0\x24\x90\x29\x00\x8d\x06\x1d\x15\x84\xed\xe6" +
	"\x75\xa4\xa3\x74\x39\xf4\x82\x9c\xca\xa2\x53\xad\x87\x73\xe5\x39\x55\xa9\x0b\xd7\x14\x48\x56\xda\xba\xae\xf6\x9a" +
	"\x3f\xa9\x7d\x9c\xd1\xc7\xe6\x1c\x48\xf7\x45\xdb\xef\x47\xf1\xd1\x1c\xac\xa2\xf5\x2d\x64\x22\x5c\xee\xc6\x7d\x32" +
	"\x9d\x47\xae\x8a\xa7\x2e\xea\x56\xb2\xdb\x85\xd9\x71\x47\x4b\x05\x97\xbd\xc0\xbb\x54\xce\xbf\xc8\x77\x51\x38\x75" +
	"\x33\x9d\xb4\x33\xe3\x62\x6f\xad\x8d\xc5\xb2\xb3\x07\xed\x37\xb9\x76\x2b\xdd\x46\xc1\xaa\x9f\xf8\x00\x60\x17\x8f" +
	"\xf8\x06\x66\x7e\x10\x68\xc9\xbe\xfa\xc3\x80\xdd\xf9\x5c\x37\x9c\x6b\x79\xf2\x43\x81\x35\x3f\xd9\x51\x3a\x00\x9b" +
	"\xf0\xa4\xdb\x37\xfd\x66\xce\x8e\xcf\x69\xea\xac\xf4\x9c\xe6\xae\x25\x7d\x89\x0f\x0d\xf6\xcc\xaf\xc8\x95\x17\x7f" +
	"\x78\x98\x81\xb8\x3b\x77\x86\x78\x37\x9d\x58\x4b\xe7\x8f\xbe\xe1\x47\xdf\x70\x4e\xdf\x10\xfe\x8f\x88\x58\xb7\x05" +
	"\x90\xa8\x2c\x5d\x2e\x42\xfd\x07\x29\xe6\x1b\x7d\x35\x34\x0f\x9f\xb1\xa4\xa0\xaf\x87\x8b\xd0\xf2\x77\x98\x51\x85" +
	"\x21\x4e\x70\x2e\xa9\x8a\xd0\xf7\xc7\x6f\xde\x47\xd4\x9e\xe2\x38\xa3\x11\xda\x31\xba\xd7\xed\x04\x6a\x6d\x30\x16" +
	"\x5c\x51\xae\x22\xb4\x67\x44\x25\x11\xa1\x3b\x16\x53\xcf\xbc\xdc\x42\x21\x69\xee\xc9\x18\xa7\x3a\xb2\x23\x2e\x6e" +
	"\x81\x71\xa6\x18\x4e\xcd\x20\x8d\x3e\xf8\xef\x6f\x21\xc3\x4f\x2c\x2b\xb2\xce\x10\xe3\xdd\xa1\xce\x66\x12\xa5\xb6" +
	"\x1e\xfd\xbb\x60\xbb\x08\xfd\xee\x7d\xff\xbf\x77\x27\xb2\x2d\x56\x6c\x95\x52\x64\xf7\xc3\x68\x44\x89\x8e\xe5\xfa" +
	"\x3b\x9b\x8e\x1f\x5d\xaa\xcd\xff\x62\xd1\x77\x69\x2c\xb2\x4c\xf0\xbb\x87\x07\xdb\x66\xb5\x26\x0b\xa9\x44\x76\x9c" +
	"\x0c\x83\x0a\xb9\xb0\x22\x53\x13\x45\x9d\x56\xe7\xa1\xc8\x32\x9c\x3f\xbb\x14\xd5\x53\x70\x6c\xc9\x0e\x87\xc6\x7b" +
	"\xce\xf8\x6a\xa4\xc2\xa0\xb2\x16\x06\xc6\xb5\xff\x06\x00\x00\xff\xff\x95\xd4\xb2\xc6\xda\x19\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6618,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549009306, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x89\x9e\x82\xc8\xea\xa2\x28" +
	"\xb0\x58\x48\x01\xda\x3c\xd0\x5e\x8a\x22\xce\x02\xbd\xd2\xe2\x58\x62\x97\x0f\x55\x1c\x39\x6b\x08\xfa\xef\x0b\x92" +
	"\x92\x2d\x67\xa5\x24\x5e\x5d\x28\xce\x70\xbe\x79\x71\x66\xd8\x75\x09\xa4\x57\xa5\xa5\x43\x8d\x9f\xa0\x94\x54\xb5" +
	"\xdb\x75\x61\x75\xfa\x1f\x37\xce\x36\x65\x5a\x5a\x92\x1a\xc7\xa5\xc1\xda\x36\xb4\xfe\xa3\x2d\xbe\x20\x3d\x86\xcd" +
	"\x55\x0a\x49\xdf\xaf\x56\x5d\x27\x70\x27\x0d\x02\x8b\x5c\xd6\xf7\x2b\x00\x80\x37\x35\x90\xd5\x69\x69\x13\xbf\x0c" +
	"\xf0\x8f\xe8\x5a\x45\x11\x66\x80\x8f\x48\x3f\x6f\x03\x0d\x3e\xe5\xb0\x3e\x11\x15\xf2\x9d\x0b\xb4\x7b\x5d\xd3\xe1" +
	"\xb6\x92\x4a\x34\x68\x4e\x07\x5c\x65\x9f\xef\xbf\xf2\x22\x0a\xfe\xc9\xdd\xa3\x6d\x8d\x40\x31\x39\x19\x8e\x66\x42" +
	"\xee\xa1\x50\xdc\xb9\x9c\x45\x4d\xec\x26\x30\x22\x8e\xdc\x0d\x1a\x06\xe4\xf1\xcb\x88\x6f\x15\x8e\x82\x61\x93\x08" +
	"\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x90\x8b\x39\x7a\xf3\x3d\x31\xea\x4f\xaf\x50\x6f\x51\x08\x14\x40\x92\x14" +
	"\x02\x59\xf8\x82\x58\x0f\x3b\x6e\x44\xd4\xe8\x80\x6c\x89\x54\x61\x03\xd2\x40\xdd\x48\x43\x28\xe0\x9f\xbb\x07\x77" +
	"\x95\xbe\x30\x7d\x62\x0d\x14\x56\xb9\x9a\x9b\x9c\xfd\xc6\x8e\xbe\x78\x60\x76\xd3\x75\xeb\x27\xff\xd7\xf7\x59\x4a" +
	"\xd5\x8c\xcd\xe9\x9c\xd1\x8b\x9e\x04\x65\x51\x81\xe0\x14\xf0\xe5\x87\x8f\x06\xd8\x9d\xdf\x2d\x29\x79\x55\x72\x43" +
	"\xbc\xa1\x1f\x13\xbd\x37\xe2\xbd\x82\xbe\x04\x26\xd6\xb6\x0d\x27\x69\xcd\xbb\xa5\xab\xe4\x59\x8a\x09\xc0\xdf\x96" +
	"\xd0\x2d\x4a\x2f\x04\x35\x5d\xbc\x37\x5b\x2b\x0e\xdf\xd3\xbb\xae\xe1\xa6\x44\x58\x3f\x34\x5c\xa3\x1b\x96\xc5\x6b" +
	"\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\xfc\xe0\x9d\xd9\xd9\x46\x73\xf2\xb9\x83\x75\xc8\x43\xf0\x68\xc6\xc4" +
	"\x45\xa0\x31\xae\x11\xe9\x49\xea\x1f\x42\xb2\xf5\x00\xb4\x78\x1c\x8e\x65\xfc\x97\xdb\x90\xad\x6b\x14\x0b\x81\x98" +
	"\x95\x90\xa6\x54\x78\xc7\x5f\x96\xff\xb2\xdc\xd4\x9f\x7b\xf3\x3e\x5d\xa8\x1c\x5e\xa8\xc0\x87\xfe\x42\x25\x6f\x9e" +
	"\x7b\xeb\xcc\xbb\xf3\x32\xe6\x56\x4b\x33\x16\x0c\xac\xc7\xbf\x0b\xf2\x6b\x42\xb1\xf8\x56\x14\xca\xe6\x35\xc9\xf9" +
	"\xca\x59\xf2\x28\x4b\x17\x2a\x27\xa3\x9d\xb5\x74\xbc\x5f\xed\x96\x2c\x71\x35\xdb\xca\x5f\x6b\x74\x63\x57\xfd\xf5" +
	"\x54\xf8\x4f\x01\xe8\xc2\xa6\xb3\x1c\xc0\x65\x8c\x9b\x0b\x5b\x8b\x77\xf8\x9c\x91\xa5\x61\xa4\x4c\xc7\xe0\xcc\x0d" +
	"\x9d\x0e\xce\x99\x99\x21\xe4\xfe\x1c\xf5\xd8\x94\xc2\x04\x8e\x83\x7e\xae\x27\x75\x1d\xa1\xae\x95\x6f\x2d\xe3\xab" +
	"\xe2\x38\xf8\x27\x06\x9d\xe5\x75\xba\x1f\x54\x8f\xa4\x55\xf6\x93\xb0\x85\x7f\x88\x40\x45\x5a\xdd\xac\x32\xbf\x80" +
	"\xe2\xa6\xcc\x19\x1a\xe6\x09\xc7\xe6\x9a\x69\x24\x0e\x45\xc5\x1b\x87\x94\xb3\xcf\x4f\x0f\xc9\x47\x36\x65\x19\xae" +
	"\x31\x67\x7b\x89\xcf\xfe\xd1\xc2\x26\x46\x15\xd6\x10\x1a\xca\xd9\xb3\x14\x54\xe5\x02\xf7\xb2\xc0\x24\x6c\xae\xa1" +
	"\x75\xd8\x24\xae\xe0\xca\xc7\x35\x37\xf6\x1a\xa4\x91\x24\xb9\x0a\x44\xcc\x3f\xac\x7f\xb9\x06\xcd\xbf\x4a\xdd\xea" +
	"\x33\x92\x34\xe7\xa4\x33\x63\x2a\xa2\x3a\xc1\xff\x5b\xb9\xcf\xd9\xbf\xc9\xe7\xdf\x93\x5b\xab\x6b\x4e\x72\xab\x90" +
	"\x9d\xec\x91\x98\xa3\x28\xc7\x16\x99\x85\x54\xf9\x3b\x12\xd6\xd5\xea\x65\xc8\x0b\xab\xb5\x35\xb7\x9b\xcd\xe9\x2d" +
	"\x37\x61\xb6\x8e\xac\x1e\x98\x59\x1a\x03\x97\xc5\x52\x9a\x9e\xdb\xb4\x5a\xf3\xe6\xc0\x60\x78\xd6\xf5\xfd\x6a\x36" +
	"\xad\x47\x6e\x96\x46\x90\x2c\x0d\x49\xfa\x16\x00\x00\xff\xff\xc8\x46\x1b\x05\xa2\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2722,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548973265, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
