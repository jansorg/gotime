// Code generated by go-bindata.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml
// DO NOT EDIT!

package tom

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportsHtmlCommonsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xdb\x38\xf2\x7f\xdf\x4f\x31\x70\xfe\x0b\x34\x85\x25\x3b\x49\xdb\x7f\xab\xba\xc1\x76\xd3\xf6\xb6\x40\x83\x3b\xc4\xbb\x38\xe0\xde\x51\xe2\xd8\x62\x43\x91\x02\x49\x27\x71\x0d\x7f\xf7\x03\xf5\x60\x4b\x14\x65\x2b\xd9\x60\x5f\x5d\x04\xc4\x92\x38\x9c\xf9\xcd\x70\x9e\x48\x6d\x36\x14\x17\x4c\x20\x8c\x32\x29\x70\xfd\x9d\x69\x33\xda\x6e\x5f\x00\x00\x6c\x36\x8a\x88\x25\x42\x58\x3d\x97\xef\x16\x52\x65\xc4\x5c\x5b\x62\x3b\x32\x8b\xd5\x65\x45\x8d\x82\x6e\xb7\x2f\xea\xdf\x17\x7b\xce\x74\xa5\x88\x61\x52\xec\x19\xff\x9f\x4e\xe5\xfd\x97\x07\x92\x18\x88\x3e\x82\xc2\x5c\x2a\xf3\xcf\xdc\xd2\xe8\x70\x5e\x0f\x7d\xae\xa6\x69\xb0\xec\xca\x89\xf7\xcc\xa4\x0e\xa0\x00\x26\xaf\x96\xd2\xac\x73\x8c\x60\xc9\x4c\xba\x8a\xc3\x44\x66\x93\x1f\x44\x68\xa9\x96\x13\x23\xb3\xc9\x52\x06\xf6\x87\x12\x83\x7f\xb0\x0c\xc3\x9a\xf3\x7c\x95\xbd\x9a\x40\xd0\x62\xc7\x16\x10\x7e\xd3\x37\x72\x25\x28\xd2\xff\xa0\x92\x8d\x51\xfb\x37\xd3\x39\x11\x90\x70\xa2\xf5\xc7\x9d\x66\xc1\x4f\x54\x72\x74\xb9\xd9\x64\x4c\xd4\xcc\x21\xfc\x07\x9a\xed\x76\x36\xb1\x13\x2e\x1b\x12\x90\x6b\xf4\x31\x1d\x3a\xbd\x30\xef\x40\x93\xff\x9b\x99\xb4\x30\xe6\xff\x6c\xdf\x00\xcd\x16\xd0\xb0\x42\xe0\x48\x29\x24\xc5\xea\xf2\x79\xa4\xed\x97\xeb\x19\x56\xff\x2f\x28\xb0\xd9\x00\x3b\x7b\x27\x60\x54\x99\x17\x76\x51\x09\xdb\xad\x4f\xa1\x82\xf7\x60\xad\x86\x38\xa5\x51\x24\xb9\x45\xfa\x4d\x2c\xe4\xde\x1d\x9f\xc7\xab\xec\xbf\x2f\xc2\xa8\xf5\x1c\x15\x43\xdd\xf1\xac\xc9\x2b\x47\xc1\x6b\x26\xb6\xdb\x57\x93\x23\x44\xe4\xa1\x43\xd4\x22\xf8\x74\xb7\x3c\xae\xf6\x7c\x95\x65\x44\xad\xf7\x2a\x1f\xd1\x6f\x29\x0d\xcb\xb0\xfe\x29\x03\x34\xbc\x41\xbd\xe2\xe6\xb7\x55\x72\x8b\xa6\xd2\xae\xe0\x36\x33\x24\xe6\x58\x2f\xb2\xae\x44\xed\x97\x6b\x66\x62\x49\xd7\x97\xad\x20\x0b\xbf\xe9\x7f\x29\xf9\x03\x93\x8a\x9f\xeb\x8e\x46\x5d\x76\xfd\xc9\xd0\xcb\xcd\xa6\xf4\xa0\x6a\xf2\xc8\x3a\x87\xa1\x5e\xda\x1a\x90\x61\x86\xa3\xf5\xae\xf0\x0f\x7b\xe7\x9b\x31\x9b\x34\xe5\x75\x5d\x8b\x2d\x40\x48\xe3\x24\xaa\x9b\xd2\x2a\x9f\x89\xc1\xaf\x8c\x1b\x54\x37\xb6\x54\x85\x5f\xb2\xdc\xac\xe1\xb1\xfa\x58\xe7\x81\xa2\xd6\x45\xc3\x74\xca\x30\x28\xc8\xad\x62\x83\x70\x5d\x33\xc1\x32\xc2\xe7\x46\x31\xb1\x1c\x64\x04\xae\x11\x2a\xcd\x0b\x6e\x0d\xfd\xfe\x56\xf5\x1a\xc2\x1f\xaf\x44\x6b\x25\x3b\x38\x5b\x18\xcb\xd4\x00\x56\xb8\x1f\xa5\x83\xb0\x93\xb1\xea\xbb\x3a\x71\x36\xe7\xbb\xc0\xd8\x62\x50\xdd\x7b\x94\x95\xcb\x54\x6c\x8e\xea\xf1\x58\x5d\x76\x69\xf8\x09\x71\x43\x04\xf5\x28\x5a\xdb\x3a\xfc\x9d\xe8\xcf\x84\xf1\x75\xf5\xe2\xb1\x1a\x17\x73\x9f\xaa\x71\x87\xa2\x04\x6d\x30\xcb\x39\x31\x4e\xb1\x28\xea\xd1\x01\xa8\x95\x39\x9e\xcb\x40\x7f\x8a\x8e\x89\x76\xaf\x9e\x66\xa4\x95\xf8\x7b\xcd\xd4\x07\xf7\x29\x86\x9a\x4d\x1a\x25\x64\x36\x29\xea\xcd\xa5\xaf\xce\x25\x32\xcb\xa4\xb8\x9a\xcf\xeb\x4a\x37\xd3\x66\x6d\x69\x6b\x4e\x91\x92\xd2\xc0\xa6\x25\x3b\x08\x16\x52\x98\x40\xb3\x9f\x18\xc1\xd9\x79\x6e\x3e\xf8\x86\x17\x24\x63\x7c\x1d\xc1\x48\xaf\xb5\xc1\x2c\x58\xb1\xd1\x18\x02\x92\xe7\x1c\x83\xf2\xd5\x18\x7e\xe3\x4c\xdc\x5e\x93\x64\x5e\x3c\x7f\x95\xc2\x8c\x61\x34\xc7\xa5\x44\xf8\xf3\xdb\x68\x0c\x37\x32\x96\x46\x8e\xe1\x77\xe4\x77\x68\x58\x42\xc6\xf0\x49\x31\xc2\xc7\xa0\x89\xd0\x81\x46\xc5\x16\x63\x18\x7d\xb2\x4c\xe1\x4a\x72\xa9\xe0\x4b\x26\x7f\x58\x49\x3b\x36\x9e\x37\xf3\x75\x16\x4b\x3e\x72\x61\x17\x59\xb4\x8d\xfd\xfb\x2a\x61\x94\xc0\x95\x14\x5a\x72\x1c\x8d\xe1\x5a\x0a\x92\xc8\x31\x64\x52\x48\x9d\x93\x04\xfb\x99\xdc\x23\x5b\xa6\x26\x02\x61\x77\x5f\xfc\xc3\x0b\x87\x30\xb1\x70\x23\x88\x39\x49\x6e\x5d\x26\xf1\xb2\x1e\xbe\x4f\x99\xf1\xc8\x30\x1c\x6b\x8a\x93\x8b\xb3\xb7\x6f\xe2\xd7\x2e\x8d\x92\xf7\x01\xde\xa1\xa8\xc9\xee\x88\x7a\xb9\x67\x7c\xea\x23\x97\x94\xee\x98\x22\x76\xa4\x16\x43\xc1\x4a\xac\x34\xd2\x08\x4e\x08\xda\xab\x83\x5c\x2a\x8a\xaa\xa2\xe5\xa5\x01\x4a\xd1\xcd\xe9\xa7\x1d\x6b\x54\x5d\x50\x1b\xad\x1f\x6a\x4d\xba\x37\x52\x47\x37\xd7\x5e\xd6\xff\x83\x7b\x46\x4d\x1a\xc1\xd9\x74\xfa\x4b\xc7\xa0\x05\x01\x25\x86\x1c\xa7\x32\xe9\x10\x90\x3b\xda\x78\x39\x6c\x01\x76\x13\x6a\xb7\x89\x25\xa7\xbd\x44\xd6\xc1\xca\xf8\x9b\x86\xef\x14\x66\xbd\xf6\x6c\xae\x47\x8d\xa1\xb5\xd6\x0d\x20\xdb\x3d\x93\x5f\x33\xa4\x8c\xc0\xcb\x5c\xe1\x02\x95\xae\x16\x4f\x27\x29\x66\x18\x01\x25\xea\xf6\xd4\x49\x0a\xbe\x44\x01\x4d\x47\x3f\x59\x10\x7b\x7d\xf0\x50\xec\x57\xf2\xe4\x8c\xd8\xcb\x47\x74\xdc\xe9\xc1\xeb\xc9\xe7\x6f\xed\xd5\x47\xd9\x0c\x91\x93\x37\xef\xed\xe5\x23\x75\x7c\xff\xdd\xd4\x5e\x5e\x55\x9e\xe4\xff\xd0\xe3\xd8\x27\xaf\xa7\xf6\xf2\x52\x0f\xf7\x46\xe8\xf1\xc8\x93\xff\xbf\xb0\xd7\x61\x2c\x8f\xf0\x1f\x28\x7c\x68\x7f\xb7\xbb\x4d\x4d\xc6\x1d\xd7\x68\x54\x90\x92\xe9\xee\x85\xc3\xf0\xa8\x76\x31\x49\x6e\x97\xca\x6e\x90\x07\xa5\xba\x56\x7e\x6f\x88\x2e\x5f\xb9\x0b\x63\xf0\xc1\x04\x0a\x05\x45\xdb\x40\x47\x20\x73\xc3\x32\xf6\x13\xbf\xe3\x92\xc5\x8c\x33\xb3\xf6\x86\x4f\xb9\xc1\x6b\x6b\x5c\x25\x96\x52\x64\x23\x23\xb9\xea\xec\x0c\xce\x49\xae\x31\x82\xfa\xae\x25\x68\x2f\x29\x1d\x83\xa1\x8e\x28\xce\x04\x06\x69\x95\x47\xce\xc2\xf3\x37\x45\x86\x68\x52\xe4\x84\xd2\x42\xa1\x69\x39\x0a\x67\x1d\x92\x66\x8d\xf7\x0f\xba\x05\xce\x67\x88\x34\x2c\xe2\xd6\x82\x2c\xef\x1c\xa8\x1d\x20\xd3\x1e\x3e\xae\x35\x6d\x5d\x0c\x8a\x0a\x6c\x01\xdc\x2b\x92\x7f\xe8\xae\x1c\xe1\x6c\x29\x22\xe0\xb8\x70\x7a\x94\x3b\x54\xb6\x9d\xe0\x35\x45\x2c\x8d\x91\x99\x5f\xb4\x6b\x5d\x77\xae\x91\x79\x0f\x66\x24\xb4\x8b\xbc\xcf\x5f\xdd\xf8\x3c\x14\x07\xed\xd8\xf7\x79\x78\x33\xb4\x3a\x55\xc3\x37\xa1\x5e\x4c\x67\x4a\xf9\xda\x5f\x24\xc2\x7d\xd9\x3c\xee\xeb\xfb\xe2\x7a\x90\x99\xa4\x14\x8c\x8a\x84\xd5\x2d\x65\x9c\xbe\x3c\x17\xa7\x60\xe8\xb8\x35\x6e\x7b\x5b\x0f\xd5\x50\x4b\xb7\xf3\x7e\x0b\xce\x71\x34\xc1\xd9\x30\x3c\x05\xdd\x63\x10\x1d\xa9\xc8\x95\xbc\x8c\x18\xc5\x1e\xc0\xd0\x48\x48\xf3\x32\xe2\x44\x9b\x52\xe4\xe9\xd8\x25\x49\x3b\x24\xfe\xd8\x0b\x54\x95\x28\x5a\x51\xde\x14\x5d\x72\x0c\x7c\xf1\xdb\xdb\x2e\x15\xf1\x27\xef\x50\x2d\xb8\xbc\x8f\x00\x39\x67\xb9\x66\xba\x4d\x54\x8f\x07\x0f\x11\xa4\x8c\x52\x14\x87\xc3\x34\x63\x94\x72\xec\xb1\x4f\x6a\xdd\xab\x83\xaf\x9d\x27\xda\x89\xaa\xa1\xc0\xfb\xf7\xbf\xf8\xd9\x16\x92\x03\x9b\x41\x1c\xce\xfd\x09\xa6\x3b\xbd\xb0\xf0\x81\xf9\xc5\x78\x8f\x5a\x1e\xa3\xb7\x73\xc1\xbe\x2f\x3a\x14\xd7\xdd\x76\xb2\x99\xe0\xc3\x8b\xde\xc5\x8f\x8b\xf3\x46\x0d\x97\x7e\x2c\x2d\x2e\x6f\x7b\xb9\x54\xfd\xc4\x21\x45\x5a\x5b\x80\x81\x45\xde\x6d\x99\x4e\xbd\x8b\x4b\x56\x46\xfa\xaa\x6c\x04\x17\xf9\x03\x68\xc9\x19\x75\xf9\x35\xda\x1e\x87\x67\x46\xd4\x92\x89\x08\xa6\x30\x85\x8b\xfe\x8a\xb5\xd3\xb8\x53\x3f\x76\x25\x2f\x7c\x73\xc0\x5c\xb1\x91\x86\xb8\x5d\x53\x29\x3b\x30\x32\x3f\x14\xae\x36\x9b\xec\x18\xd8\x06\xc1\x79\xe3\x02\xaa\x94\x2d\xb9\x3a\x06\xe9\xf6\xb3\x3d\xe9\x29\x91\x7c\x27\x62\xdc\x7e\xf4\x8b\xb3\x31\xf3\x17\xe4\x15\x9f\x3e\x6d\xce\x63\x99\xd7\x25\xdb\x2d\x9e\xbb\xb5\x1f\x50\x01\x9d\x7d\xfc\x69\x7f\x7b\xe1\x44\x2f\x1c\x6b\x4f\x3a\x6a\x04\xb6\x53\x40\x55\x69\x53\x3d\x0d\x4f\x17\x47\x05\x76\x54\x6c\x27\x83\x76\xba\xc9\xb0\x6f\xe1\x06\xa4\x9d\x0e\xab\x27\xf2\x79\x04\xe2\x32\x3f\x79\x03\xa5\x0c\xd2\xf3\x43\x41\x6a\x88\x32\x01\x25\xd6\x93\xca\x7b\x8b\xba\x78\x90\x79\xe0\xf1\xad\x8c\x89\xfa\x88\xe0\x6d\xa7\x2b\x1e\xbc\xea\x42\x1a\xd4\x63\x08\x29\xea\x44\xb1\xe2\x18\xd3\x3d\x63\xcb\x74\x90\xae\xf3\x14\x85\xf6\xe5\xaf\xe0\x1e\xe3\x5b\x66\x0e\x91\xf4\x0c\x35\x61\xb4\x3e\x90\x3a\x00\x64\x4e\x12\x66\xd6\xb6\x31\x7f\xe3\x76\x48\xb3\x49\x75\x4a\x58\x3e\x15\x0f\x50\x9c\x18\x7c\x1c\xe5\x8a\x09\xd3\x38\x04\xfd\x35\x27\xcb\x8e\x11\xab\xd5\x39\x9f\x66\xfe\x14\x56\x34\x54\x83\x0f\x1d\x9b\x3b\xcd\xb3\x03\xe5\xe9\x5d\xdf\xa4\xf3\x31\xa4\x17\x63\x48\x5f\x1f\x98\xfc\xba\x67\xf2\x81\xad\x5e\xb7\x29\xb2\xb6\x08\x62\x85\xe4\x36\x60\x42\x33\x8a\x11\x90\x3b\xc9\xfc\x9e\x6d\xdc\x14\x70\x7c\xb6\x43\x45\x16\xc6\x16\xb9\x5e\x07\x28\x77\x28\xbd\x42\x62\x5c\x48\x35\x58\xc8\x41\xa2\x03\x78\x29\xd3\x39\x27\xeb\xa8\xb4\x64\x95\xfc\x02\x5b\xec\x7b\xb6\x55\x1e\xe7\x78\x26\xd0\x4d\x29\x8b\xee\x71\xd6\xa3\xa5\x0c\xd7\xda\x16\xe8\x8e\xca\xd0\x0c\x35\xdf\xe1\xfd\x4a\x1b\x99\x35\x0e\xef\xab\x2f\xf3\xed\xaf\x23\x57\x35\x55\xf3\xfb\x80\x73\xca\x5f\x4e\x0e\x5b\x5f\x10\x1a\x24\x3b\xd9\xc7\x85\x7c\x65\x1c\x8f\x0a\x62\x82\x33\x81\x57\xf3\x39\x1c\x15\x59\xfd\xfe\x37\x00\x00\xff\xff\x65\xcf\xff\x0e\xf3\x24\x00\x00")

func reportsHtmlCommonsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlCommonsGohtml,
		"reports/html/commons.gohtml",
	)
}

func reportsHtmlCommonsGohtml() (*asset, error) {
	bytes, err := reportsHtmlCommonsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/commons.gohtml", size: 9459, mode: os.FileMode(420), modTime: time.Unix(1577481074, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportsHtmlDefaultGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x8f\xa3\x36\x18\xbe\xe7\x57\xbc\x45\x73\x98\x59\x15\xd0\xdc\x56\x2b\x26\x87\x9d\xe9\xb6\x95\x76\x5b\x69\x92\x6d\xcf\x0e\x38\xc1\x5d\xc0\x29\x36\x3b\x1b\xa1\xfc\xf7\xca\x36\x18\x0c\x36\x21\x99\x54\xab\xf6\x94\x80\xed\xf7\xe3\x79\xbf\x1e\x27\x75\xed\x43\xf8\x66\x47\xf9\x61\x8f\xdf\xc1\x8e\xf0\xb4\xda\x04\x31\xcd\xc3\xbf\x50\xc1\x68\xb9\x0b\x39\xcd\xc3\x1d\xf5\xc5\x47\x89\xf7\xb4\xe4\xc1\x33\x66\x55\xc6\xdf\x57\xf1\x17\xcc\xdf\x84\xe0\x1f\x8f\x8b\x45\x5d\x27\x78\x4b\x0a\x0c\xde\x1a\x6d\x32\xac\x16\xbd\xe3\x71\x01\x00\x70\x1d\x1d\x4a\xd2\xcd\x46\xbe\x83\x77\x0f\x10\x74\x2f\x59\x4a\x5f\x7e\xfa\x86\x62\xf9\x5e\x89\xf8\x7d\xcf\x09\x2d\x58\xb0\x6a\x97\x9e\xaa\x12\xc9\x57\x30\x38\x97\xef\xf9\x61\x7c\xee\x59\x19\xb2\x6a\x77\x08\x2f\xcf\x75\x26\xe5\x79\xa6\xa4\x86\x8d\x58\xd3\x17\xba\xe7\x6c\xa4\x19\x5a\x4d\x11\x17\x50\x42\x9c\x21\xc6\x1e\x3c\xf9\xe0\xd3\x24\xf1\x96\x72\x55\xed\x48\x31\x4a\xfa\xcf\x65\xf7\xd0\x6c\xd0\xe7\x53\xff\x85\x24\xd8\x5b\x46\x6c\x8f\x0a\xfd\x96\xf0\x0c\x7b\xcb\xba\x0e\xd6\xe2\xdb\xf1\x18\x85\x62\x79\x19\x85\x3c\x35\x45\xd5\x35\xd9\x82\xb4\x58\x62\xb2\x42\x19\x66\x8d\x27\x0e\x8d\x39\x2d\xf0\xc1\x17\x16\xe2\x52\xa8\x20\xf7\x6f\x0b\xf0\xe4\x41\x4f\x28\xe2\xe9\x12\xea\x1a\x17\xc9\x40\xcc\x40\xd3\xe7\x62\x5d\xa2\xf8\x0b\x1e\x6e\x1b\xfa\x47\x72\x3c\x52\xf6\x84\x48\x76\x80\xaa\xf0\xb9\x12\xd1\xea\x1d\xe8\x3b\x69\xc3\x6b\x2d\x38\x57\xfd\x49\xa9\x4d\x2e\x3b\x04\x0a\xdb\x75\x49\x58\x8c\x9e\x19\xcb\x59\xf1\x54\x65\xc7\xfa\x51\xb5\xe8\x1b\xbb\x38\xc7\x4d\x25\x3b\x99\x76\xd6\x14\x1d\x85\xfd\x1a\x10\xfb\x07\x15\xb2\xa1\xc9\xa1\x7b\xae\xeb\x12\x15\x3b\x0c\x4d\x5b\x09\x1e\x53\x92\x25\xaa\xed\x0c\x11\x91\xa0\xd1\x12\x6e\x0b\xca\x21\x90\x3d\x61\x45\xab\x32\xc6\x77\xd0\xf5\x11\xab\x93\xe5\x18\x11\xb5\x90\x18\x85\xc7\x93\xe5\xc2\xba\xf1\xac\x70\x25\x46\xb8\x04\x96\x1c\xe7\xfb\x0c\x71\x0c\xea\xd5\x47\xc2\xb8\x07\x81\x94\x12\x3c\xd3\xaa\x48\x44\x62\x2b\xf5\x76\xed\xf6\xe0\x59\x2c\x9b\x2a\xd5\x81\x75\x22\xde\xa6\x71\x4d\x8d\xfc\x5a\x6c\xa9\x07\xc1\xcf\x98\xcb\xd2\xe9\x89\xbc\x8a\x89\x57\x37\xf0\x0c\xf3\xce\x57\xa9\x53\x1f\x82\xb6\xe4\x67\x64\xca\x54\xe9\x3b\x60\x99\xca\x29\xb8\x20\xaf\x1a\xf5\x6e\x4c\xe0\x44\xd8\x1c\xd0\xe4\xa4\x68\x81\xe8\x20\x11\xb1\x38\xa9\xd0\xd9\x83\xc2\x61\x7d\x0e\x77\x5a\x5a\x8c\xd9\x44\x22\xbe\xa5\x94\x1b\x63\xb8\xb5\xbb\xa4\x2f\x3e\xab\x36\x9c\x72\x94\x79\xa3\xd9\xac\x1b\xdd\x5a\xae\xbb\x9b\xf9\x64\x9c\x86\x2d\x1a\x86\x8d\xda\x1a\xa8\xb6\xe3\x8d\xfb\x80\x30\x6b\xfe\x54\x86\xd9\xa3\xcb\x51\x49\xad\x21\xf6\x8a\xbf\x78\x56\x5f\xdd\xae\x33\xad\x1a\xe8\x83\x81\xd2\x7e\x22\xb7\x9a\xfa\xf9\xfc\xaf\x0e\xf6\x6b\x64\x4c\x57\x70\xf6\x7c\xb9\x02\x06\x7d\x15\xe7\x0d\xfd\xae\x1e\xa3\x50\x12\xe7\xe5\x42\x37\xe1\xee\xaa\xf2\x09\xf1\x92\x7c\xfb\x1f\xdf\x55\x6c\x37\x88\x04\x71\x04\xfa\x32\xd1\x7c\xcb\x25\x12\x17\xde\x2c\xd4\x61\xbf\xb9\x4a\x5c\x7c\xbd\x78\x21\x3c\xd5\x69\xf0\x81\x94\x8c\xff\x46\x0b\xe9\x8e\x24\x65\xd6\x6c\xbf\x56\xac\x4c\xa9\x8a\x12\x4e\x71\x41\x47\x82\xf7\x72\xbb\x47\xeb\x66\x12\xe2\x4b\xee\x01\xf6\xb9\xf1\x9f\xe2\xc0\xf6\x34\x02\xf9\xf1\xe0\x75\x40\x8e\x41\x75\x8c\xf9\xf9\xd1\x03\x1b\xc7\x70\xee\x54\xd2\xc7\xdc\xec\x4f\xc2\x53\x59\xb4\x06\x49\x73\x2b\xbc\x94\x26\x6a\xa0\x62\x9a\x69\x4e\x01\x5d\x5f\xd5\x34\xc3\x86\xdd\x04\x07\x73\x52\xaa\x49\xf6\xe8\x83\x31\x8b\xac\x95\x64\xd8\xbf\x29\xcd\xd6\x50\xd7\xa0\x72\xb8\xa1\x1e\xdd\x35\x0f\x8e\x2a\xda\xa7\xb9\x9e\xec\x25\x17\xd1\x4b\x7b\x59\x7e\x4f\x2e\x68\xef\xa6\x73\x08\x62\x53\xbd\xe4\xc7\x9b\x58\xe4\xbc\x18\x0f\xee\x36\x7a\xaa\x2e\xea\xfa\xa6\x0d\x84\x10\xc4\xaa\x5c\x1e\xf8\x03\x65\x15\x66\xad\x5c\xb8\x21\x73\xa7\xbd\xc3\x61\x7d\x46\x86\xb0\xae\x6f\x0d\x2e\x90\xf4\x82\x7d\x37\x1d\xe8\xf3\x32\xf1\x95\x59\x68\x18\x36\x23\x0b\x27\xee\x1c\x17\xff\x08\x04\x8e\xf2\x77\xa1\x3c\x87\x6a\x5a\x27\xeb\x3c\x54\x5f\x8b\xe8\x14\xed\xb3\x03\x6b\x85\x6a\x7a\xfe\xcd\xa3\x83\xdf\x85\x08\x9e\x49\xe8\x12\xf2\xb5\x05\x5a\xc9\xf4\xfa\x73\x9c\x6c\x01\x15\x89\x85\x54\x2a\xa6\x2b\x7f\x9a\x67\x70\x4b\x98\x7a\xd6\xe5\x2c\xc7\x79\x67\xcf\xdd\xdd\x68\xec\x77\x63\xcf\x20\xcd\x5a\x82\xd9\x22\x33\x86\x45\xfa\xe0\xbf\xbb\xf8\xe2\x3d\x4f\xe1\x7e\x78\x29\xeb\x0b\xee\xff\x71\xd0\x9e\x1b\x89\xb5\xf1\x91\xc0\xc5\x3a\x34\x20\xb7\xd3\xe8\xde\x35\x7c\xe6\x09\x71\xfc\x2c\x9a\xa9\x92\x38\x44\x41\x27\x54\x2f\x08\xb2\x4d\x83\xec\xc0\x92\xa0\x68\x11\x22\x7f\x13\xf2\x75\x36\xf5\x1b\xfb\x66\x8f\x37\x9b\x6a\xa4\xa7\x68\xf7\x55\x18\x53\x3f\x66\x6d\xb8\x02\xe7\x8f\x6f\xae\x06\x38\xc2\x66\x6a\xd2\x36\xdb\x75\xcd\x46\x3f\x24\x34\x16\x85\x09\x29\xcf\xb3\xe5\x22\x12\x1f\x90\xa1\x62\x27\xfb\x8f\xf8\xf2\x1e\x31\x0c\x92\xf9\x44\x1d\xfb\x8d\x72\xcc\x11\xc4\x29\x2a\x19\xe6\x0f\xde\xe7\xf5\x07\xff\x6d\x83\x67\x73\xff\x30\x13\xe5\xb1\x62\x9c\xe6\x0d\x86\xbd\x91\x2e\x5e\x2c\xeb\x1a\x02\x90\x13\x59\x3e\x2e\x60\x48\xe1\xfa\x40\xc5\x34\xcf\x69\xf1\xb8\x5a\x75\xed\xa5\xb7\x28\xd5\x34\x8b\x51\xa8\xec\x8d\x14\xaf\x58\x5c\xe5\xff\xa6\xc9\xff\x9a\xda\xab\x97\xfc\xd9\xa0\xe7\x72\x5b\xac\x51\x7a\x2f\x52\x49\xb8\x9a\xde\x1b\x9d\x73\x74\xee\x09\xb3\xb8\x24\x52\xb6\x3e\xbd\x6f\xb3\x32\xe9\x16\x45\x6e\x32\xb4\xc5\xbf\xac\x3f\x7d\x04\x29\x79\x6f\x08\x36\x7f\xc5\xa8\xf2\x1c\x95\x07\xb0\x20\xd7\x2c\x79\xd0\xf4\x5e\xe9\xaa\x92\x62\x4d\x53\xbd\x2b\x0a\x15\xbc\x91\xc4\x6c\xf9\x4f\x00\x00\x00\xff\xff\x24\xa1\xe8\x3c\x06\x1d\x00\x00")

func reportsHtmlDefaultGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlDefaultGohtml,
		"reports/html/default.gohtml",
	)
}

func reportsHtmlDefaultGohtml() (*asset, error) {
	bytes, err := reportsHtmlDefaultGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/default.gohtml", size: 7430, mode: os.FileMode(420), modTime: time.Unix(1577478777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportsHtmlTimelogGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\xc2\x1e\xda\x00\x92\x10\x14\x05\x16\x0b\xd9\x87\xcd\x4f\xd1\x4b\x5b\xac\xd3\x07\xa0\xc5\x89\xc4\xae\x48\x0a\xe4\x38\xa9\x21\xf8\xdd\x0b\x92\x92\x2c\x3b\x92\x62\x67\x7d\x30\x45\xce\xcc\x37\xff\xe4\xb4\x6d\x02\xd9\x4d\xa9\x69\xdf\xe0\x17\x28\x05\x55\xbb\x6d\x5a\x68\x99\xfd\xcb\x94\xd5\xa6\xcc\x4a\x4d\x42\x62\xbf\x18\x6c\xb4\xa1\xf4\xeb\xae\xf8\x8e\xf4\xcd\x6f\x6e\x32\x48\x0e\x87\x28\x6a\x5b\x8e\xcf\x42\x21\xc4\x81\x1a\x1f\x0e\x11\x00\xc0\xbb\x1a\x48\xcb\xac\xd4\x89\x5b\x3a\xf8\x6f\x68\x77\x35\x05\x98\x0e\x3e\x20\x7d\xda\xfa\x33\xf8\xb2\x82\xf4\x78\x68\x2b\xfd\xfa\x20\x1b\xda\xbb\xf3\x00\xf1\x57\x43\x42\x2b\x9b\x06\x13\xd3\x4d\xcf\xe1\x0c\x75\x52\x39\x17\x2f\x50\xd4\xcc\xda\x55\x1c\x30\xe3\xb5\x27\x04\x48\xf1\x0c\x9d\xaa\xb4\x17\x83\xd1\xcf\x33\x68\x03\x3f\x2b\x4d\xa7\x8c\x1b\xbd\x33\x05\xfe\x02\x47\x9b\xce\x44\xbd\x72\x62\xdb\x1a\x7b\xf5\x7e\x93\x70\x46\x0c\xc2\xa7\xe6\x7c\x64\xcc\xa9\x60\x85\x8c\xcf\xd1\xcc\x34\x21\x18\x9c\xdd\xa0\xdc\x22\xe7\xc8\x81\x04\xd5\x08\xa4\xe1\x3b\x62\xd3\xed\x98\xe2\x41\xbb\x05\xd2\x25\x52\x85\x06\x84\x82\xc6\x08\x45\xc8\xe1\xef\xfb\x47\x7b\x93\x4d\xb8\x32\xb2\x0c\x0a\x5d\xdb\x86\xa9\x55\xfc\x5b\x3c\xf8\xe6\xc0\xe3\xf5\x90\xb8\xf4\xc9\x1d\x1c\x0e\x79\x46\xd5\x8c\x1b\xd9\x9c\x1f\x8b\x0e\x7a\xfd\x41\x27\x67\x84\x89\x8b\x13\x1a\xa7\x59\xdc\x7e\x56\x10\xdf\x33\xc2\x78\x49\xef\x25\x20\x1b\x62\x86\x7e\x18\xe5\x41\xf1\x6b\x30\x5c\xdb\xbd\x75\x67\x67\x98\x2b\xf0\xab\x80\xaa\xe4\x55\x70\x3c\x82\xfc\xa9\x09\xed\x22\xc2\x42\x32\xb2\xc5\x52\xdc\x6a\xbe\x9f\xa6\xb5\xad\x61\xaa\xc4\xa1\x6b\x1e\x0d\x93\x68\xbb\x65\xb1\xc0\x16\xb2\x1f\x18\x78\xef\xa9\x75\x79\x4a\x38\xdb\x3b\x5f\x9f\xb5\x91\x8c\x5c\xfe\x21\xf5\x09\xf4\x0e\xcf\x58\x3e\x0b\xe6\xb2\x70\x44\x7b\x12\xf2\xc3\x68\xba\xe9\xc0\x16\x45\xa0\xbf\x65\xd2\x3f\xec\x86\x74\xd3\x20\x5f\x08\xce\xa4\x94\x50\x65\x8d\xf7\x6c\xea\x02\x9a\x97\x1d\xfb\xf7\xa0\x2e\xd7\x89\xb5\xc5\x0f\x28\x72\x69\xf9\x80\xb2\x8b\x78\x2f\xe1\xbb\x2a\x77\x7d\x0d\x48\xa1\xfa\xfe\x83\xb4\xff\xba\xb2\x0e\x94\xef\xbd\x75\xdb\xa6\xbe\x0b\xdf\x93\x9e\x6f\xc4\x25\x2f\xf3\x6c\xa1\x11\x73\x7a\xd6\x9a\x86\xba\xdc\x6d\x49\x13\xab\x67\x1f\x1e\xd3\x73\x1a\xfd\x9a\xbc\xc3\x0d\xe7\x0f\xc2\xaf\xc7\x4b\xe7\xc9\xcb\x5d\x71\x6d\x15\xba\x1e\xf4\x81\x4b\x81\xff\x1b\x99\x30\x93\x90\xf4\x77\xa4\x87\xff\x58\x41\x17\xe8\x5a\x7f\xf0\x0a\x74\x11\x7c\x4b\xcc\x33\xff\x92\xae\xcf\x46\x86\xd3\x3c\x4d\xb6\xcc\x78\x2a\x99\x7f\x3a\xb9\x78\x39\xc7\x3e\xbd\x53\xef\x2a\x51\xf3\x30\x3d\x4d\x5d\xa9\x6d\x4b\x28\x9b\xda\xdd\x88\xfd\xa8\x36\x4c\x53\x0b\xe6\x0e\xfb\xce\x82\xfe\x28\xba\x66\xc0\xab\x48\xd6\x61\x42\xcb\xba\x11\xad\x9b\xef\xda\xf6\x93\x6e\xc8\xbe\x99\xe0\xc0\x69\xc8\x7f\xe2\xba\x70\xf0\xe0\xe4\xd7\x51\xee\x16\xa8\x99\x2a\x57\x71\xdb\xfa\x8f\xaf\xcc\x22\x1c\x0e\xb1\x23\x0e\x0f\x53\x2e\x91\x18\x14\x15\x33\x16\x69\x15\xff\xf3\xf4\x98\x7c\xee\x6a\xb6\x6d\x5f\x05\x55\xe0\x95\xa6\x77\x3b\x4b\x5a\x76\x01\x8e\x8e\x85\xe1\x0e\x5c\x8f\xfa\x12\xf2\x9b\x68\x1c\x8c\xe8\x3c\x9a\x85\x96\x52\xab\xbb\xcd\xe6\x38\xfb\x8e\x88\x5e\x49\x47\xcc\xb3\x60\x65\x1e\x1a\x34\x9a\x33\x07\xfa\x98\x57\xb7\xbd\x21\xd5\xed\x49\xec\xdf\xc8\xdd\xa3\x2d\x8c\xf0\xd1\x1b\xa4\x9b\x61\x22\x39\x12\xe3\x1e\xb0\x39\xc1\x73\xa3\xaf\x47\x73\x33\xf3\x66\x27\x25\x33\x7b\x98\x70\xa7\x23\xc5\xd0\x4d\xeb\x3e\x87\x03\xca\x44\x85\x0d\x6c\x79\x16\x9c\xce\x7d\x35\xac\xff\x0f\x00\x00\xff\xff\xda\x4e\xb0\x5e\x82\x0c\x00\x00")

func reportsHtmlTimelogGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlTimelogGohtml,
		"reports/html/timelog.gohtml",
	)
}

func reportsHtmlTimelogGohtml() (*asset, error) {
	bytes, err := reportsHtmlTimelogGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/timelog.gohtml", size: 3202, mode: os.FileMode(420), modTime: time.Unix(1577298013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": reportsHtmlCommonsGohtml,
	"reports/html/default.gohtml": reportsHtmlDefaultGohtml,
	"reports/html/timelog.gohtml": reportsHtmlTimelogGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"reports": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"commons.gohtml": &bintree{reportsHtmlCommonsGohtml, map[string]*bintree{}},
			"default.gohtml": &bintree{reportsHtmlDefaultGohtml, map[string]*bintree{}},
			"timelog.gohtml": &bintree{reportsHtmlTimelogGohtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

