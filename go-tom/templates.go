// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\xdb\xb8\x12\xbe\xcf\x53\x0c\x5c\x14\x68\x0a\x51\x8e\x93" +
	"\xb6\x48\xd5\x34\x38\x6d\xda\x9e\x53\xe0\x14\xbb\xa8\xbb\x0f\x40\x89\xb4\xc4\x86\x22\x05\x92\x8e\xe3\x0a\x7e\xf7" +
	"\x05\xf5\x63\x4b\x14\x25\x3b\xdd\x6d\x2f\x62\x89\xf3\xf3\xcd\x70\xbe\x19\x8a\x65\x49\xe8\x8a\x09\x0a\xb3\xe5\x3a" +
	"\xcf\xb1\xda\xce\x76\xbb\x33\x00\x80\xb2\x44\x30\x7f\x99\x4a\xb3\x2d\x68\x04\x29\x33\xd9\x3a\x0e\x13\x99\xcf\x7f" +
	"\x62\xa1\xa5\x4a\xe7\xa9\x34\x2c\xa7\xed\x1f\x45\x0b\xa9\x4c\xf8\x9d\xea\x35\x37\x1f\xd7\xc9\x3d\x35\x2f\xe7\x80" +
	"\x76\xbb\xb3\xca\xda\x8d\xc1\x31\xa7\x90\x70\xac\xf5\xfb\x99\x6e\x5c\xdd\x56\x6b\xf5\x7a\x2c\xc9\xf6\xf0\x5c\x96" +
	"\x6c\x15\x7e\xd5\x7f\x2a\xf9\x93\x26\x8d\xbd\x06\xd8\x41\x45\xdd\xf6\x5e\xd4\x2f\xc9\x6d\x59\xb2\xc5\xb5\x80\x59" +
	"\xa3\x3c\xdb\xed\x6e\xe6\x86\x78\x65\x5b\x40\x86\x19\x4e\x67\xb7\x65\x19\xfe\xb0\xbf\x7c\x1a\x37\xf3\xae\xbf\xb2" +
	"\xa4\x82\x74\x00\x59\xbc\x20\xa4\x81\xf0\x13\x36\xf4\x3b\x16\x29\x0d\x3f\xe7\x85\xd9\x3e\x15\xf4\x0f\x96\x53\x50" +
	"\x56\x3f\x3a\x0d\x78\x4e\x51\x25\x5e\xa1\x3f\x38\xff\xc6\x04\xcb\x31\x5f\x1a\xc5\x44\xfa\xf4\x78\x06\x38\x7b\x18" +
	"\x15\x4e\xee\x29\x01\xeb\xdc\x8f\xd2\x41\x68\xb1\xe5\x4c\x7c\x5a\x2b\x6c\x98\x14\x10\xb6\xbf\xc2\xff\xda\x6d\xed" +
	"\xeb\xbb\xc0\xd8\x0a\xea\xe2\xfa\xa3\xb0\x2a\x3a\x5c\x66\x72\xf3\xf9\x11\x27\xa6\xb5\xa2\xe1\xa9\x59\xae\xd4\xc1" +
	"\x1c\x8d\xe3\xa9\xb1\x54\x76\x7f\x23\xdb\xf3\x4e\xf9\xdf\xcc\x2b\xae\xdc\x9e\xb5\x52\x67\x07\x8e\x26\x32\xcf\xa5" +
	"\xb8\x5b\x2e\x5b\x96\xde\x68\xb3\xb5\xb2\xad\xa5\x48\x49\x69\xa0\xec\xf9\x46\x68\x25\x85\x41\x9a\xfd\xa2\x11\x2c" +
	"\x2e\x0b\xf3\xce\xb7\xbc\xc2\x39\xe3\xdb\x08\x66\x7a\xab\x0d\xcd\xd1\x9a\xcd\x02\x40\xb8\x28\x38\x45\xf5\xab\x00" +
	"\x3e\x72\x26\xee\xbf\xe1\x64\x59\x3d\x7f\x91\xc2\x04\x30\x5b\xd2\x54\x52\xf8\xeb\xeb\x2c\x80\xef\x32\x96\x46\x06" +
	"\xf0\x3f\xca\x1f\xa8\x61\x09\x0e\xe0\x83\x62\x98\x07\xa0\xb1\xd0\x48\x53\xc5\x56\x01\xcc\x3e\x58\xa3\x70\x27\xb9" +
	"\x54\xf0\x39\x97\x3f\xad\xa7\xbd\x19\xcf\x9b\xe5\x36\x8f\x25\x9f\xb9\xb0\xab\xda\xef\x63\xff\xff\x3a\x61\x04\xc3" +
	"\x9d\x14\x5a\x72\x3a\x0b\xe0\x9b\x14\x38\x91\x01\xe4\x52\x48\x5d\xe0\x84\x8e\x1b\xd9\x50\x96\x66\x26\x02\x21\x55" +
	"\x8e\xf9\xbb\x33\x47\x30\xb1\x70\x23\x88\x39\x4e\xee\x5d\x23\x71\xda\x2e\x6f\x32\x66\x3c\x3e\x0c\xa7\xad\xc4\xb3" +
	"\xab\xc5\x9b\xd7\xf1\x2b\x57\x46\xc9\x0d\x92\x84\xec\xa5\x68\xf5\xcf\x95\xaa\x56\xd1\x5a\xac\x35\x25\x11\x3c\xbb" +
	"\x7e\x6b\xff\x0f\xd0\x48\x45\xa8\x6a\x64\x79\x1d\xd4\x03\x56\x2f\xfa\xea\xe7\x83\x08\xab\xb2\x43\x1b\x46\x4c\x16" +
	"\xc1\xe2\xe2\xe2\xf9\x20\x8e\x4a\x80\x60\x83\x8f\x4b\x99\xac\x0d\xa5\xe3\xfa\x7c\x54\x36\x4e\x7b\xd2\x6d\x42\xc7" +
	"\x15\xda\xdd\x8a\x25\x27\xa3\x42\x76\x5f\xeb\xb2\xbf\x08\xaf\x15\xcd\x07\x21\x37\x83\xa8\x97\xb2\x16\x43\x6f\x47" +
	"\x3a\x40\x76\x07\x23\x99\xc9\xb9\x43\xb6\x0e\xd5\x6a\x33\xfb\x17\x4e\x2c\x47\xb3\x13\xe3\xe4\x3e\x55\x72\x2d\x08" +
	"\x3a\x25\x37\x3d\x22\x74\x5c\xd7\xaf\xfc\xf8\xeb\xa1\xdc\x0f\xa0\xd9\xd9\xda\x42\xa7\x24\x5c\x74\xfb\x8c\x71\x5c" +
	"\x68\x1a\x41\xfb\xab\xe7\xe8\xe0\x29\x0b\xc0\x10\xc7\x15\x67\x82\xa2\xac\xd9\xc8\x45\x78\xf9\xba\xda\xa2\xae\x44" +
	"\x81\x09\x61\x22\xb5\xfb\x57\xad\xc2\x62\x20\xd2\xed\x6d\xfe\x45\x97\xd8\xbe\x44\x64\x61\x45\x52\x0b\xb2\xfe\xe5" +
	"\x40\x1d\x00\xb9\x18\xb1\xe3\x66\xd3\xf6\x03\x54\x75\x1e\x0b\x60\xa3\x70\xd1\x47\x68\xe8\xa3\x41\x98\xb3\x54\x44" +
	"\xc0\xe9\xca\xe9\xcd\x0f\x54\xd9\x36\xca\x5b\x89\x58\x1a\x23\x73\xbf\x6b\x37\xbb\xae\xae\x91\xc5\x08\x66\x8a\xc9" +
	"\x10\xf9\x58\xf9\xb9\x94\x9d\x2a\xeb\x7e\x2b\xf0\x15\x6c\x97\x29\x03\xda\xfa\x14\xda\xcd\x74\x54\xea\xd7\xfe\x2a" +
	"\x0f\x0f\x7d\xeb\x78\xad\x1f\xba\xdb\xa4\x31\x49\x08\x18\x15\x09\x1b\x5b\xc6\x38\x79\x71\x29\xd0\xe2\x1c\x0c\x09" +
	"\x7a\x12\x76\xaa\x7b\xe5\x4e\xcd\xf6\x09\x4d\xa8\xf1\x97\x63\xa3\xd8\x23\x18\x12\x09\x69\x5e\x44\x1c\x6b\x53\xbb" +
	"\x3c\x0f\x5c\x91\x6c\x20\xe2\xaf\x76\xa4\x1a\x6a\xf6\x78\xd5\x75\x5d\x5b\x44\x3e\xc6\x8c\x4e\x88\xaa\xe2\xe5\x03" +
	"\x55\x2b\x2e\x37\x11\x50\xce\x59\xa1\x99\xee\x0b\xb5\xeb\xe8\x31\x82\x8c\x11\x42\xc5\x34\x31\x72\x46\x08\xa7\x23" +
	"\xf9\xc9\xec\x86\x0e\xf0\xf5\x99\xd9\x6f\x0d\x9d\x00\xde\xbe\x7d\xee\x37\x5b\x79\x46\x96\xb3\x8e\xe5\x71\x4a\x0f" +
	"\xd5\xab\x0c\x4f\xe8\x57\xeb\x23\x61\x79\x92\xde\x67\xdf\xe1\xd8\x31\xc5\xa4\xe1\x04\xed\xb6\xd4\xf0\x6a\x74\xf3" +
	"\xe3\xea\xab\x4c\xc3\xad\x1f\x4b\xcf\xca\x9b\x51\x2b\xcd\x08\xf6\x57\x0f\x5e\x1b\xe9\x9b\x3b\x11\x5c\x15\x8f\xa0" +
	"\x25\x67\xa4\x09\xd6\x37\xc9\x9d\xa8\x73\xac\x52\x26\x22\xb8\x80\x0b\xb8\x1a\xef\xe1\x7b\x44\x83\x8e\xba\x1f\x02" +
	"\xe1\xeb\x89\x70\x62\x23\x0d\x76\x8f\x05\xb5\x6f\x64\x64\x31\x45\x27\xcb\xf6\xbd\x01\x3b\x32\x9d\x37\x2e\xa0\x26" +
	"\xd8\xda\xaa\x93\x90\xe1\x29\x70\xa4\x7d\x24\x92\xef\x5d\x04\xfd\x47\xbf\x3b\x5b\xd3\xff\xc0\x9f\x3d\x71\xfb\x4a" +
	"\xa5\x7f\x76\x71\x0f\xf7\x27\xcc\x02\xe7\x24\x7f\x3e\x3e\x68\x1d\x56\xc1\xb1\x41\xed\xc2\x47\x76\x64\x52\x75\x3a" +
	"\x6f\x8f\x7a\x18\xc4\xd4\x67\xe5\x00\xc0\xc8\x0e\x9d\xc0\xff\x81\xa9\xdf\xb4\xf3\x04\xc4\x75\xa3\xf0\x32\xa2\x66" +
	"\xe3\xe5\x14\x1b\x0d\x56\x06\x11\xbc\x0d\xda\xdf\x16\x75\xf5\x20\x0b\xe4\x29\xa6\x93\x77\x52\x48\x43\xb5\xfb\xad" +
	"\x9c\x6b\x94\x6d\x8b\x8c\x0a\xed\xeb\x3e\x68\x43\xe3\x7b\x66\xa6\x44\x46\x96\xba\x8e\x49\x73\x63\x80\x7e\x51\x25" +
	"\xa7\x32\xef\x7c\xaf\x1d\x6c\x41\x75\x4f\xd0\x7c\xfb\xd7\x4f\xd5\x03\xe4\x94\x30\xfc\x7e\x56\x28\x26\x4c\xe7\x7a" +
	"\xed\x3f\x05\x4e\xdd\x3c\xb5\x1b\x70\x79\x91\xfb\xdb\x51\x75\x78\x39\xf9\x2a\xa1\xfb\x59\xb4\x98\x18\x05\xd7\x63" +
	"\x4a\x97\x01\x64\x57\x01\x64\xaf\x26\x94\x5f\x8d\x28\x4f\x7c\xc8\x0c\x0f\x20\x36\x17\x28\x56\x14\xdf\x23\x26\x34" +
	"\x23\x34\x02\xfc\x20\x99\xbf\x78\x8d\xcb\xf2\xe3\xda\x8e\x14\x5e\x19\x3b\xb0\x46\xcb\xa1\x3e\x7f\x8f\x3a\x89\xe9" +
	"\x4a\xaa\x93\x9d\x4c\x0a\x4d\xe0\x25\x4c\x17\x1c\x6f\xa3\x3a\x93\x4d\x7f\x43\xf6\x44\x3a\xf2\xd1\xe0\x29\x8e\x7f" +
	"\x09\x74\xd7\xcb\x6a\x78\x9b\xf5\x64\x2f\xa7\x47\x6d\x87\xed\x20\x64\xe8\x52\xcd\x77\x25\xb7\xd6\x46\xe6\x9d\x2b" +
	"\xb9\xb2\xdc\x30\x93\x39\x77\x96\x77\xad\x54\xf7\xd6\xcf\xb9\xbb\xab\x95\xc3\xde\xbd\x60\x47\x64\xef\xfb\xb8\x93" +
	"\x2f\x8c\xd3\xa3\x8e\x98\xb0\xdf\xdf\x77\xcb\x25\x1c\x75\xd9\xfc\xfd\x3b\x00\x00\xff\xff\xd3\x13\xf4\xe0\x2c\x18" +
	"\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6188,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549129096, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x73\xa4\x36\x10\xbd\xcf\xaf\xe8\x50\x3e\x78\xb7\x02\x94\x6f" +
	"\x5b\x5b\x78\x0e\x6b\x67\x53\x39\x24\xa9\xf2\x38\x39\xe4\xa6\x01\x79\x50\x02\x88\x20\xb1\x5e\x47\x35\xff\x3d\xa5" +
	"\x4f\x60\x10\x1f\xb3\x9e\xad\x4d\xe6\x02\x48\xea\x96\xfa\x75\xeb\xe9\x69\x84\x08\x21\x7e\x7b\xa0\xfc\xa5\xc6\xef" +
	"\xe1\x40\x78\xde\xee\xa3\x94\x96\xf1\x9f\xa8\x62\xb4\x39\xc4\x9c\x96\xf1\x81\x86\xf2\xd1\xe0\x9a\x36\x3c\x7a\xc0" +
	"\xac\x2d\xf8\x87\x36\xfd\x0b\xf3\xb7\x31\x84\xc7\xe3\x66\x23\x44\x86\x9f\x48\x85\x21\x78\x44\xfb\x02\xeb\xce\xe0" +
	"\x78\xdc\x00\x00\x5c\x66\x0e\xed\xe9\x6a\xaf\xda\xe0\xfd\x2d\x44\x5d\x23\xcb\xe9\xf3\x0f\x9f\x51\xaa\xda\xb5\x8b" +
	"\x5f\x6b\x4e\x68\xc5\xa2\x9d\xed\xba\x6f\x1b\xa4\x9a\xc0\xd8\x25\x5c\x2e\x15\xd2\x02\x31\x76\x1b\xa8\x8f\x90\x66" +
	"\x59\xb0\x55\xbd\x7a\x44\x8e\x51\xd6\xff\x6e\xba\x0f\x33\xc0\xd9\xe7\xe1\x33\xc9\x70\xb0\x4d\x58\x8d\x2a\xd7\x4a" +
	"\x78\x81\x83\xad\x10\xd1\xa3\x7c\x3b\x1e\x93\x58\x76\x6f\x93\x98\xe7\xd3\xae\x48\x89\x43\x39\x33\x6e\xa4\x29\xb9" +
	"\x79\x57\x41\x60\x97\x1f\x48\x1f\xa7\xc6\x42\x90\x27\xe8\x50\x30\x01\x9e\xe3\x5e\xa3\x97\xcd\x4f\x82\xab\xac\xe7" +
	"\x3a\x89\xfb\x70\xc8\xf1\x27\x60\xed\x69\xf6\xd2\x7d\x0b\xd1\xa0\xea\x80\xc1\x64\x30\xba\xcb\x49\x91\xe9\x0c\xb3" +
	"\x93\x05\x8f\x70\xd6\x8d\xd9\x00\x47\x9e\x79\xc7\xf4\xa3\x94\xe1\x95\xa4\xb2\xd0\x41\x64\xdf\xa2\x1f\x31\x9f\xf2" +
	"\xb1\x8c\xe5\xb9\x33\x19\x3f\x53\xd3\x0d\x51\x1d\x23\xeb\xc1\x7d\x88\x6c\xc2\x9f\x28\xe5\x83\x32\xb5\x6b\x6b\xe8" +
	"\x73\xc8\xda\x3d\xa7\x1c\x15\xc1\xa8\xe0\x5c\xf6\x1f\x55\xbf\x2f\xe9\x27\x75\x03\x27\xc5\xd3\x8f\xd9\x26\x76\x04" +
	"\xf2\x6b\x8b\xf5\xdc\x49\x3b\xbc\xcf\xad\xe0\x0e\xc7\x24\x56\x84\xb0\xdd\x58\x9b\x1e\xc5\xfd\x8c\x78\x43\x3e\xff" +
	"\x2f\x38\xce\xda\x95\x35\x7f\x19\xdb\x3d\xe8\x85\xec\xec\x08\x19\x26\x4c\x30\x63\x86\x38\x02\x47\x92\xe6\xad\x54" +
	"\x48\x7c\x21\x63\x6a\xe3\xd0\x50\xe4\x17\xd2\xa6\x10\xcf\x84\xe7\xae\x0c\x3e\x92\x86\xf1\x5f\x68\xa5\xc2\x51\x0c" +
	"\xe3\x29\xaf\xcb\xe5\x6a\xe8\x55\xf3\xdb\x1c\xb1\x4d\x14\x78\xaf\xb6\x23\x5d\x5c\x1d\xcb\xe5\xeb\x28\xc3\x4b\x23" +
	"\x0b\x9c\xef\xdf\xf5\x5f\x8f\xd6\xd5\xc6\xa7\x0d\x5c\xa3\x2a\x83\x5e\x5d\x46\xea\xf1\x06\xae\x2b\xca\xed\x87\x97" +
	"\x15\x3c\xa7\x02\xcc\xd4\x14\xa8\xc7\x6d\xd0\x95\xd1\xb0\xa4\x64\xd4\x5e\x87\xe7\xa4\x12\x7c\x87\xc1\xe4\x48\x07" +
	"\x43\x47\x58\x3f\xb1\x07\xda\x56\x19\xce\xfe\xc0\x0d\x9d\x99\xc4\x4d\xd6\xdf\x28\xf6\xc0\x0e\xff\xc1\x0d\x5d\x3c" +
	"\xee\xd4\x1e\x5a\x9c\x40\x6e\x8f\x01\x43\x7b\xcb\xdd\xbb\xb4\xfd\x44\x86\xbe\x41\x0c\xe3\xed\xe0\x19\x53\x30\xbc" +
	"\x16\xf1\xff\x02\xb6\x6a\x21\xab\x46\xdb\x9f\x81\x58\x08\xd0\x5b\xde\x94\x5a\x27\xf4\x40\x6f\x8a\x65\xed\x72\x51" +
	"\xdc\x67\xc7\xf8\x75\x52\xdf\x72\x89\x05\x52\x5a\x38\xd5\x03\x9d\x82\x70\x42\xc8\x47\x0c\x93\xcb\x99\xcd\xfb\x8c" +
	"\xd5\xb9\x89\x76\x09\x5e\x95\xb4\x8b\x64\x6d\x2e\x13\xfe\xa3\x67\x78\x38\xf8\x7c\x7c\x3d\xb5\xea\xd7\x0d\xcb\x12" +
	"\xd6\x9d\x50\xe4\xfb\xab\x54\x12\xba\x14\x42\xd3\x82\x61\x89\xf4\x85\xb8\xb2\x89\x90\x8e\x58\x5b\x2a\x83\xdf\x51" +
	"\xd1\x62\x66\xfd\xc2\x15\x59\xab\x6b\x27\x02\x76\x36\x86\x7c\xae\x07\xaa\x37\xeb\x25\xfb\xcd\x7c\xa2\xcf\xab\xc4" +
	"\x57\x56\xe1\x60\x61\x2b\xaa\x70\xaa\x02\x97\xb5\xbb\x07\x4f\x23\x70\x60\x62\xfb\x4f\xa1\xbc\xe6\x16\xe3\xd5\x90" +
	"\xeb\x50\x7d\x2d\xa2\x73\x17\x1c\x3f\xb0\x13\x57\xca\x39\x8d\xb7\xee\xe2\xf3\x4d\xae\x3c\x67\x5e\x5d\x32\xf2\xc9" +
	"\x02\xad\x7d\x06\x7d\xad\x4a\x9e\x40\x8a\xcf\xf1\xf5\xc9\xc8\x6e\x19\x3a\x83\x6b\xc2\xf4\xb7\xdb\xce\x4a\x9a\x76" +
	"\xeb\x79\x73\xaa\x4f\x85\xe0\xb8\xac\x0b\xc4\x4f\xaf\x87\xce\xc3\x90\x22\x0b\x86\x65\xf9\xe0\xbf\xbb\xfc\xe2\x9a" +
	"\xe7\x70\x03\x33\x8e\xfb\x7f\xad\x59\xbb\x91\x5b\x9f\xe6\x8e\x2c\x44\xe3\x4a\x31\x80\x5c\xcf\xa3\x6b\xb5\xf9\x3d" +
	"\xe2\xf8\x41\x92\xe9\xb4\x4a\x3f\x4d\x82\xa2\x69\x50\x0c\xac\xd4\xb7\x73\x21\xeb\x37\x23\x9f\x56\x5f\x6f\xfc\x5a" +
	"\x6d\x9c\x6f\x36\x47\xa4\x4b\x17\xcc\x8b\x5c\x07\xfa\x39\xb3\xe9\x8a\x26\xc6\x4f\x13\xe0\x08\x9b\xb9\x93\xd6\x0c" +
	"\x77\x7b\x36\xf9\x2e\xa3\xa9\xdc\x98\x90\xf3\xb2\xd8\x6e\x12\xf9\x80\x02\x55\x07\xc5\x3f\xf2\xe5\x03\x62\x58\xa9" +
	"\xbf\x4d\xd2\xdd\xf0\x92\x12\x73\x04\x69\x8e\x1a\x86\xf9\x6d\xf0\xdb\xe3\xc7\xf0\x9d\xc1\xd3\xdc\xb4\x87\x85\x72" +
	"\xd7\x32\x4e\x4b\x83\x61\xef\x48\x97\x0d\x5b\x21\x20\x02\x75\x22\xab\xcf\x0d\x9c\x4a\xb8\x3e\x50\x29\x2d\x4b\x5a" +
	"\xdd\xed\x76\x1d\xbd\xf4\x3a\xd5\x34\xa6\x33\x89\xf5\x7a\x13\xad\x2b\x36\xe7\xf0\x90\x84\x41\x47\x10\x9b\x10\x0c" +
	"\x0d\x09\x71\x45\x6b\xce\x46\x44\x03\x9a\x01\xf5\x9f\x0c\x72\x44\x3f\x64\xf7\x4f\x72\x7e\x23\x4b\x49\x86\x9a\xdf" +
	"\x0c\x98\x73\x64\x77\x8f\x59\xda\x10\xe5\xdb\x59\xd7\xee\x26\xd4\x75\x06\xd6\x61\x3d\xf0\x27\x8f\x1c\xe5\x4d\x6e" +
	"\xcd\x5d\x5b\x96\xa8\x79\x01\x0f\x60\xa6\x2b\x00\x43\xb9\x2a\x42\xed\xc5\x5b\x9d\x6e\x54\x12\x6b\x54\x13\x05\xd5" +
	"\xf6\xdf\x00\x00\x00\xff\xff\x18\x09\xbf\x3c\x1f\x18\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6175,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549129042, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x89\x9e\x82\xc8\xea\xa2\x28" +
	"\xb0\x58\x48\x01\xda\x3c\xd0\x5e\x8a\x22\xce\x02\xbd\xd2\xe2\x58\x62\x97\x0f\x55\x1c\x39\x6b\x08\xfa\xef\x0b\x92" +
	"\x92\x2d\x67\xa5\x24\x5e\x5d\x28\xce\x70\xbe\x79\x71\x66\xd8\x75\x09\xa4\x57\xa5\xa5\x43\x8d\x9f\xa0\x94\x54\xb5" +
	"\xdb\x75\x61\x75\xfa\x1f\x37\xce\x36\x65\x5a\x5a\x92\x1a\xc7\xa5\xc1\xda\x36\xb4\xfe\xa3\x2d\xbe\x20\x3d\x86\xcd" +
	"\x55\x0a\x49\xdf\xaf\x56\x5d\x27\x70\x27\x0d\x02\x8b\x5c\xd6\xf7\x2b\x00\x80\x37\x35\x90\xd5\x69\x69\x13\xbf\x0c" +
	"\xf0\x8f\xe8\x5a\x45\x11\x66\x80\x8f\x48\x3f\x6f\x03\x0d\x3e\xe5\xb0\x3e\x11\x15\xf2\x9d\x0b\xb4\x7b\x5d\xd3\xe1" +
	"\xb6\x92\x4a\x34\x68\x4e\x07\x5c\x65\x9f\xef\xbf\xf2\x22\x0a\xfe\xc9\xdd\xa3\x6d\x8d\x40\x31\x39\x19\x8e\x66\x42" +
	"\xee\xa1\x50\xdc\xb9\x9c\x45\x4d\xec\x26\x30\x22\x8e\xdc\x0d\x1a\x06\xe4\xf1\xcb\x88\x6f\x15\x8e\x82\x61\x93\x08" +
	"\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x90\x8b\x39\x7a\xf3\x3d\x31\xea\x4f\xaf\x50\x6f\x51\x08\x14\x40\x92\x14" +
	"\x02\x59\xf8\x82\x58\x0f\x3b\x6e\x44\xd4\xe8\x80\x6c\x89\x54\x61\x03\xd2\x40\xdd\x48\x43\x28\xe0\x9f\xbb\x07\x77" +
	"\x95\xbe\x30\x7d\x62\x0d\x14\x56\xb9\x9a\x9b\x9c\xfd\xc6\x8e\xbe\x78\x60\x76\xd3\x75\xeb\x27\xff\xd7\xf7\x59\x4a" +
	"\xd5\x8c\xcd\xe9\x9c\xd1\x8b\x9e\x04\x65\x51\x81\xe0\x14\xf0\xe5\x87\x8f\x06\xd8\x9d\xdf\x2d\x29\x79\x55\x72\x43" +
	"\xbc\xa1\x1f\x13\xbd\x37\xe2\xbd\x82\xbe\x04\x26\xd6\xb6\x0d\x27\x69\xcd\xbb\xa5\xab\xe4\x59\x8a\x09\xc0\xdf\x96" +
	"\xd0\x2d\x4a\x2f\x04\x35\x5d\xbc\x37\x5b\x2b\x0e\xdf\xd3\xbb\xae\xe1\xa6\x44\x58\x3f\x34\x5c\xa3\x1b\x96\xc5\x6b" +
	"\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\xfc\xe0\x9d\xd9\xd9\x46\x73\xf2\xb9\x83\x75\xc8\x43\xf0\x68\xc6\xc4" +
	"\x45\xa0\x31\xae\x11\xe9\x49\xea\x1f\x42\xb2\xf5\x00\xb4\x78\x1c\x8e\x65\xfc\x97\xdb\x90\xad\x6b\x14\x0b\x81\x98" +
	"\x95\x90\xa6\x54\x78\xc7\x5f\x96\xff\xb2\xdc\xd4\x9f\x7b\xf3\x3e\x5d\xa8\x1c\x5e\xa8\xc0\x87\xfe\x42\x25\x6f\x9e" +
	"\x7b\xeb\xcc\xbb\xf3\x32\xe6\x56\x4b\x33\x16\x0c\xac\xc7\xbf\x0b\xf2\x6b\x42\xb1\xf8\x56\x14\xca\xe6\x35\xc9\xf9" +
	"\xca\x59\xf2\x28\x4b\x17\x2a\x27\xa3\x9d\xb5\x74\xbc\x5f\xed\x96\x2c\x71\x35\xdb\xca\x5f\x6b\x74\x63\x57\xfd\xf5" +
	"\x54\xf8\x4f\x01\xe8\xc2\xa6\xb3\x1c\xc0\x65\x8c\x9b\x0b\x5b\x8b\x77\xf8\x9c\x91\xa5\x61\xa4\x4c\xc7\xe0\xcc\x0d" +
	"\x9d\x0e\xce\x99\x99\x21\xe4\xfe\x1c\xf5\xd8\x94\xc2\x04\x8e\x83\x7e\xae\x27\x75\x1d\xa1\xae\x95\x6f\x2d\xe3\xab" +
	"\xe2\x38\xf8\x27\x06\x9d\xe5\x75\xba\x1f\x54\x8f\xa4\x55\xf6\x93\xb0\x85\x7f\x88\x40\x45\x5a\xdd\xac\x32\xbf\x80" +
	"\xe2\xa6\xcc\x19\x1a\xe6\x09\xc7\xe6\x9a\x69\x24\x0e\x45\xc5\x1b\x87\x94\xb3\xcf\x4f\x0f\xc9\x47\x36\x65\x19\xae" +
	"\x31\x67\x7b\x89\xcf\xfe\xd1\xc2\x26\x46\x15\xd6\x10\x1a\xca\xd9\xb3\x14\x54\xe5\x02\xf7\xb2\xc0\x24\x6c\xae\xa1" +
	"\x75\xd8\x24\xae\xe0\xca\xc7\x35\x37\xf6\x1a\xa4\x91\x24\xb9\x0a\x44\xcc\x3f\xac\x7f\xb9\x06\xcd\xbf\x4a\xdd\xea" +
	"\x33\x92\x34\xe7\xa4\x33\x63\x2a\xa2\x3a\xc1\xff\x5b\xb9\xcf\xd9\xbf\xc9\xe7\xdf\x93\x5b\xab\x6b\x4e\x72\xab\x90" +
	"\x9d\xec\x91\x98\xa3\x28\xc7\x16\x99\x85\x54\xf9\x3b\x12\xd6\xd5\xea\x65\xc8\x0b\xab\xb5\x35\xb7\x9b\xcd\xe9\x2d" +
	"\x37\x61\xb6\x8e\xac\x1e\x98\x59\x1a\x03\x97\xc5\x52\x9a\x9e\xdb\xb4\x5a\xf3\xe6\xc0\x60\x78\xd6\xf5\xfd\x6a\x36" +
	"\xad\x47\x6e\x96\x46\x90\x2c\x0d\x49\xfa\x16\x00\x00\xff\xff\xc8\x46\x1b\x05\xa2\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2722,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548973265, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
