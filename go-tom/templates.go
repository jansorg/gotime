// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x38\x16\x7e\xef\xaf\x38\xf0\xec\x00\x4d\x61\xc9\xb9" +
	"\xb4\x45\x47\x4d\x83\xed\xa4\xed\x4e\x81\x06\xbb\x88\x67\xb0\xc0\xbe\x51\xe6\xb1\xc5\x86\x22\x05\xf2\x38\x8e\x6b" +
	"\xf8\xbf\x2f\xa8\x8b\x2d\x51\x92\xad\x64\x82\x79\x9a\x14\xa8\x2d\xf1\xdc\xbe\x73\x25\xe9\xcd\x86\xe3\x5c\x28\x84" +
	"\x51\xaa\x15\xae\xbf\x09\x4b\xa3\xed\xf6\x05\x00\xc0\x66\x63\x98\x5a\x20\x84\xe5\x73\xf1\x6e\xae\x4d\xca\xe8\xc6" +
	"\x11\xbb\x95\xcb\xd8\x5c\x95\xd4\xa8\xf8\x76\xfb\xa2\xfa\x7c\xb1\x97\xcc\x97\x86\x91\xd0\x6a\x2f\xf8\x1f\x36\xd1" +
	"\xab\xcf\x0f\x6c\x46\x10\x7d\x00\x83\x99\x36\xf4\xef\xcc\xd1\xd8\x70\x5a\x2d\x7d\x2a\xd9\x2c\x38\x71\x05\xe3\x4a" +
	"\x50\xe2\x19\x14\xc0\xe4\xd5\x42\xd3\x3a\xc3\x08\x16\x82\x92\x65\x1c\xce\x74\x3a\xf9\xce\x94\xd5\x66\x31\x21\x9d" +
	"\x4e\x16\x3a\x70\x1f\x9c\x11\xfe\x2e\x52\x0c\x2b\xc9\xd3\x65\xfa\x6a\x02\x41\x43\x9c\x98\x43\xf8\xd5\xde\xea\xa5" +
	"\xe2\xc8\xff\x87\x46\xd7\x56\xdd\xdf\xa5\xcd\x98\x82\x99\x64\xd6\x7e\xd8\x21\x0b\x7e\xa0\xd1\xa3\xab\xcd\x26\x15" +
	"\xaa\x12\x0e\xe1\xbf\x90\xb6\xdb\xcb\x89\x63\xb8\xaa\x69\x40\x69\xb1\x4b\xe8\x50\xf6\xdc\xbd\x03\x5d\xfe\x5f\x41" +
	"\x49\xee\xcc\xbf\x7d\x5f\x33\x5a\xcc\xa1\xe6\x85\xc0\xd3\x92\x6b\x8a\xcd\xd5\xf3\x68\xdb\x87\xeb\x19\xa2\xff\x27" +
	"\x00\x6c\x36\x20\xce\xde\x29\x18\x95\xee\x85\x5d\x55\xc2\x76\xdb\x05\x28\x97\x3d\x18\xd5\x90\xa4\x24\xc3\x66\x77" +
	"\xc8\xbf\xaa\xb9\xde\xa7\xe3\xf3\x64\x95\xfb\xef\xb3\x22\xb3\x9e\xa2\x11\x68\x5b\x99\x35\x79\xe5\x01\xbc\x11\x6a" +
	"\xbb\x7d\x35\x39\x42\xc4\x1e\x5a\x44\x0d\x82\x8f\xf7\x8b\xe3\xb0\xa7\xcb\x34\x65\x66\xbd\x87\x7c\x04\xdf\x42\x93" +
	"\x48\xb1\xfa\x28\x0a\x34\xbc\x45\xbb\x94\xf4\xeb\x72\x76\x87\x54\xa2\xcb\xa5\x5d\x12\x8b\x25\x56\x41\xb6\xa5\xaa" +
	"\x7d\xb8\x2e\x29\xd6\x7c\x7d\xd5\x28\xb2\xf0\xab\xfd\x8f\xd1\xdf\x71\x56\xca\xf3\xd3\x91\xcc\x55\x3b\x9f\x88\x5f" +
	"\x6d\x36\x45\x06\x95\xcc\x23\x97\x1c\xc4\x3b\x69\x2b\x83\x48\x90\x44\x97\x5d\xe1\xef\xee\x5b\x17\xc7\xe5\xa4\xae" +
	"\xaf\x9d\x5a\x62\x0e\x4a\x93\xd7\xa8\x6e\x0b\xaf\x7c\x62\x84\x5f\x84\x24\x34\xb7\x6e\x54\x85\x9f\xd3\x8c\xd6\xf0" +
	"\x58\x3c\x2e\x79\x20\x9f\x75\xd1\x30\x4c\x29\x06\x39\xb9\x03\x36\xc8\xae\x1b\xa1\x44\xca\xe4\x94\x8c\x50\x8b\x41" +
	"\x4e\x90\x16\xa1\x44\x9e\x4b\xab\xe1\xfb\x4b\xe1\xd5\x94\x3f\x1e\x44\x23\x92\x2d\x3b\x1b\x36\x16\xad\x01\x9c\xf2" +
	"\x6e\x2b\x3d\x0b\x5b\x1d\xab\xfa\x56\x35\xce\x3a\xbf\x6f\x98\x98\x0f\x9a\x7b\x8f\xf2\x72\xd1\x8a\xe9\x28\x8e\xc7" +
	"\x62\xd9\xb5\xe1\x27\xd4\x0d\x53\xbc\x03\x68\xe5\xeb\xf0\x37\x66\x3f\x31\x21\xd7\xe5\x8b\xc7\x22\xce\x79\x9f\x8a" +
	"\xb8\x45\x51\x18\x4d\x98\x66\x92\x91\x37\x2c\xf2\x79\x74\xc0\xd4\xd2\x1d\xcf\xe5\xa0\x3f\x54\xcb\x45\xbb\x57\x4f" +
	"\x73\xd2\x52\xfd\xb5\x6e\xea\x33\xf7\x29\x8e\xba\x9c\xd4\x46\xc8\xe5\x24\x9f\x37\x57\x5d\x73\x6e\xa6\xd3\x54\xab" +
	"\xeb\xe9\xb4\x9a\x74\x97\x96\xd6\x8e\xb6\x92\x14\x19\xad\x09\x36\x0d\xdd\x41\x30\xd7\x8a\x02\x2b\x7e\x60\x04\x67" +
	"\xe7\x19\xbd\xef\x5a\x9e\xb3\x54\xc8\x75\x04\x23\xbb\xb6\x84\x69\xb0\x14\xa3\x31\x04\x2c\xcb\x24\x06\xc5\xab\x31" +
	"\xfc\x2a\x85\xba\xbb\x61\xb3\x69\xfe\xfc\x45\x2b\x1a\xc3\x68\x8a\x0b\x8d\xf0\xc7\xd7\xd1\x18\x6e\x75\xac\x49\x8f" +
	"\xe1\x37\x94\xf7\x48\x62\xc6\xc6\xf0\xd1\x08\x26\xc7\x60\x99\xb2\x81\x45\x23\xe6\x63\x18\x7d\x74\x42\xe1\x5a\x4b" +
	"\x6d\xe0\x73\xaa\xbf\x3b\x4d\x3b\x31\x1d\x6f\xa6\xeb\x34\xd6\x72\xe4\x9b\x9d\x77\xd1\xa6\xed\xdf\x96\x33\xc1\x19" +
	"\x5c\x6b\x65\xb5\xc4\xd1\x18\x6e\xb4\x62\x33\x3d\x86\x54\x2b\x6d\x33\x36\xc3\x7e\x21\x2b\x14\x8b\x84\x22\x50\xee" +
	"\xf4\x25\xdf\xbf\xf0\x08\x67\xce\xdc\x08\x62\xc9\x66\x77\xbe\x90\x78\x51\x2d\xaf\x12\x41\x1d\x3a\x48\x62\x45\xf1" +
	"\xd3\xc5\xd9\xdb\x37\xf1\x6b\x9f\xc6\xe8\x55\xa0\x39\xdf\x51\x61\xfe\xe7\x53\xe5\xab\xc1\x52\x2d\x2d\xf2\x08\x7e" +
	"\x62\xe8\xfe\xb5\xac\xd1\x86\xa3\x29\x69\x65\x01\xea\x9e\x99\x97\x4d\xf6\x93\x16\xc2\x3c\xed\x82\x95\xe0\x94\x44" +
	"\x70\x76\x7a\xfa\x73\x0b\x47\x4e\xc0\x19\xb1\xe3\x54\x94\x54\x50\x6a\xaa\x4f\x7a\x69\xe3\x45\x83\xba\x72\x68\x3f" +
	"\x43\x15\xad\x58\x4b\xde\x4b\xe4\xe2\x5a\xa4\xfd\x69\xf8\xce\x60\xda\x82\x5c\x6e\xe6\x1a\x2e\xab\x6c\x68\x44\xa4" +
	"\x66\xc8\x76\x2f\x24\xa1\x54\x7a\xc5\x56\x2b\xb5\x42\xcc\xee\x85\x87\xe5\xa8\x77\x62\x36\xbb\x5b\x18\x77\x92\x08" +
	"\x86\xf8\xa6\x51\x08\x35\xd5\xc5\x2b\x3f\xda\x84\x0f\x14\x18\x54\x1c\xdd\x4e\x23\x02\x9d\x91\x48\xc5\x0f\xfc\x86" +
	"\x0b\x11\x0b\x29\x68\xdd\x09\xb8\xd8\x09\x37\x11\x97\xa9\x50\xa8\xac\xe5\x90\x0f\x67\xe7\x62\xc9\x32\x8b\x11\x54" +
	"\xdf\x1a\x8a\xf6\x9a\x92\x31\x10\xf7\x54\x49\xa1\x30\x48\xca\xc8\x9f\x85\xe7\x6f\xf2\x98\xd6\x29\x32\xc6\x79\x0e" +
	"\xe8\xb4\x58\x85\xb3\x16\x49\xbd\x19\x76\x2f\xfa\x9d\xa0\xcb\x11\x49\x98\x57\xb5\x33\xb2\xf8\xe6\x99\xda\x32\xe4" +
	"\xb4\x47\x8e\xef\x4d\xd7\x40\x82\xbc\x55\x39\x03\x56\x86\x65\xef\xdb\x91\x63\x52\x2c\x54\x04\x12\xe7\x5e\x33\xbf" +
	"\x47\xe3\xfa\xae\xac\x28\x62\x4d\xa4\xd3\x6e\xd5\xbe\x77\x7d\x5e\xd2\x59\x8f\xcd\xc8\x78\xdb\xf2\xbe\x7c\xf5\x6b" +
	"\xfc\x50\x1d\x34\x7b\x47\x57\x86\xd7\x4b\xab\x55\xe7\x5d\x0c\x55\x30\x3d\x96\xe2\x75\x77\x59\x87\xfb\x46\x77\x3c" +
	"\xd7\xf7\xed\xf0\xa0\x30\xcd\x39\x90\x89\x94\xc3\x96\x08\xc9\x5f\x9e\xab\xe0\xec\x04\x88\x8f\x1b\x14\x6e\x1b\xd0" +
	"\x49\x37\xd4\xdb\x03\xba\x56\xa9\x2f\x65\x64\xc4\x03\x10\x8f\x94\xa6\x97\x91\x64\x96\x0a\x95\x27\x63\x9f\x24\x69" +
	"\x91\x74\x67\x7b\x60\xca\xd2\x6c\xd4\x55\x5d\x75\x21\x31\xe8\xaa\x98\xde\x91\x92\x67\xbc\xbe\x47\x33\x97\x7a\x15" +
	"\x01\x4a\x29\x32\x2b\x6c\x93\xa8\x5a\x0f\x1e\x22\x48\x04\xe7\xa8\x0e\x17\x46\x2a\x38\x97\xd8\xe3\x9f\xc4\x05\xb4" +
	"\x65\x5f\xb3\x32\x9b\xad\xa1\x06\xe0\x97\x5f\x7e\xee\x16\x9b\x6b\x0e\x5c\xcd\x7a\x92\xfb\x4b\xba\xcd\x9e\x7b\xf8" +
	"\x00\x7f\xbe\xde\x03\xab\xc3\xe9\xcd\xea\xdb\xef\x53\x0e\x55\x52\x7b\xe4\xd6\x5b\x6a\x78\xd1\x1b\xfc\x38\xbf\x0a" +
	"\xb1\x70\xd5\x6d\x4b\x43\xca\xdb\x5e\x29\xe5\xcc\xee\xce\x1e\xb6\x24\xdd\x35\x77\x22\xb8\xc8\x1e\xc0\x6a\x29\x78" +
	"\x09\xb6\x6b\xf4\x7b\xa8\x53\x66\x16\x42\x45\x70\x0a\xa7\x70\xd1\xdf\xc3\x77\x16\xb5\x3a\xea\x6e\x08\x84\x6f\x0e" +
	"\xc0\x89\x49\x13\xf3\xf7\x11\x85\xee\x80\x74\x76\xa8\x9c\x5c\xb5\xef\x04\xb8\x91\xe9\xbd\xf1\x0d\x2a\xc1\x16\x52" +
	"\x3d\x87\xb4\xb7\x8d\x3d\xed\x63\xa6\xe5\x4e\xc5\xb8\xf9\xd8\xad\xce\xe5\xf4\x9f\xd0\x97\xff\x6a\xe2\x7a\x92\x48" +
	"\x3b\x53\xa6\xb9\xe9\xf1\x4f\x05\x03\x66\x82\x77\x04\x38\xe9\x1f\xb8\x5e\x75\xc1\xb1\x81\xdd\x82\x11\xb8\xd9\x89" +
	"\xa6\x44\x53\x3e\x0d\x2f\xe7\xa3\x0a\x5b\x10\x9b\xc5\xda\x6c\x07\x29\xf6\x05\x6e\x40\x5b\x68\x89\x7a\xa2\x9c\x47" +
	"\x58\x5c\xf4\x8f\xce\x42\x29\x8a\xf4\xfc\x50\x91\x12\x33\x14\x70\xe6\x32\xa9\xf8\xee\xac\xce\x1f\x74\x16\x74\xe4" +
	"\x56\x2a\x54\x75\xcc\x79\xdb\xda\x27\x0e\x8e\xba\xd2\x84\x76\x0c\x21\x47\x3b\x33\x22\xbf\x01\xf1\x8f\xe7\xa9\x0d" +
	"\x92\x75\x96\xa0\xb2\x5d\xfd\x2b\x58\x61\x7c\x27\xe8\x10\x49\xcf\x52\xdd\x8c\xc6\x6f\x2b\x9e\x01\x3a\x63\x33\x41" +
	"\x6b\xb7\x55\x7d\x53\xe7\x86\xfc\x32\xa2\xbc\x60\x28\x9e\xf2\x07\x48\x91\x0b\xf6\x61\x94\x19\xa1\xa8\x76\x7f\xf2" +
	"\xcf\x8c\x2d\x5a\x4e\x2c\xa3\x73\x7e\x9a\x76\xb7\xb0\x7c\xc3\x33\xf8\xbe\xa2\x7e\xf6\x3a\x3b\x30\x3e\xde\xf5\x31" +
	"\x9d\x8f\x21\xb9\x18\x43\xf2\xfa\x00\xf3\xeb\x1e\xe6\x03\x87\x9f\xf6\xa6\xc5\xf9\x22\x88\x0d\xb2\xbb\x40\x28\x2b" +
	"\x38\x46\xc0\xee\xb5\xe8\xce\x6c\xf2\x5b\xc0\x71\x6e\x8f\x8a\xcd\xc9\x0d\xb9\xde\x04\x28\xf6\xec\xbd\x4a\x62\x9c" +
	"\x6b\x33\x58\xc9\x41\xa2\x03\xf6\x72\x61\x33\xc9\xd6\x51\xe1\xc9\xb2\xf9\x05\x6e\x17\xdb\x73\xd0\xe8\x48\x8e\x67" +
	"\x32\xba\xae\x65\xde\xbe\x32\x7b\xb4\x96\xe1\xa8\xdd\x80\x6e\x41\x86\x7a\xa9\x75\xdd\xfb\x2d\x2d\xe9\xb4\x76\xef" +
	"\x57\xfe\xa8\xd7\xbc\x58\xbd\xae\xa8\xea\x57\x8b\xde\x05\x61\xc1\x1c\x36\x2e\x1f\x6b\x24\x3b\xdd\xc7\x95\x7c\x11" +
	"\x12\x8f\x2a\x12\xca\x9d\xd9\xaf\xa7\x53\x38\xaa\xb2\xfc\xfc\x7f\x00\x00\x00\xff\xff\x50\x2d\xd1\x7a\x2e\x21\x00" +
	"\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 8494,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1564753931, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x8f\xa3\x36\x18\xbe\xe7\x57\xbc\x45\x73\x98\x59\x15\xd0\xdc" +
	"\x56\x2b\x26\x87\x9d\xe9\xb6\x95\x76\x5b\x69\x92\x6d\xcf\x0e\x38\xc1\x5d\xc0\x29\x36\x3b\x1b\xa1\xfc\xf7\xca\x36" +
	"\x18\x0c\x36\x21\x99\x54\xab\xf6\x94\x80\xed\xf7\xe3\x79\xbf\x1e\x27\x75\xed\x43\xf8\x66\x47\xf9\x61\x8f\xdf\xc1" +
	"\x8e\xf0\xb4\xda\x04\x31\xcd\xc3\xbf\x50\xc1\x68\xb9\x0b\x39\xcd\xc3\x1d\xf5\xc5\x47\x89\xf7\xb4\xe4\xc1\x33\x66" +
	"\x55\xc6\xdf\x57\xf1\x17\xcc\xdf\x84\xe0\x1f\x8f\x8b\x45\x5d\x27\x78\x4b\x0a\x0c\xde\x1a\x6d\x32\xac\x16\xbd\xe3" +
	"\x71\x01\x00\x70\x1d\x1d\x4a\xd2\xcd\x46\xbe\x83\x77\x0f\x10\x74\x2f\x59\x4a\x5f\x7e\xfa\x86\x62\xf9\x5e\x89\xf8" +
	"\x7d\xcf\x09\x2d\x58\xb0\x6a\x97\x9e\xaa\x12\xc9\x57\x30\x38\x97\xef\xf9\x61\x7c\xee\x59\x19\xb2\x6a\x77\x08\x2f" +
	"\xcf\x75\x26\xe5\x79\xa6\xa4\x86\x8d\x58\xd3\x17\xba\xe7\x6c\xa4\x19\x5a\x4d\x11\x17\x50\x42\x9c\x21\xc6\x1e\x3c" +
	"\xf9\xe0\xd3\x24\xf1\x96\x72\x55\xed\x48\x31\x4a\xfa\xcf\x65\xf7\xd0\x6c\xd0\xe7\x53\xff\x85\x24\xd8\x5b\x46\x6c" +
	"\x8f\x0a\xfd\x96\xf0\x0c\x7b\xcb\xba\x0e\xd6\xe2\xdb\xf1\x18\x85\x62\x79\x19\x85\x3c\x35\x45\xd5\x35\xd9\x82\xb4" +
	"\x58\x62\xb2\x42\x19\x66\x8d\x27\x0e\x8d\x39\x2d\xf0\xc1\x17\x16\xe2\x52\xa8\x20\xf7\x6f\x0b\xf0\xe4\x41\x4f\x28" +
	"\xe2\xe9\x12\xea\x1a\x17\xc9\x40\xcc\x40\xd3\xe7\x62\x5d\xa2\xf8\x0b\x1e\x6e\x1b\xfa\x47\x72\x3c\x52\xf6\x84\x48" +
	"\x76\x80\xaa\xf0\xb9\x12\xd1\xea\x1d\xe8\x3b\x69\xc3\x6b\x2d\x38\x57\xfd\x49\xa9\x4d\x2e\x3b\x04\x0a\xdb\x75\x49" +
	"\x58\x8c\x9e\x19\xcb\x59\xf1\x54\x65\xc7\xfa\x51\xb5\xe8\x1b\xbb\x38\xc7\x4d\x25\x3b\x99\x76\xd6\x14\x1d\x85\xfd" +
	"\x1a\x10\xfb\x07\x15\xb2\xa1\xc9\xa1\x7b\xae\xeb\x12\x15\x3b\x0c\x4d\x5b\x09\x1e\x53\x92\x25\xaa\xed\x0c\x11\x91" +
	"\xa0\xd1\x12\x6e\x0b\xca\x21\x90\x3d\x61\x45\xab\x32\xc6\x77\xd0\xf5\x11\xab\x93\xe5\x18\x11\xb5\x90\x18\x85\xc7" +
	"\x93\xe5\xc2\xba\xf1\xac\x70\x25\x46\xb8\x04\x96\x1c\xe7\xfb\x0c\x71\x0c\xea\xd5\x47\xc2\xb8\x07\x81\x94\x12\x3c" +
	"\xd3\xaa\x48\x44\x62\x2b\xf5\x76\xed\xf6\xe0\x59\x2c\x9b\x2a\xd5\x81\x75\x22\xde\xa6\x71\x4d\x8d\xfc\x5a\x6c\xa9" +
	"\x07\xc1\xcf\x98\xcb\xd2\xe9\x89\xbc\x8a\x89\x57\x37\xf0\x0c\xf3\xce\x57\xa9\x53\x1f\x82\xb6\xe4\x67\x64\xca\x54" +
	"\xe9\x3b\x60\x99\xca\x29\xb8\x20\xaf\x1a\xf5\x6e\x4c\xe0\x44\xd8\x1c\xd0\xe4\xa4\x68\x81\xe8\x20\x11\xb1\x38\xa9" +
	"\xd0\xd9\x83\xc2\x61\x7d\x0e\x77\x5a\x5a\x8c\xd9\x44\x22\xbe\xa5\x94\x1b\x63\xb8\xb5\xbb\xa4\x2f\x3e\xab\x36\x9c" +
	"\x72\x94\x79\xa3\xd9\xac\x1b\xdd\x5a\xae\xbb\x9b\xf9\x64\x9c\x86\x2d\x1a\x86\x8d\xda\x1a\xa8\xb6\xe3\x8d\xfb\x80" +
	"\x30\x6b\xfe\x54\x86\xd9\xa3\xcb\x51\x49\xad\x21\xf6\x8a\xbf\x78\x56\x5f\xdd\xae\x33\xad\x1a\xe8\x83\x81\xd2\x7e" +
	"\x22\xb7\x9a\xfa\xf9\xfc\xaf\x0e\xf6\x6b\x64\x4c\x57\x70\xf6\x7c\xb9\x02\x06\x7d\x15\xe7\x0d\xfd\xae\x1e\xa3\x50" +
	"\x12\xe7\xe5\x42\x37\xe1\xee\xaa\xf2\x09\xf1\x92\x7c\xfb\x1f\xdf\x55\x6c\x37\x88\x04\x71\x04\xfa\x32\xd1\x7c\xcb" +
	"\x25\x12\x17\xde\x2c\xd4\x61\xbf\xb9\x4a\x5c\x7c\xbd\x78\x21\x3c\xd5\x69\xf0\x81\x94\x8c\xff\x46\x0b\xe9\x8e\x24" +
	"\x65\xd6\x6c\xbf\x56\xac\x4c\xa9\x8a\x12\x4e\x71\x41\x47\x82\xf7\x72\xbb\x47\xeb\x66\x12\xe2\x4b\xee\x01\xf6\xb9" +
	"\xf1\x9f\xe2\xc0\xf6\x34\x02\xf9\xf1\xe0\x75\x40\x8e\x41\x75\x8c\xf9\xf9\xd1\x03\x1b\xc7\x70\xee\x54\xd2\xc7\xdc" +
	"\xec\x4f\xc2\x53\x59\xb4\x06\x49\x73\x2b\xbc\x94\x26\x6a\xa0\x62\x9a\x69\x4e\x01\x5d\x5f\xd5\x34\xc3\x86\xdd\x04" +
	"\x07\x73\x52\xaa\x49\xf6\xe8\x83\x31\x8b\xac\x95\x64\xd8\xbf\x29\xcd\xd6\x50\xd7\xa0\x72\xb8\xa1\x1e\xdd\x35\x0f" +
	"\x8e\x2a\xda\xa7\xb9\x9e\xec\x25\x17\xd1\x4b\x7b\x59\x7e\x4f\x2e\x68\xef\xa6\x73\x08\x62\x53\xbd\xe4\xc7\x9b\x58" +
	"\xe4\xbc\x18\x0f\xee\x36\x7a\xaa\x2e\xea\xfa\xa6\x0d\x84\x10\xc4\xaa\x5c\x1e\xf8\x03\x65\x15\x66\xad\x5c\xb8\x21" +
	"\x73\xa7\xbd\xc3\x61\x7d\x46\x86\xb0\xae\x6f\x0d\x2e\x90\xf4\x82\x7d\x37\x1d\xe8\xf3\x32\xf1\x95\x59\x68\x18\x36" +
	"\x23\x0b\x27\xee\x1c\x17\xff\x08\x04\x8e\xf2\x77\xa1\x3c\x87\x6a\x5a\x27\xeb\x3c\x54\x5f\x8b\xe8\x14\xed\xb3\x03" +
	"\x6b\x85\x6a\x7a\xfe\xcd\xa3\x83\xdf\x85\x08\x9e\x49\xe8\x12\xf2\xb5\x05\x5a\xc9\xf4\xfa\x73\x9c\x6c\x01\x15\x89" +
	"\x85\x54\x2a\xa6\x2b\x7f\x9a\x67\x70\x4b\x98\x7a\xd6\xe5\x2c\xc7\x79\x67\xcf\xdd\xdd\x68\xec\x77\x63\xcf\x20\xcd" +
	"\x5a\x82\xd9\x22\x33\x86\x45\xfa\xe0\xbf\xbb\xf8\xe2\x3d\x4f\xe1\x7e\x78\x29\xeb\x0b\xee\xff\x71\xd0\x9e\x1b\x89" +
	"\xb5\xf1\x91\xc0\xc5\x3a\x34\x20\xb7\xd3\xe8\xde\x35\x7c\xe6\x09\x71\xfc\x2c\x9a\xa9\x92\x38\x44\x41\x27\x54\x2f" +
	"\x08\xb2\x4d\x83\xec\xc0\x92\xa0\x68\x11\x22\x7f\x13\xf2\x75\x36\xf5\x1b\xfb\x66\x8f\x37\x9b\x6a\xa4\xa7\x68\xf7" +
	"\x55\x18\x53\x3f\x66\x6d\xb8\x02\xe7\x8f\x6f\xae\x06\x38\xc2\x66\x6a\xd2\x36\xdb\x75\xcd\x46\x3f\x24\x34\x16\x85" +
	"\x09\x29\xcf\xb3\xe5\x22\x12\x1f\x90\xa1\x62\x27\xfb\x8f\xf8\xf2\x1e\x31\x0c\x92\xf9\x44\x1d\xfb\x8d\x72\xcc\x11" +
	"\xc4\x29\x2a\x19\xe6\x0f\xde\xe7\xf5\x07\xff\x6d\x83\x67\x73\xff\x30\x13\xe5\xb1\x62\x9c\xe6\x0d\x86\xbd\x91\x2e" +
	"\x5e\x2c\xeb\x1a\x02\x90\x13\x59\x3e\x2e\x60\x48\xe1\xfa\x40\xc5\x34\xcf\x69\xf1\xb8\x5a\x75\xed\xa5\xb7\x28\xd5" +
	"\x34\x8b\x51\xa8\xec\x8d\x14\xaf\x58\x5c\xe5\xff\xa6\xc9\xff\x9a\xda\xab\x97\xfc\xd9\xa0\xe7\x72\x5b\xac\x51\x7a" +
	"\x2f\x52\x49\xb8\x9a\xde\x1b\x9d\x73\x74\xee\x09\xb3\xb8\x24\x52\xb6\x3e\xbd\x6f\xb3\x32\xe9\x16\x45\x6e\x32\xb4" +
	"\xc5\xbf\xac\x3f\x7d\x04\x29\x79\x6f\x08\x36\x7f\xc5\xa8\xf2\x1c\x95\x07\xb0\x20\xd7\x2c\x79\xd0\xf4\x5e\xe9\xaa" +
	"\x92\x62\x4d\x53\xbd\x2b\x0a\x15\xbc\x91\xc4\x6c\xf9\x4f\x00\x00\x00\xff\xff\x24\xa1\xe8\x3c\x06\x1d\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 7430,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1564754468, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\xa6\xc2\x1e\xda\x00\x92\x10\x14" +
	"\x05\x16\x0b\xd9\x87\xcd\x4f\xd1\x4b\x5b\xac\xd3\x07\xa0\xc5\x89\xc4\xae\x48\x0a\xe4\x38\xa9\x21\xf8\xdd\x0b\x92" +
	"\x92\x2c\x3b\x92\x62\x67\x7d\x30\x45\xce\xcc\x37\xff\xe4\xb4\x6d\x02\xd9\x4d\xa9\x69\xdf\xe0\x17\x28\x05\x55\xbb" +
	"\x6d\x5a\x68\x99\xfd\xcb\x94\xd5\xa6\xcc\x4a\x4d\x42\x62\xbf\x18\x6c\xb4\xa1\xf4\xeb\xae\xf8\x8e\xf4\xcd\x6f\x6e" +
	"\x32\x48\x0e\x87\x28\x6a\x5b\x8e\xcf\x42\x21\xc4\x81\x1a\x1f\x0e\x11\x00\xc0\xbb\x1a\x48\xcb\xac\xd4\x89\x5b\x3a" +
	"\xf8\x6f\x68\x77\x35\x05\x98\x0e\x3e\x20\x7d\xda\xfa\x33\xf8\xb2\x82\xf4\x78\x68\x2b\xfd\xfa\x20\x1b\xda\xbb\xf3" +
	"\x00\xf1\x57\x43\x42\x2b\x9b\x06\x13\xd3\x4d\xcf\xe1\x0c\x75\x52\x39\x17\x2f\x50\xd4\xcc\xda\x55\x1c\x30\xe3\xb5" +
	"\x27\x04\x48\xf1\x0c\x9d\xaa\xb4\x17\x83\xd1\xcf\x33\x68\x03\x3f\x2b\x4d\xa7\x8c\x1b\xbd\x33\x05\xfe\x02\x47\x9b" +
	"\xce\x44\xbd\x72\x62\xdb\x1a\x7b\xf5\x7e\x93\x70\x46\x0c\xc2\xa7\xe6\x7c\x64\xcc\xa9\x60\x85\x8c\xcf\xd1\xcc\x34" +
	"\x21\x18\x9c\xdd\xa0\xdc\x22\xe7\xc8\x81\x04\xd5\x08\xa4\xe1\x3b\x62\xd3\xed\x98\xe2\x41\xbb\x05\xd2\x25\x52\x85" +
	"\x06\x84\x82\xc6\x08\x45\xc8\xe1\xef\xfb\x47\x7b\x93\x4d\xb8\x32\xb2\x0c\x0a\x5d\xdb\x86\xa9\x55\xfc\x5b\x3c\xf8" +
	"\xe6\xc0\xe3\xf5\x90\xb8\xf4\xc9\x1d\x1c\x0e\x79\x46\xd5\x8c\x1b\xd9\x9c\x1f\x8b\x0e\x7a\xfd\x41\x27\x67\x84\x89" +
	"\x8b\x13\x1a\xa7\x59\xdc\x7e\x56\x10\xdf\x33\xc2\x78\x49\xef\x25\x20\x1b\x62\x86\x7e\x18\xe5\x41\xf1\x6b\x30\x5c" +
	"\xdb\xbd\x75\x67\x67\x98\x2b\xf0\xab\x80\xaa\xe4\x55\x70\x3c\x82\xfc\xa9\x09\xed\x22\xc2\x42\x32\xb2\xc5\x52\xdc" +
	"\x6a\xbe\x9f\xa6\xb5\xad\x61\xaa\xc4\xa1\x6b\x1e\x0d\x93\x68\xbb\x65\xb1\xc0\x16\xb2\x1f\x18\x78\xef\xa9\x75\x79" +
	"\x4a\x38\xdb\x3b\x5f\x9f\xb5\x91\x8c\x5c\xfe\x21\xf5\x09\xf4\x0e\xcf\x58\x3e\x0b\xe6\xb2\x70\x44\x7b\x12\xf2\xc3" +
	"\x68\xba\xe9\xc0\x16\x45\xa0\xbf\x65\xd2\x3f\xec\x86\x74\xd3\x20\x5f\x08\xce\xa4\x94\x50\x65\x8d\xf7\x6c\xea\x02" +
	"\x9a\x97\x1d\xfb\xf7\xa0\x2e\xd7\x89\xb5\xc5\x0f\x28\x72\x69\xf9\x80\xb2\x8b\x78\x2f\xe1\xbb\x2a\x77\x7d\x0d\x48" +
	"\xa1\xfa\xfe\x83\xb4\xff\xba\xb2\x0e\x94\xef\xbd\x75\xdb\xa6\xbe\x0b\xdf\x93\x9e\x6f\xc4\x25\x2f\xf3\x6c\xa1\x11" +
	"\x73\x7a\xd6\x9a\x86\xba\xdc\x6d\x49\x13\xab\x67\x1f\x1e\xd3\x73\x1a\xfd\x9a\xbc\xc3\x0d\xe7\x0f\xc2\xaf\xc7\x4b" +
	"\xe7\xc9\xcb\x5d\x71\x6d\x15\xba\x1e\xf4\x81\x4b\x81\xff\x1b\x99\x30\x93\x90\xf4\x77\xa4\x87\xff\x58\x41\x17\xe8" +
	"\x5a\x7f\xf0\x0a\x74\x11\x7c\x4b\xcc\x33\xff\x92\xae\xcf\x46\x86\xd3\x3c\x4d\xb6\xcc\x78\x2a\x99\x7f\x3a\xb9\x78" +
	"\x39\xc7\x3e\xbd\x53\xef\x2a\x51\xf3\x30\x3d\x4d\x5d\xa9\x6d\x4b\x28\x9b\xda\xdd\x88\xfd\xa8\x36\x4c\x53\x0b\xe6" +
	"\x0e\xfb\xce\x82\xfe\x28\xba\x66\xc0\xab\x48\xd6\x61\x42\xcb\xba\x11\xad\x9b\xef\xda\xf6\x93\x6e\xc8\xbe\x99\xe0" +
	"\xc0\x69\xc8\x7f\xe2\xba\x70\xf0\xe0\xe4\xd7\x51\xee\x16\xa8\x99\x2a\x57\x71\xdb\xfa\x8f\xaf\xcc\x22\x1c\x0e\xb1" +
	"\x23\x0e\x0f\x53\x2e\x91\x18\x14\x15\x33\x16\x69\x15\xff\xf3\xf4\x98\x7c\xee\x6a\xb6\x6d\x5f\x05\x55\xe0\x95\xa6" +
	"\x77\x3b\x4b\x5a\x76\x01\x8e\x8e\x85\xe1\x0e\x5c\x8f\xfa\x12\xf2\x9b\x68\x1c\x8c\xe8\x3c\x9a\x85\x96\x52\xab\xbb" +
	"\xcd\xe6\x38\xfb\x8e\x88\x5e\x49\x47\xcc\xb3\x60\x65\x1e\x1a\x34\x9a\x33\x07\xfa\x98\x57\xb7\xbd\x21\xd5\xed\x49" +
	"\xec\xdf\xc8\xdd\xa3\x2d\x8c\xf0\xd1\x1b\xa4\x9b\x61\x22\x39\x12\xe3\x1e\xb0\x39\xc1\x73\xa3\xaf\x47\x73\x33\xf3" +
	"\x66\x27\x25\x33\x7b\x98\x70\xa7\x23\xc5\xd0\x4d\xeb\x3e\x87\x03\xca\x44\x85\x0d\x6c\x79\x16\x9c\xce\x7d\x35\xac" +
	"\xff\x0f\x00\x00\xff\xff\xda\x4e\xb0\x5e\x82\x0c\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3202,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1564752048, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
