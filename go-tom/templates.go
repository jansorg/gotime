// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7d\x6f\xd3\xba\x1a\xff\x7f\x9f\xe2\x51\x11\x12\x43\x71\xba\x6e" +
	"\x80\x46\x18\xd3\x85\x01\xf7\x22\x5d\x74\x8e\x28\xe7\x03\x38\xb1\x9b\x98\x39\x76\x64\xbb\xeb\x4a\xd4\xef\x7e\xe4" +
	"\xbc\xb4\x89\xe3\xa4\x1d\xe7\x6c\x7f\x34\x89\x9f\x97\xdf\xf3\x6e\xbb\x2c\x09\x5d\x31\x41\x61\xb6\x5c\xe7\x39\x56" +
	"\xdb\xd9\x6e\x77\x06\x00\x50\x96\x08\xe6\x2f\x53\x69\xb6\x05\x8d\x20\x65\x26\x5b\xc7\x61\x22\xf3\xf9\x4f\x2c\xb4" +
	"\x54\xe9\x3c\x95\x86\xe5\xb4\xfd\x51\xb4\x90\xca\x84\xdf\xa9\x5e\x73\xf3\x71\x9d\xdc\x53\xf3\x72\x0e\x68\xb7\x3b" +
	"\xab\xa4\xdd\x18\x1c\x73\x0a\x09\xc7\x5a\xbf\x9f\xe9\x46\xd5\x6d\xb5\x56\xaf\xc7\x92\x6c\x0f\xef\x65\xc9\x56\xe1" +
	"\x57\xfd\xa7\x92\x3f\x69\xd2\xc8\x6b\x80\x1d\x58\xd4\x6d\xef\x43\xfd\x91\xdc\x96\x25\x5b\x5c\x0b\x98\x35\xcc\xb3" +
	"\xdd\xee\x66\x6e\x88\x97\xb6\x05\x64\x98\xe1\x74\x76\x5b\x96\xe1\x0f\xfb\xe4\xe3\xb8\x99\x77\xf5\x95\x25\x15\xa4" +
	"\x03\xc8\xe2\x05\x21\x0d\x84\x9f\xb0\xa1\xdf\xb1\x48\x69\xf8\x39\x2f\xcc\xf6\xa9\xa0\x7f\xb0\x9c\x82\xb2\xfc\xd1" +
	"\x69\xc0\x73\x8a\x2a\xf2\x0a\xfd\x41\xf9\x37\x26\x58\x8e\xf9\xd2\x28\x26\xd2\xa7\xdb\x33\xc0\xd9\xc3\xa8\x70\x72" +
	"\x4f\x09\x58\xe5\x7e\x94\x0e\x42\x8b\x2d\x67\xe2\xd3\x5a\x61\xc3\xa4\x80\xb0\x7d\x0a\xff\x6b\xc3\xda\xe7\x77\x81" +
	"\xb1\x15\xd4\xc9\xf5\x47\x61\x59\x74\xb8\xcc\xe4\xe6\xf3\x23\x4e\x4c\x2b\x45\xc3\x53\xbd\x5c\xb1\x83\x39\x6a\xc7" +
	"\x53\x6d\xa9\xe4\xfe\x86\xb7\xe7\x9d\xf4\xbf\x99\x57\xb5\x72\x7b\xd6\x52\x9d\x1d\x6a\x34\x91\x79\x2e\xc5\xdd\x72" +
	"\xd9\x56\xe9\x8d\x36\x5b\x4b\xdb\x4a\x8a\x94\x94\x06\xca\x9e\x6e\x84\x56\x52\x18\xa4\xd9\x2f\x1a\xc1\xe2\xb2\x30" +
	"\xef\x7c\xcb\x2b\x9c\x33\xbe\x8d\x60\xa6\xb7\xda\xd0\x1c\xad\xd9\x2c\x00\x84\x8b\x82\x53\x54\x7f\x0a\xe0\x23\x67" +
	"\xe2\xfe\x1b\x4e\x96\xd5\xfb\x17\x29\x4c\x00\xb3\x25\x4d\x25\x85\xbf\xbe\xce\x02\xf8\x2e\x63\x69\x64\x00\xff\xa3" +
	"\xfc\x81\x1a\x96\xe0\x00\x3e\x28\x86\x79\x00\x1a\x0b\x8d\x34\x55\x6c\x15\xc0\xec\x83\x15\x0a\x77\x92\x4b\x05\x9f" +
	"\x73\xf9\xd3\x6a\xda\x8b\xf1\x7c\x59\x6e\xf3\x58\xf2\x99\x0b\xbb\xca\xfd\x3e\xf6\xff\xaf\x13\x46\x30\xdc\x49\xa1" +
	"\x25\xa7\xb3\x00\xbe\x49\x81\x13\x19\x40\x2e\x85\xd4\x05\x4e\xe8\xb8\x90\x0d\x65\x69\x66\x22\x10\x52\xe5\x98\xbf" +
	"\x3b\x73\x08\x13\x0b\x37\x82\x98\xe3\xe4\xde\x15\x12\xa7\xed\xf2\x26\x63\xc6\xa3\xc3\x70\xda\x52\x3c\xbb\x5a\xbc" +
	"\x79\x1d\xbf\x72\x69\x94\xdc\x20\x49\xc8\x9e\x8a\x56\x7f\x2e\x55\xb5\x8a\xd6\x62\xad\x29\x89\xe0\xd9\xf5\x5b\xfb" +
	"\x3f\x40\x23\x15\xa1\xaa\xa1\xe5\xb5\x51\x0f\x58\xbd\xe8\xb3\x9f\x0f\x2c\xac\xd2\x0e\x6d\x18\x31\x59\x04\x8b\x8b" +
	"\x8b\xe7\x03\x3b\x2a\x02\x82\x0d\x3e\x4e\x65\xb2\xd6\x94\x8e\xea\xf3\x51\xda\x38\xed\x51\xb7\x0e\x1d\x67\x68\xa3" +
	"\x15\x4b\x4e\x46\x89\x6c\x5c\xeb\xb4\xbf\x08\xaf\x15\xcd\x07\x26\x37\x83\xa8\xe7\xb2\x16\x43\x2f\x22\x1d\x20\xbb" +
	"\x83\x90\xcc\xe4\xdc\x29\xb6\x4e\xa9\xd5\x62\xf6\x1f\x1c\x5b\x8e\x7a\x27\xc6\xc9\x7d\xaa\xe4\x5a\x10\x74\x8a\x6f" +
	"\x7a\x85\xd0\x51\x5d\x7f\xf2\xe3\xaf\x87\x72\xdf\x80\x26\xb2\xb5\x84\x4e\x4a\xb8\xe8\xf6\x1e\xe3\xb8\xd0\x34\x82" +
	"\xf6\xa9\xa7\xe8\xa0\x29\x0b\xc0\x10\x47\x15\x67\x82\xa2\xac\x09\xe4\x22\xbc\x7c\x5d\x85\xa8\x4b\x51\x60\x42\x98" +
	"\x48\x6d\xfc\xaa\x55\x58\x0c\x48\xba\xbd\xcd\xbf\xe8\x16\xb6\xcf\x11\x59\x58\x15\xa9\x05\x59\x3f\x39\x50\x07\x40" +
	"\x2e\x46\xe4\xb8\xde\xb4\xfd\x00\x55\x9d\xc7\x02\xd8\x28\x5c\xf4\x11\x1a\xfa\x68\x10\xe6\x2c\x15\x11\x70\xba\x72" +
	"\x7a\xf3\x03\x55\xb6\x8d\xf2\x96\x22\x96\xc6\xc8\xdc\xaf\xda\xf5\xae\xcb\x6b\x64\x31\x82\x99\x62\x32\x44\x3e\x96" +
	"\x7e\x6e\xc9\x4e\xa5\x75\xbf\x15\xf8\x12\xb6\x5b\x29\x83\xb2\xf5\x31\xb4\xc1\x74\x58\xea\xcf\xfe\x2c\x0f\x0f\x7d" +
	"\xeb\x78\xae\x1f\xba\xdb\xa4\x30\x49\x08\x18\x15\x09\x6b\x5b\xc6\x38\x79\x71\x29\xd0\xe2\x1c\x0c\x09\x7a\x14\x76" +
	"\xaa\x7b\xe9\x4e\xf5\xf6\x09\x4d\xa8\xd1\x97\x63\xa3\xd8\x23\x18\x12\x09\x69\x5e\x44\x1c\x6b\x53\xab\x3c\x0f\x5c" +
	"\x92\x6c\x40\xe2\xcf\x76\xa4\x9a\xd2\xec\xd5\x55\x57\x75\x2d\x11\xf9\x2a\x66\x74\x42\x54\x19\x2f\x1f\xa8\x5a\x71" +
	"\xb9\x89\x80\x72\xce\x0a\xcd\x74\x9f\xa8\x5d\x47\x8f\x11\x64\x8c\x10\x2a\xa6\x0b\x23\x67\x84\x70\x3a\xe2\x9f\xcc" +
	"\x06\x74\x80\xaf\x5f\x99\xfd\xd6\xd0\x31\xe0\xed\xdb\xe7\x7e\xb1\x95\x66\x64\x6b\xd6\x91\x3c\x5e\xd2\x43\xf6\xca" +
	"\xc3\x13\xfc\xd5\xfa\x88\x59\x1e\xa7\xf7\xab\xef\xb0\xed\x98\xaa\xa4\xe1\x04\xed\xb6\xd4\xf0\x6a\x34\xf8\x71\x75" +
	"\x2a\xd3\x70\xeb\xc7\xd2\x93\xf2\x66\x54\x4a\x33\x82\xfd\xd9\x83\xd7\x46\xfa\xe6\x4e\x04\x57\xc5\x23\x68\xc9\x19" +
	"\x69\x8c\xf5\x4d\x72\xc7\xea\x1c\xab\x94\x89\x08\x2e\xe0\x02\xae\xc6\x7b\xf8\x1e\xd1\xa0\xa3\xee\x87\x40\xf8\x7a" +
	"\xc2\x9c\xd8\x48\x83\xdd\x6d\x41\xad\x1b\x19\x59\x4c\x95\x93\xad\xf6\xbd\x00\x3b\x32\x9d\x2f\x2e\xa0\xc6\xd8\x5a" +
	"\xaa\xe3\x90\xe1\x2e\x70\xa4\x7d\x24\x92\xef\x55\x04\xfd\x57\xbf\x3a\x9b\xd3\xff\x40\x9f\xdd\x71\xfb\x52\xa5\xbf" +
	"\x77\x71\x37\xf7\x27\xcc\x02\x67\x27\x7f\x3e\x3e\x68\x9d\xaa\x82\x63\x83\xda\x85\x8f\xec\xc8\xa4\xea\xf4\xba\x3d" +
	"\xaa\x61\x60\x53\xbf\x2a\x07\x00\x46\x22\x74\x42\xfd\x0f\x44\xfd\xa6\x9c\x27\x20\xae\x1b\x85\xb7\x22\xea\x6a\xbc" +
	"\x9c\xaa\x46\x83\x95\x41\x04\x6f\x83\xf6\xd9\xa2\xae\x5e\x64\x81\x3c\xc9\x94\x33\xd1\x1c\x4f\xde\x0c\xf6\x83\x27" +
	"\x47\x59\x48\x43\xb5\x7b\x8e\xce\x35\xca\xb6\x45\x46\x85\xf6\x75\x26\xb4\xa1\xf1\x3d\x33\x53\x24\x23\x4b\x5d\xc5" +
	"\xa4\xb9\x4d\x40\xbf\xa8\x92\x53\x51\x71\xce\x72\x07\x59\x50\xdd\x21\x34\xf7\x02\xf5\x5b\xf5\x02\x39\x25\x0c\xbf" +
	"\x9f\x15\x8a\x09\xd3\xb9\x7a\xfb\x4f\x81\xd3\x81\x0f\x9b\xe0\x5c\x5e\xe4\xfe\x56\x55\x6d\x6c\x4e\xbe\x66\xe8\x1e" +
	"\x99\x16\x13\x63\xe2\x7a\x8c\xe9\x32\x80\xec\x2a\x80\xec\xd5\x04\xf3\xab\x11\xe6\x89\x43\xce\x70\x73\x62\x7d\x81" +
	"\x62\x45\xf1\x3d\x62\x42\x33\x42\x23\xc0\x0f\x92\xf9\x13\xdb\xb8\x1d\xe0\x38\xb7\x43\x85\x57\xc6\x0e\xb3\xd1\x74" +
	"\xa8\xf7\xe6\xa3\x4a\x62\xba\x92\xea\x64\x25\x93\x44\x13\x78\x09\xd3\x05\xc7\xdb\xa8\xf6\x64\xd3\xfb\x90\xdd\xad" +
	"\x8e\x1c\x28\x3c\xc9\xf1\x2f\x81\xee\x6a\x59\x0d\x6f\xba\x9e\xac\xe5\x74\xab\xed\x20\x1e\x98\x0c\xdd\x52\xf3\x5d" +
	"\xd7\xad\xb5\x91\x79\xe7\xba\xae\x2c\x37\xcc\x64\xce\x7d\xe6\x5d\x4b\xd5\xbd\x11\x74\xee\xf5\x6a\xe6\xb0\x77\x67" +
	"\xd8\x21\xd9\xeb\x3e\xae\xe4\x0b\xe3\xf4\xa8\x22\x26\xec\xd9\xfc\x6e\xb9\x84\xa3\x2a\x9b\xdf\xbf\x03\x00\x00\xff" +
	"\xff\x96\x0e\x4b\x5d\x48\x18\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6216,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139907, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x85\x1c\x9c\x45\x2d\x21\xb7" +
	"\xc5\x42\xf1\x61\x93\xa6\xe8\xa1\x69\x11\xa7\x3d\xf4\x46\x5b\xb4\xc5\x56\x12\x55\x92\xda\x24\x25\xf4\xdf\x0b\x52" +
	"\xa4\x9e\xd4\xc3\x49\x16\xdb\xe6\x62\x4b\xe4\x0c\x87\xf3\xcd\xe3\x1b\x47\xca\x0d\x04\x1f\x4e\x54\xbc\xe4\xf8\x13" +
	"\x9c\x88\x88\x8b\xbd\x7f\xa0\x69\xf0\x27\xca\x38\x65\xa7\x40\xd0\x34\x38\xd1\x8d\xfa\x60\x38\xa7\x4c\xf8\x0f\x98" +
	"\x17\x89\xf8\x5c\x1c\xfe\xc2\xe2\x43\x00\x9b\xb2\x5c\xad\xa4\x8c\xf0\x91\x64\x18\xbc\x47\xb4\x4f\x70\xb5\xe8\x95" +
	"\xe5\x0a\x00\xe0\x7d\xce\xa8\x34\x5d\xec\xf5\x3b\xf8\x74\x0d\x7e\xf3\x92\xc7\xf4\xe9\x87\x67\x74\xd0\xef\x2b\x15" +
	"\xbf\xe4\x82\xd0\x8c\xfb\x3b\xbb\x74\x5b\x30\xa4\x5f\x81\x91\x0b\x85\x32\x15\x0e\x09\xe2\xfc\xda\xd3\x0f\x1b\x1a" +
	"\x45\xde\x56\xaf\x56\x3b\x62\x8c\xa2\xf6\x33\x6b\x1e\xcc\x86\x5a\x3e\xde\x3c\x91\x08\x7b\xdb\x90\xe7\x28\xab\xdf" +
	"\x12\x91\x60\x6f\x2b\xa5\xff\xa8\xbe\x95\x65\x18\xa8\xe5\x6d\x18\x88\x78\x5c\x15\x49\xf1\x46\x9d\x8c\x99\x12\x25" +
	"\x57\x1f\x33\xf0\xac\xf9\x9e\xd2\xd1\x17\x96\x92\x1c\xa1\xf1\x82\xb9\xe0\x39\xea\x2b\xef\x45\xd3\x87\xe0\x2c\xea" +
	"\xa9\x96\x92\xa1\xec\x84\xc1\xff\x95\xd1\x1c\x33\x41\x30\x3f\xeb\x70\x2b\xf7\xe2\xdf\xa3\x14\x97\x25\xac\xdb\xef" +
	"\x76\xc5\xf1\x48\x9e\xcb\xf2\x72\xde\x98\x30\x68\x63\xa3\xf6\xf7\x90\xdb\xd3\xe8\xa5\x79\xb6\x76\x9b\x70\xf2\x6f" +
	"\x62\x92\x44\x55\xb8\xf5\x2f\x30\x00\xbd\x7a\x19\x75\x40\x15\x91\x73\x4f\xfb\xd6\xea\xba\x29\xc9\x2c\x8e\xe0\xdb" +
	"\x6f\xfe\x8f\x58\x8c\xe9\x98\x07\xf6\xdc\x93\x8c\x9e\xb1\xe3\x86\x10\xc3\x62\x98\xa1\x0b\x35\x4a\xc8\x29\xdb\x30" +
	"\x72\x8a\x85\xb2\xe8\x48\x59\x8a\xc4\x7d\x91\xee\x31\x03\xff\x77\x94\x14\xf8\x8e\xb2\x07\x5a\x64\x11\x8e\xca\x12" +
	"\x5c\xc0\x0f\x71\x1f\xb3\xb2\x8b\xbf\x23\x3a\xba\xf8\x87\xe2\x48\xa9\xe8\x64\xb6\x35\x9b\xd1\xa7\x0d\x2f\xf6\x82" +
	"\x0a\x94\x78\x83\x1c\xad\x13\xe6\x51\xaf\xbb\x4c\xec\x45\x3b\xf4\x42\xbe\x8d\x8c\x0d\xbf\x41\x28\xbc\x35\xbf\xcf" +
	"\x3d\xb4\x89\x8a\x33\x92\xde\x2a\x7a\x65\xee\xbb\x03\xc2\x58\xb2\x30\x1c\x66\xcb\x40\x03\x73\x18\xe8\x12\xbf\x5d" +
	"\x59\x99\x56\xd3\xfa\x19\x09\x46\x9e\xff\x17\x5d\xcb\xca\xa5\xb9\x78\x19\xca\x3d\x54\x86\xec\xec\x0e\x75\x4d\x18" +
	"\xe9\x75\x11\x12\x08\xea\xb6\x67\xbe\xa5\xda\x13\xaf\xec\x81\x95\xf0\xc6\x34\xbd\x57\x36\x42\x29\x9f\x88\x88\xeb" +
	"\xe0\xba\x23\x8c\x8b\x7b\x9a\xe9\xeb\xe8\x32\xed\xac\x4f\xef\x85\x95\x2b\xce\xa7\xba\xc3\x7c\x98\xb7\x9a\xc4\xc2" +
	"\x5a\xe6\xac\x6f\x33\xfd\xdb\x5d\x8e\xbe\x5e\x57\xd4\x15\x89\x32\x58\xa3\x2c\x82\x56\x44\xfa\xfa\xe3\x12\xd6\x19" +
	"\x15\xf6\xc1\x59\x15\x1c\x4d\x15\x26\xa2\x09\xf4\xc7\xb5\xd7\xf8\x73\xe8\x5b\xa7\xc2\x73\x40\x04\x57\x2f\x1d\xdd" +
	"\x59\xbb\xa1\xa9\xa4\x3f\x71\xd3\xcf\xfe\xc0\x8c\x4e\x1c\x52\x1f\xd6\x4e\x11\x4b\xbe\x36\xff\x60\x46\x67\xd9\x82" +
	"\xce\x9e\xd9\x03\x54\x62\x74\x5a\x87\x33\xd0\x9d\xa6\xed\x47\x10\xfa\x06\x77\x70\x93\x92\xde\x9e\x84\xe3\xa5\x1e" +
	"\xff\x2f\xf8\x56\x1b\xb2\x68\xb7\xfd\x33\x2e\x96\x12\xaa\x94\x37\xa1\xd6\x90\x76\xa8\x92\x62\x9e\xfa\xbd\xab\xdf" +
	"\x27\xf7\xb8\x69\x66\x5b\x72\xae\x0a\x1c\x68\x52\xd3\x31\x68\xa8\x4d\xcd\xd0\x5c\x85\x61\xd4\x9c\x49\xdc\x27\xa4" +
	"\xce\x05\xba\x06\x78\x11\x68\xef\x82\xda\x14\x12\xee\xd6\xd3\x6d\x0e\x2e\x1d\x5f\x8f\x46\xbb\x19\xc3\x3c\xb7\xae" +
	"\x3b\x14\xf9\xfe\xe2\xa0\x0a\xba\xa2\x40\xe3\x54\x61\xae\xe8\x4b\x79\x61\x81\x50\x8a\x78\x91\x6a\x01\xcd\x45\xb9" +
	"\xd5\x0b\x17\x64\x29\xe1\x1e\xb9\x70\x2d\x63\x8a\xcf\xba\x43\xc7\xa3\x16\xd8\x97\xd3\x40\x9f\x17\x89\x6f\x8c\xc2" +
	"\x8e\x61\x0b\xa2\x70\x2c\x02\x97\x0d\x15\x6e\x82\x03\x23\xe9\x3f\xe6\xe5\x25\xe3\x95\x93\x3d\x2e\xf3\xea\x5b\x3d" +
	"\x3a\x35\x79\xb9\x1d\x3b\x32\xeb\x4e\x71\xbc\x65\x23\xcf\x37\x19\x76\xce\x1c\x5a\x22\xf2\xc5\x3a\xba\xd2\xe9\xb5" +
	"\xb9\x2a\x39\x82\x22\x9f\xc3\xc1\xa9\x9a\xe6\xf4\x0f\x91\x1c\xd6\x84\x57\xcf\x75\x3a\x6b\x6a\xda\xd8\x73\xd9\xe7" +
	"\xa7\x52\x0a\x9c\xe6\x09\x12\xfd\xc1\xb0\xd6\xd0\x2d\x91\x09\xc7\x2a\x7c\xf0\xdf\x0d\xbe\x38\x17\x31\x5c\xc1\x84" +
	"\xe2\xf6\xcf\xa4\x56\x6e\xa0\xd6\xc5\xb9\x7d\xeb\xa2\x61\xa4\x18\x87\xac\xa7\xbd\x6b\xb9\xf9\x2d\x12\xf8\x41\x15" +
	"\xd3\x71\x96\xde\x07\x41\x97\x69\xd0\x15\x58\xb3\xef\x5a\x85\x8a\xdf\x88\x7c\x59\x3c\xde\xb8\xb9\xda\x10\x6f\x3e" +
	"\x55\x48\xe7\x46\xcb\x77\x19\x07\xda\x98\x59\xb8\xfc\x91\xfd\xe3\x05\x70\xe0\x9b\xa9\x4e\x6b\xb6\xd7\x39\x1b\x7e" +
	"\x17\xd1\x83\x4a\x4c\x88\x45\x9a\x6c\x57\xa1\xfa\x80\x04\x65\x27\x5d\x7f\xd4\x97\xcf\x88\x63\xcd\xfe\x56\x61\x33" +
	"\xe1\x85\x29\x16\x08\x0e\x31\x62\x1c\x8b\x6b\xef\xb7\xc7\xbb\xcd\x47\xe3\x4f\x33\x63\x77\x03\xe5\xa6\xe0\x82\xa6" +
	"\xc6\x87\xad\x96\xae\x5e\x6c\xa5\x04\x1f\x74\x47\xd6\x8f\x2b\xe8\x53\xb8\xb6\xa3\x0e\x34\x4d\x69\x76\xb3\xdb\x35" +
	"\xe5\xa5\xb5\xa8\x8f\x31\x8b\x61\x50\xd9\x1b\x56\xbc\x62\x75\x4e\x1d\x52\x6e\xa8\x6e\x10\x98\x2b\x98\x32\x24\xe5" +
	"\x05\xcd\x05\x1f\x14\x1a\xa8\x2a\x60\xf5\xf3\x82\xda\xd1\xbe\x72\xfd\x5f\x81\xf8\x4a\x85\x92\xba\x6a\x7c\xd5\xa9" +
	"\x9c\x03\xb9\x5b\xcc\x0f\x8c\x68\xdd\xb5\x74\x5e\x4f\x42\xcd\xa2\x67\x15\xe6\x1d\x7d\xaa\xe5\x68\x6d\x2a\x35\x77" +
	"\x45\x9a\x22\xf6\x02\x0e\x87\x99\x25\x0f\x4c\xc9\xd5\x37\xac\xb4\x38\xa3\xb3\xde\x15\x06\x95\x57\x43\xed\xaa\xed" +
	"\xbf\x01\x00\x00\xff\xff\xf4\x42\x5c\xa0\xeb\x19\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6635,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549755878, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\x58\x63\x0f\xed\x00\xb6\x31\x28" +
	"\x0a\x2c\x16\x4e\x0e\xf3\x57\xf4\xd2\x16\x9b\xf4\x01\x14\x8b\x63\xab\x6b\x4b\x86\xc4\xec\x34\x30\xfc\xee\x85\x24" +
	"\xff\x24\x19\xdb\x93\x64\x73\x88\x2c\x91\xfc\xf8\x2f\xb1\x69\x22\x48\xee\x72\x45\x87\x1a\xbf\x40\x2e\xa8\xd8\xef" +
	"\xe2\x4c\x55\xc9\xbf\x4c\x1a\xa5\xf3\x24\x57\x24\x2a\xec\x17\x8d\xb5\xd2\x14\x3f\xec\xb3\x6f\x48\x5f\xdd\xe6\x2e" +
	"\x81\xa8\x6d\x83\xa0\x69\x38\xbe\x0a\x89\x10\x7a\x6a\xd8\xb6\x01\x00\xc0\x87\x1a\x48\x55\x49\xae\x22\xbb\x74\xf0" +
	"\x5f\xd1\xec\x4b\xf2\x30\x1d\xbc\x47\xfa\xb4\x73\x67\xf0\x65\x05\xf1\x78\x68\x0a\xf5\xf6\x5c\xd5\x74\xb0\xe7\x1e" +
	"\xe2\xaf\x9a\x84\x92\x26\xf6\x26\xc6\x9b\x9e\xc3\x1a\x6a\xa5\x52\x2e\xbe\x43\x56\x32\x63\x56\xa1\xc7\x0c\xd7\x8e" +
	"\xe0\x21\xc5\x2b\x74\xaa\xe2\x5e\x0c\x8e\x7e\x8e\x41\x69\xf8\x59\x2a\x3a\x65\xdc\xa8\xbd\xce\xf0\x17\x18\x6d\x3a" +
	"\x13\x75\xca\x89\xed\x4a\xec\xd5\xbb\x4d\xc4\x19\x31\xf0\x9f\x8a\xf3\x23\x63\x4e\x05\x0b\x64\x7c\x8e\xa6\xa7\x09" +
	"\xde\xe0\xe4\x0e\xab\x1d\x72\x8e\x1c\x48\x50\x89\x40\x0a\xbe\x21\xd6\xdd\x8e\x49\xee\xb5\x1b\x20\x95\x23\x15\xa8" +
	"\x41\x48\xa8\xb5\x90\x84\x1c\xfe\x7e\x7a\x31\x77\xc9\x84\x2b\x47\x96\x41\xa6\x4a\x53\x33\xb9\x0a\x7f\x0b\x07\xdf" +
	"\x2c\x78\xb8\x1e\x12\x17\x6f\xed\x41\xdb\x8e\xa9\x8c\x37\x75\x29\xe8\xe1\xb0\x3d\xd4\xd8\xb6\x69\x42\xc5\x8c\x7b" +
	"\xc9\x9c\x7f\x8b\x8e\x3b\xbb\xbc\x2d\x9c\x11\x46\x36\x7e\xa8\xad\x45\xe2\xfe\xb3\x84\xf0\x89\x11\x86\x4b\x7a\x2f" +
	"\x01\xd9\x10\xd3\xf4\xc3\x28\xcf\x92\x5f\x83\x61\xdb\xf1\xbd\x3b\x7b\xcd\x6c\xe1\x5f\x05\x54\x44\x6f\x82\xe3\x08" +
	"\xf2\xa7\x22\x34\x8b\x08\x0b\xc9\x48\x16\x4b\x74\xa7\xf8\x61\x9a\xd6\x34\x9a\xc9\x1c\x87\x6e\x7a\xd1\xac\x42\xd3" +
	"\x2d\x8b\x85\xb7\x90\x7d\xcf\xc0\x7b\x4f\x8d\xcd\x53\xc4\xd9\xc1\xfa\xfa\xaa\x74\xc5\xc8\xe6\x1f\x62\x97\x40\xe7" +
	"\xf0\x8c\xe5\xb3\x60\x36\x0b\x23\xda\x56\x54\x37\xa3\xa9\xba\x03\x5b\x14\x81\xfe\xf6\x89\xff\x30\x1b\x52\x75\x8d" +
	"\x7c\x21\x38\x93\x52\x42\xe6\x25\x3e\xb1\xa9\x8b\x69\x5e\xf6\xd8\xbf\x67\x79\xb9\x4e\x2c\x0d\xde\xa0\xc8\xa6\xe5" +
	"\x06\x65\x17\xf1\x5e\xc2\x77\x55\xee\xfa\x1a\xa8\x84\xec\xfb\x0f\xe2\xfe\xeb\xca\x3a\x90\xae\xf7\xd6\x4d\x13\xbb" +
	"\x2e\xfc\x48\x7a\xbe\x11\x97\xbc\x4c\x93\x85\x46\x4c\xe9\x55\x29\x1a\xea\x72\xbf\x23\x45\xac\x9c\x7d\x90\x74\xcf" +
	"\xa9\xd5\x5b\xf4\x01\x37\x9c\x3f\x14\xbf\x8e\x97\xce\xd6\xc9\x5d\x71\x6d\x65\xaa\x1c\xf4\x81\x4d\x81\xfb\x3b\x32" +
	"\x61\x26\x21\xf1\xef\x48\xcf\xff\xb1\x8c\x2e\xd0\xb5\xbe\xf1\x0a\xb4\x11\x7c\x4f\x4c\x13\xf7\xc2\xae\xcf\x46\x89" +
	"\xd3\x3c\x4d\xb6\xcc\xf1\xb4\x32\xf7\xa4\xa6\x09\x17\xdf\xcf\xb1\x4f\xef\xd4\xc7\x42\x94\xdc\x4f\x55\x53\x57\x6a" +
	"\xd3\x10\x56\x75\x69\x6f\xc4\x7e\x84\x1b\xa6\xac\x05\x73\x87\x7d\x67\x41\x7f\x14\x5c\x33\xf8\x15\x54\x95\x7e\x72" +
	"\x4b\xba\xd1\xad\x9b\xfb\x9a\xe6\x93\xaa\xc9\xbc\x9b\xec\xc0\x6a\x48\x7f\xe2\x2a\xb3\xf0\x60\xe5\xd7\x41\x6a\x17" +
	"\x28\x99\xcc\x57\x61\xd3\xb8\x8f\x07\x66\x10\xda\x36\xb4\xc4\xe1\x61\x4a\x2b\x24\x06\x59\xc1\xb4\x41\x5a\x85\xff" +
	"\x6c\x5f\xa2\xcf\x5d\xcd\x36\xcd\x9b\xa0\x02\x9c\xd2\xf8\x71\x6f\x48\x55\x5d\x80\x83\xb1\x30\xec\x81\xed\x51\x57" +
	"\x42\x6e\x13\x1c\x07\x23\x38\x8f\x66\xa6\xaa\x4a\xc9\xc7\xcd\x66\x9c\x89\x8f\x88\x4e\x49\x47\x4c\x13\x6f\x65\xea" +
	"\x1b\x34\x98\x33\x07\xfa\x98\x17\xf7\xbd\x21\xc5\xfd\x49\xec\xdf\xc9\x3d\xa1\xc9\xb4\x70\xd1\x1b\xa4\xeb\x61\x22" +
	"\x19\x89\x61\x0f\x58\x9f\xe0\xd9\x91\xd8\xa1\xd9\x59\x7a\xb3\xaf\x2a\xa6\x0f\x30\xe1\x4e\x47\x0a\xa1\x9b\xe2\x5d" +
	"\x0e\x07\x94\x89\x0a\x1b\xd8\xd2\xc4\x3b\x9d\xba\x6a\x58\xff\x1f\x00\x00\xff\xff\x42\x08\x63\x62\x9a\x0c\x00\x00" +
	"")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3226,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139854, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
