// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xfd\x8e\xdb\x36\x12\xff\x3f\x4f\x41\xb8\x28\x90\x0d\x44\x79\x3f" +
	"\x92\x20\x51\xb7\xc6\xa5\x9b\xf4\x1a\xa0\x8b\x3b\xc4\xed\x03\x50\x22\x2d\x31\xcb\x0f\x81\x1c\xaf\xd7\x35\xfc\xee" +
	"\x07\xea\xc3\x96\x28\x4a\xf6\xee\x15\x4d\x80\x58\x22\x7f\x33\xf3\x9b\xe1\xcc\x90\x62\x76\x3b\xca\x56\x5c\x31\x34" +
	"\x93\x5a\xb1\xed\xef\xdc\xc2\x6c\xbf\x7f\x85\x10\x42\xbb\x9d\x21\x2a\x67\x28\x6e\xde\xeb\xb1\x95\x36\x92\xc0\xbd" +
	"\x03\xbb\x99\xdb\xd4\x2c\x1a\x34\x53\x74\xbf\x7f\xd5\xfe\xbe\x3a\x6a\x06\x43\xb2\x07\x46\xbf\xaa\x95\x3e\xea\xde" +
	"\x70\x28\x3c\xd5\x18\xcd\xdf\xe4\x1a\xb6\x25\x4b\x50\xce\xa1\x58\xa7\x71\xa6\xe5\xfc\x3b\x51\x56\x9b\x7c\x0e\x5a" +
	"\xce\x73\x8d\xdd\x0f\x25\xc0\xfe\xe0\x92\xc5\xee\x9f\x2f\x0a\xcc\x76\xc9\x0c\x67\xf6\xcd\x1c\xe1\x9e\xca\xf9\x9b" +
	"\xdd\x4e\x72\xf5\x79\x6d\x08\x70\xad\x50\x7c\xcf\xd5\x7e\xff\x66\x7e\x02\x44\x9e\x06\xa0\x1e\xe0\xd3\x63\x7e\x70" +
	"\x64\xd4\xed\xe5\x5a\x4a\x62\xb6\x47\x97\x4f\xf8\x97\x6b\xe0\x92\xb5\x3f\x86\x95\xda\x40\xfc\x8d\xd9\xb5\x80\x5f" +
	"\xd6\xd9\x03\x83\xc6\xbb\x4a\xdb\x2d\x90\x54\x30\x94\x09\x62\xed\xcf\x33\xdb\x98\x5a\x1c\x08\xdf\x42\xaa\xe9\x76" +
	"\xd1\x71\x80\xaf\xe2\xaf\xf6\xbf\x46\x7f\x67\x59\xa3\xaf\xe3\x5f\x2d\x62\x16\xbd\x81\x7a\x90\x2e\x76\x3b\x7e\xf5" +
	"\x41\xa1\x59\x23\x3c\xdb\xef\x6f\xe7\x40\x83\xd8\x96\x10\x70\x10\x6c\xb6\xd8\xed\xe2\x3f\xdc\x53\x48\xe2\x76\xde" +
	"\xb5\xd7\xc6\xaf\xcb\x17\x29\x0d\x28\xfe\x4c\x80\x7d\x73\x89\x18\x7f\x91\x25\x6c\x9f\x4b\xda\x65\x08\xaa\x12\x39" +
	"\x39\x8f\xb8\x64\xb8\x82\x57\xec\x8f\xc6\xef\xb9\xe2\x92\x88\x25\x18\xae\xf2\xe7\xfb\x33\xe0\xd9\xe3\x58\x17\x08" +
	"\x72\xc6\xc3\x2c\x3d\x86\x8e\x5b\x2f\x21\xdb\xa7\xf8\xdf\x6e\x59\xfb\xf2\x3e\x31\xbe\x42\x75\x72\xfd\xa7\x74\x22" +
	"\x36\x5e\x16\x7a\xf3\xe5\x89\x64\xd0\x6a\xb1\xe8\xb9\x51\xae\xc4\x11\x9c\xf4\xe3\xb9\xbe\x54\x7a\x5f\x98\x3d\x44" +
	"\xd1\x80\xa3\x6d\xac\xe3\xdf\x88\xfd\x4c\xb8\xd8\x36\x03\xcf\xf5\xb8\x92\x7d\xa9\xc7\x03\x44\x4d\x1a\x98\x2c\x05" +
	"\x01\xaf\x65\x22\x17\x88\x09\xaa\x4d\x38\xfe\xae\x00\xfd\xa9\x06\x21\x3a\x0c\xbd\x2c\x48\x6b\xf5\xcf\x86\x69\x8c" +
	"\xee\x4b\x02\x75\x3b\xef\x34\xd2\xdb\x79\xd5\x75\x17\xa1\x6e\x9f\x69\x29\xb5\xba\x5b\x2e\xdb\x7e\x7f\x6b\x61\xeb" +
	"\xb0\xad\xa6\xc4\x68\x0d\x68\xd7\xb3\x8d\xf1\x4a\x2b\xc0\x96\xff\xc5\x12\x74\x75\x5d\xc2\x4f\xa1\xe9\x15\x91\x5c" +
	"\x6c\x13\x34\xb3\x5b\x0b\x4c\xe2\x35\x9f\x45\x08\x93\xb2\x14\x0c\xd7\x43\x11\xfa\x45\x70\xf5\x70\x4f\xb2\x65\xf5" +
	"\xfe\xab\x56\x10\xa1\xd9\x92\xe5\x9a\xa1\x3f\xbf\xce\x22\xf4\x4d\xa7\x1a\x74\x84\x7e\x63\xe2\x91\x01\xcf\x48\x84" +
	"\x3e\x19\x4e\x44\x84\x2c\x51\x16\x5b\x66\xf8\x2a\x42\xb3\x4f\x4e\x29\xba\xd3\x42\x1b\xf4\x45\xea\xef\xce\xd2\x41" +
	"\x4d\x60\x64\xb9\x95\xa9\x16\x33\x9f\x76\xd5\x45\xfb\xdc\x7f\x5f\x67\x9c\x12\x74\xa7\x95\xd5\x82\xcd\x22\x74\xaf" +
	"\x15\xc9\x74\x84\xa4\x56\xda\x96\x24\x63\xe3\x4a\x36\x8c\xe7\x05\x24\x48\xb9\xb3\x87\xf8\xe9\x95\x07\xcc\x1c\xdd" +
	"\x04\xa5\x82\x64\x0f\xbe\x92\x34\x6f\xa7\x37\x05\x87\x80\x0d\x10\xac\x45\xfc\x70\x73\xf5\xfe\x5d\xfa\xd6\xc7\x18" +
	"\xbd\xc1\x9a\xd2\x03\x8a\x55\x7f\x7c\x54\x35\x8b\xd7\x6a\x6d\x19\x4d\xd0\x0f\x1f\x3e\xba\xbf\x03\x36\xda\x50\x66" +
	"\x1a\xac\xa8\x9d\x7a\x24\xe6\x75\x5f\xfc\x62\xe0\x61\x95\x76\x78\xc3\x29\x14\x09\xba\xba\xbc\xfc\x71\xe0\x47\x05" +
	"\xa0\x04\xc8\x69\x14\x14\xad\x2b\x1d\xd3\x17\xa3\xd8\x34\xef\xa1\xdb\x80\x8e\x0b\xb4\xab\x95\x6a\x41\x47\x41\x6e" +
	"\x5d\xeb\xb4\xbf\x8c\x3f\x18\x26\x07\x2e\x37\x47\x9a\x5e\xc8\x5a\x0e\xbd\x15\xe9\x10\xd9\x1f\x95\x14\x20\x85\x57" +
	"\x6c\x9d\x52\xab\xd5\x1c\x06\x3c\x5f\x4e\x46\x27\x25\xd9\x43\x6e\xf4\x5a\x51\x7c\x4e\x6c\x7a\x85\xd0\x31\x5d\x0f" +
	"\x85\xf9\xd7\xc7\xbb\xbe\x03\xcd\xca\xd6\x1a\x3a\x29\xe1\xb3\x3b\x44\x4c\x90\xd2\xb2\x04\xb5\x4f\x3d\x43\x47\x4b" +
	"\x45\x84\x80\x7a\xa6\x04\x57\x0c\x17\xcd\x42\x5e\xc5\xd7\xef\xaa\x25\xea\x22\x4a\x42\x29\x57\xb9\x5b\xbf\x6a\x16" +
	"\x5d\x0d\x20\xdd\xde\x16\x9e\xf4\x0b\x3b\x14\x88\x22\xae\x8a\xd4\x91\xac\x9f\x3c\xaa\x03\x22\x97\x23\x7a\xfc\x68" +
	"\xba\x7e\x80\xab\xce\xe3\x08\x6c\x0c\x29\xfb\x0c\x81\x3d\x01\x26\x82\xe7\x2a\x41\x82\xad\xbc\xde\xfc\xc8\x8c\x6b" +
	"\xa3\xa2\x45\xa4\x1a\x40\xcb\xb0\x69\x3f\xba\xbe\x2c\xe8\x72\x84\x33\x23\x74\xc8\x7c\x2c\xfd\xfc\x92\x9d\x4a\xeb" +
	"\x7e\x2b\x08\x25\x6c\xb7\x52\x06\x65\x1b\x12\x68\x17\xd3\x13\xa9\x87\xc3\x59\x1e\x1f\xfb\xd6\xe9\x5c\x3f\x76\xb7" +
	"\x49\x65\x9a\x52\x04\x26\x51\xce\xb7\x82\x0b\xfa\xfa\x5a\xe1\xab\x0b\x04\x34\xea\x21\xdc\xae\x1e\xc4\x9d\x1b\xed" +
	"\x33\x9a\x50\x63\x4f\x12\x30\xfc\x09\x01\x4d\x94\x86\xd7\x89\x20\x16\x6a\x93\x17\x91\x0f\x29\x06\x90\x70\xb6\x63" +
	"\xd3\x94\x66\xaf\xae\xba\xa6\x6b\x8d\x38\x54\x31\xa3\x3b\x44\x95\xf1\xfa\x91\x99\x95\xd0\x9b\x04\x31\x21\x78\x69" +
	"\xb9\xed\x83\xda\x79\xfc\x94\xa0\x82\x53\xca\xd4\x74\x61\x48\x4e\xa9\x60\x23\xf1\x29\xdc\x82\x0e\xf8\xf5\x2b\xb3" +
	"\xdf\x1a\x3a\x0e\x7c\xfc\xf8\x63\x58\x6d\x65\x19\xbb\x9a\xf5\x34\x8f\x97\xf4\x50\xbc\x8a\xf0\x84\x7c\x35\x3f\xe2" +
	"\x56\x20\xe8\xfd\xea\x3b\x1e\x3b\xa6\x2a\x69\xb8\x83\x76\x5b\x6a\x7c\x33\xba\xf8\x69\xf5\x7d\x6f\xd1\x22\xcc\xa5" +
	"\xa7\xe5\xfd\xa8\x96\x66\x0b\x0e\x67\x0f\x59\x83\x0e\xed\x3b\x09\xba\x29\x9f\x90\xd5\x82\xd3\xc6\xd9\xd0\x4e\xee" +
	"\x79\x2d\x89\xc9\xb9\x4a\xd0\x25\xba\x44\x37\xe3\x3d\xfc\xc0\x68\xd0\x51\x0f\x9b\x40\xfc\x6e\xc2\x9d\x14\x34\x10" +
	"\xff\x58\x50\xdb\xc6\xa0\xcb\xa9\x72\x72\xd5\x7e\x50\xe0\xb6\x4c\x6f\xc4\x27\xd4\x38\x5b\x6b\xf5\x02\x32\x3c\x05" +
	"\x8e\xb4\x8f\x4c\x8b\x83\x89\xa8\xff\x1a\x36\xe7\x72\xfa\xff\xb0\x57\x5d\x01\xba\x9e\xc4\x65\x30\x65\xfa\x67\x18" +
	"\xff\x90\x7f\xc6\x9e\xe0\x9d\xe8\x2f\xc6\x37\x5c\xaf\xba\xd0\xa9\x0d\x7b\xe0\x06\x76\x7b\x27\x33\x8d\x37\xcd\xdb" +
	"\xf9\xe5\x7c\xd2\xe0\xc0\xc5\x7e\xb1\xf6\xdb\x81\x64\x63\x0b\x77\x46\x5b\x18\xa8\x7a\xa1\x9e\x67\x30\xae\xfb\x47" +
	"\xb0\x50\xea\x22\xbd\x9e\x2a\x52\x20\x06\x30\x25\x2e\x93\xea\x67\xc7\xba\x7a\xd1\x25\x0e\xe4\x96\xe4\xaa\xfd\x6a" +
	"\x79\x3f\x38\x27\x9e\xbd\xea\x4a\x03\xb3\xfe\xf7\xb5\xb4\xb8\xd8\x96\x05\x53\x36\xd4\xb1\xf0\x86\xa5\x0f\x1c\xa6" +
	"\x20\x23\x53\x5d\xc3\xb4\xb9\xaf\xc2\x7f\x31\xa3\xa7\x96\xc5\xfb\xc6\x3b\xea\x42\xd5\xdd\x42\x73\x5f\x50\xbf\x55" +
	"\x2f\x48\x32\xca\xc9\xcf\xb3\xd2\x70\x05\x9d\xeb\x90\x7f\x95\x24\x1f\x04\xb1\x59\x9d\xeb\x4b\x19\x6e\x61\xd5\x81" +
	"\xe7\xec\xeb\x87\xee\xa7\xd4\xd5\xc4\xf6\xf1\x61\x4c\xe8\x3a\x42\xc5\x4d\x84\x8a\xb7\x13\xc2\x6f\x47\x84\x27\x3e" +
	"\x7e\x86\x87\x16\x17\x0b\x9c\x1a\x46\x1e\x30\x57\x96\x53\x96\x20\xf2\xa8\x79\x38\xb3\xc1\x6f\x01\xa7\xa5\x3d\x14" +
	"\x59\x81\xdb\xe4\x46\xd3\xa1\x3e\xb3\x8f\x1a\x49\xd9\x4a\x9b\xb3\x8d\x4c\x82\x26\xf8\x52\x6e\x4b\x41\xb6\x49\x1d" +
	"\xc9\xa6\xf9\x61\x77\x8a\x1d\xf9\xd0\x08\x24\xc7\xdf\x44\xba\x6b\x65\x35\xbc\x01\x7b\xb6\x95\xf3\xbd\x76\x1b\xf4" +
	"\xc0\x65\xd4\x2d\xb5\xd0\x35\xde\xda\x82\x96\x9d\x6b\xbc\xe6\x7f\xaa\xfa\xf7\xa4\x77\x2d\xaa\x7b\x53\xe8\xdd\xf7" +
	"\xd5\xc2\x71\xef\x2e\xb1\x03\x39\xd8\x3e\x6d\xe4\x57\x2e\xd8\x49\x43\x5c\xb9\x6f\xf6\xbb\xe5\x12\x9d\x34\xd9\xfc" +
	"\xfe\x2f\x00\x00\xff\xff\x7a\x0a\xf0\xde\xfb\x1b\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 7163,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1550089848, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x8f\x9b\x38\x14\x7e\xcf\xaf\x38\x8b\xe6\x61\x5a\x2d\xa0\x79" +
	"\xab\x2a\x26\x0f\xed\x6c\x57\x95\xf6\x22\xcd\x4c\xf7\x61\xdf\x1c\xf0\x04\x6f\x01\x67\xb1\xe9\x34\x8b\xf2\xdf\x57" +
	"\xbe\x81\x01\x9b\x90\x4c\xaa\x36\x2f\x09\x60\x9f\xcb\x77\x2e\xfe\x0e\x69\xdb\x10\xe2\xd7\x5b\xca\xf7\x3b\xfc\x16" +
	"\xb6\x84\xe7\xcd\x26\x4a\x69\x19\xff\x83\x2a\x46\xeb\x6d\xcc\x69\x19\x6f\x69\x28\xbe\x6a\xbc\xa3\x35\x8f\xee\x31" +
	"\x6b\x0a\xfe\xae\x49\x3f\x63\xfe\x3a\x86\xf0\x70\x58\xad\xda\x36\xc3\x4f\xa4\xc2\x10\x3c\xa2\x4d\x81\xd5\xc3\xe0" +
	"\x70\x58\x01\x00\x5c\x46\x87\x92\x74\xb5\x91\xf7\xe0\xed\x2d\x44\xfd\x4d\x96\xd3\xe7\x5f\xbe\xa2\x54\xde\x57\x22" +
	"\xfe\xdc\x71\x42\x2b\x16\x3d\x98\x47\x77\x4d\x8d\xe4\x2d\x10\x06\x9f\x6a\x57\xce\xcb\x42\x09\x8e\xb5\xe4\xa1\x59" +
	"\x74\xc7\xd9\x44\x79\xa7\x29\xe1\x02\x15\x48\x0b\xc4\xd8\x6d\x20\x2f\x42\x9a\x65\xc1\x5a\x3e\x55\x2b\x72\x8c\x32" +
	"\xfb\xba\xee\x2f\xf4\x82\x6e\x7f\x1e\x3e\x93\x0c\x07\xeb\x84\xed\x50\xd5\xdd\x25\xbc\xc0\xc1\xba\x6d\xa3\x47\xf1" +
	"\xeb\x70\x48\x62\xf1\x78\x9d\xc4\x3c\x1f\x8a\x6a\x5b\xf2\x04\xd2\x62\x89\xce\x03\x2a\x30\xd3\x9e\x78\x34\x96\xb4" +
	"\xc2\xfb\x50\x58\x88\x6b\xa1\x82\xdc\xbc\xa9\x20\x90\x1b\x03\xa1\x88\xe7\x6b\x68\x5b\x5c\x65\x23\x31\x23\x4d\x9f" +
	"\xaa\xc7\x1a\xa5\x9f\xf1\x78\xd9\xd8\x3f\x52\xe2\x89\xb2\x3b\x44\x8a\x3d\x34\x55\xc8\x95\x08\xa3\x77\xa4\xef\xa8" +
	"\x0d\x2f\xb5\xe0\x54\xf5\x47\xa5\xea\xb4\xf4\x08\x14\xb6\x77\xd9\xed\x30\x7a\x61\x2c\x17\xc5\x53\x55\x10\xb3\xa3" +
	"\xea\xd0\x37\x75\x71\x89\x9b\x4a\x76\x36\xef\xec\x50\x74\x12\xdb\x35\x20\xd6\x8f\x2a\x64\x43\xb3\x7d\x7f\xdd\xb6" +
	"\x35\xaa\xb6\x18\x74\x87\x88\xde\xe7\xa4\xc8\x54\x07\x19\x23\x32\x29\x2e\x75\x33\x1b\x14\x0f\xcf\x5c\xde\x2f\xac" +
	"\x9c\x6c\x80\xb4\x80\x81\xe3\x72\x57\x20\x8e\x41\xdd\xfa\x8d\x30\x1e\x40\x24\x25\x44\xf7\xb4\xa9\x32\x91\x93\x3e" +
	"\xad\x6e\xcc\x4f\xaa\xae\xcc\x0e\xcf\xd0\x20\x9d\xd2\x1f\xab\x27\x1a\x40\xf4\x2b\xe6\x32\xd3\x2d\x71\x2f\x32\xeb" +
	"\xa2\x46\x9d\x69\x92\x43\x53\x49\x2a\x53\x7a\x10\x99\x5f\x42\xcf\x7c\xec\xe7\x6a\xd1\xe1\xfc\x7c\x3d\x9e\x96\x25" +
	"\x5a\xad\xb4\xce\xe7\xa8\xd3\x59\xe7\x2a\x65\xac\x17\x85\x39\x1f\x97\x63\x3f\x2c\x61\x47\x81\x0f\x4b\x38\xe1\x4f" +
	"\x94\xf2\xc1\x21\x68\x3c\xa9\xe9\x73\xc8\x9a\x0d\xa7\x1c\x15\xc1\xe4\x64\xec\xda\xcc\xa3\x7c\xee\x6f\xa5\xb3\x81" +
	"\x19\x37\x48\x18\xb7\x49\x67\x74\x4c\xbf\x99\x96\x72\xee\x0c\x93\xaf\x6a\x61\xf1\xc1\xe1\x29\x12\x63\x88\xbb\x80" +
	"\xcf\x3e\x29\x2f\x6e\xd7\x89\x56\x8d\xf4\xc1\x48\xa9\x9d\xc1\x46\xd3\xa4\x9c\xbf\xd5\xb1\x7a\x89\x8c\xe9\xcb\xda" +
	"\x9d\x2f\x17\xc0\xc0\x56\x71\xda\x91\xdb\xd7\x63\x12\x4b\xda\xba\x5e\x99\x3d\x16\xe7\xff\x1d\xf1\x9a\x7c\xfd\xe1" +
	"\x49\xbf\xbd\xaf\xdc\xf1\xfd\x74\xdf\xbd\x32\xe4\xc1\xac\x98\xe3\xef\x19\xe2\x08\x3a\x2a\xaf\x7f\x95\x12\x89\x33" +
	"\x79\xbd\xda\x1c\x6a\x22\x7f\x36\xb9\x7f\x26\x3c\xef\xd2\xe0\x03\xa9\x19\xff\x83\x56\xd2\x1d\x49\x89\x9c\xd9\x7e" +
	"\xa9\x58\x0d\xa5\x2a\x42\x36\xc7\xc4\x3c\x09\x6e\xe5\xb6\x45\xc8\x16\xd2\xd1\x73\x58\xb8\xfb\xdc\xf8\x76\x0c\x54" +
	"\xf6\x17\x5a\xc3\x35\xaa\x32\xb0\x32\x32\x92\x5f\xaf\xe0\xba\xa2\xdc\x5c\x38\xfb\x81\x83\xc0\xc2\x4c\x36\x81\xfc" +
	"\xba\x0d\x7a\x3c\xa7\xd8\x7a\xf8\xcc\xf2\x20\xc2\x49\xe4\xa3\x83\xa1\x6f\x55\x1f\x99\x3e\x3e\xff\xc6\x35\x9d\x51" +
	"\xd2\x29\xb3\x4b\xc4\xcc\x16\xe1\x7f\xb8\xa6\x47\x19\x9e\xac\x9e\xa3\x0a\x44\x61\x0c\x8e\x0a\x67\xa2\x3b\x4d\xdb" +
	"\x78\x22\xf4\x1d\x7c\xf0\x53\x45\x6b\x4d\xc1\xf0\x52\xc4\x7f\x04\x6c\xa5\x21\x8b\x56\x9b\x8f\x86\xb8\x6d\x41\x95" +
	"\xbc\x4e\xb5\x7e\x26\x05\x55\x14\xc7\x28\xf1\x85\x71\x9f\x5d\xe3\x66\xda\xf6\xce\x63\x5d\x20\xa5\x45\xc7\x9b\xa1" +
	"\xe7\x0e\x1d\x95\x76\x35\x86\x73\xe6\x85\x19\x27\x4e\x0f\x74\x17\xe0\x45\x41\xbb\x48\xd4\x66\x07\x2a\xe7\xd1\x33" +
	"\x3c\x1c\x5c\x32\xbe\xdd\xbc\xe3\x66\x0c\x4b\x86\x20\x7d\x42\x91\x9f\xaf\x52\xd1\xd0\x05\x05\xf2\x53\x85\x63\x4d" +
	"\xbf\x6d\xaf\x4c\x20\x84\x20\xd6\x94\x72\xc3\x5f\xa8\x68\x30\x33\x72\xe1\x8a\x2c\x65\xb4\x1e\x87\xbb\x3d\xba\xf9" +
	"\x5c\x0f\xf8\x6e\x66\x05\xfb\xd5\x7c\xa0\x4f\xcb\xc4\x17\x66\xe1\xc0\xb0\x05\x59\xe8\xe5\xfe\x2f\x78\xcd\x08\x9e" +
	"\xf2\xf7\xa1\xbc\x64\x9c\x72\xb2\xc7\x65\xa8\xbe\x14\xd1\xb9\xd1\xc6\x0d\xac\xe7\xa5\xc4\x1c\xc7\x5b\x36\xf2\x7c" +
	"\x97\x61\xe7\xc4\xa1\x25\x23\x5f\x0c\xd0\x4a\x66\x60\x73\x55\xf2\x04\x82\x7c\x4e\x07\x27\x35\xcd\xc9\xff\x71\x18" +
	"\x5c\x13\xa6\xae\xbb\x72\x96\xd4\xb4\xb7\xe7\xd5\x98\x9f\xda\x43\xef\x60\x30\xec\x24\x0c\x5b\x64\xc1\xb0\x48\x1f" +
	"\xfc\x6f\x1f\x5f\xbc\xe3\x39\xdc\x8c\x5f\x3c\xd8\x82\xed\x7f\x99\xcc\xbe\x89\x58\x17\xe7\x8e\x0c\x44\xd3\x4c\xd1" +
	"\x80\x5c\xcf\xa3\x6b\xb8\xf9\x1d\xe2\xf8\x5e\x34\x53\x3f\x4b\x1f\x07\x41\xb6\x69\x90\x1d\x58\xb2\xef\x4e\x84\xc8" +
	"\xdf\x8c\x7c\x59\x3c\xde\xb8\xb9\xda\x34\xde\x6c\xae\x91\x1e\x1b\x2d\x2f\x32\x0e\xd8\x31\x33\xe1\x8a\xbc\xaf\x4e" +
	"\x7d\x0d\x70\x82\xcd\xdc\x49\xab\x97\x77\x35\x9b\xfc\x94\xd1\x54\x14\x26\xe4\xbc\x2c\xd6\xab\x44\x7c\x41\x81\xaa" +
	"\xad\xec\x3f\xe2\xc7\x3b\xc4\xb0\x64\x7f\xab\xa4\x9f\xf0\x92\x12\x73\x04\x69\x8e\x6a\x86\xf9\x6d\xf0\xe9\xf1\x43" +
	"\xf8\x46\xe3\xa9\x67\xec\x61\xa2\xbc\x6f\x18\xa7\xa5\xc6\xd0\x3a\xd2\xc5\x8d\x75\xdb\x42\x04\xf2\x44\x96\x97\x2b" +
	"\x18\x53\x38\x1b\xa8\x94\x96\x25\xad\xde\x3f\x3c\xf4\xed\xc5\x7a\x28\xd5\xe8\x87\x49\xac\xec\x4d\x14\xaf\x58\x5d" +
	"\xe4\x1f\xcd\xd9\x7f\x33\xcd\xeb\x05\xf9\x6a\xcc\x72\xd9\x14\x6b\x92\xdf\x88\x54\x12\xae\xe6\x37\x83\xce\x39\xd9" +
	"\x77\x87\x59\x5a\x13\x29\xbb\xdb\xbd\xeb\x26\xa1\xfe\x61\x60\x04\xee\x06\xf2\x86\x2f\xe8\x9a\xb2\x44\xf5\x1e\x1c" +
	"\x80\xe9\x47\x01\xe8\x96\x2b\x3d\x54\x52\x9c\xd9\xd9\xad\x4a\x62\x85\x6a\x22\xa1\x5a\xff\x1f\x00\x00\xff\xff\xf2" +
	"\x7b\x91\x24\x2a\x1f\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 7978,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1550089362, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\x58\x63\x0f\xed\x00\xb6\x31\x28" +
	"\x0a\x2c\x16\x4e\x0e\xf3\x57\xf4\xd2\x16\x9b\xf4\x01\x14\x8b\x63\xab\x6b\x4b\x86\xc4\xec\x34\x30\xfc\xee\x85\x24" +
	"\xff\x24\x19\xdb\x93\x64\x73\x88\x2c\x91\xfc\xf8\x2f\xb1\x69\x22\x48\xee\x72\x45\x87\x1a\xbf\x40\x2e\xa8\xd8\xef" +
	"\xe2\x4c\x55\xc9\xbf\x4c\x1a\xa5\xf3\x24\x57\x24\x2a\xec\x17\x8d\xb5\xd2\x14\x3f\xec\xb3\x6f\x48\x5f\xdd\xe6\x2e" +
	"\x81\xa8\x6d\x83\xa0\x69\x38\xbe\x0a\x89\x10\x7a\x6a\xd8\xb6\x01\x00\xc0\x87\x1a\x48\x55\x49\xae\x22\xbb\x74\xf0" +
	"\x5f\xd1\xec\x4b\xf2\x30\x1d\xbc\x47\xfa\xb4\x73\x67\xf0\x65\x05\xf1\x78\x68\x0a\xf5\xf6\x5c\xd5\x74\xb0\xe7\x1e" +
	"\xe2\xaf\x9a\x84\x92\x26\xf6\x26\xc6\x9b\x9e\xc3\x1a\x6a\xa5\x52\x2e\xbe\x43\x56\x32\x63\x56\xa1\xc7\x0c\xd7\x8e" +
	"\xe0\x21\xc5\x2b\x74\xaa\xe2\x5e\x0c\x8e\x7e\x8e\x41\x69\xf8\x59\x2a\x3a\x65\xdc\xa8\xbd\xce\xf0\x17\x18\x6d\x3a" +
	"\x13\x75\xca\x89\xed\x4a\xec\xd5\xbb\x4d\xc4\x19\x31\xf0\x9f\x8a\xf3\x23\x63\x4e\x05\x0b\x64\x7c\x8e\xa6\xa7\x09" +
	"\xde\xe0\xe4\x0e\xab\x1d\x72\x8e\x1c\x48\x50\x89\x40\x0a\xbe\x21\xd6\xdd\x8e\x49\xee\xb5\x1b\x20\x95\x23\x15\xa8" +
	"\x41\x48\xa8\xb5\x90\x84\x1c\xfe\x7e\x7a\x31\x77\xc9\x84\x2b\x47\x96\x41\xa6\x4a\x53\x33\xb9\x0a\x7f\x0b\x07\xdf" +
	"\x2c\x78\xb8\x1e\x12\x17\x6f\xed\x41\xdb\x8e\xa9\x8c\x37\x75\x29\xe8\xe1\xb0\x3d\xd4\xd8\xb6\x69\x42\xc5\x8c\x7b" +
	"\xc9\x9c\x7f\x8b\x8e\x3b\xbb\xbc\x2d\x9c\x11\x46\x36\x7e\xa8\xad\x45\xe2\xfe\xb3\x84\xf0\x89\x11\x86\x4b\x7a\x2f" +
	"\x01\xd9\x10\xd3\xf4\xc3\x28\xcf\x92\x5f\x83\x61\xdb\xf1\xbd\x3b\x7b\xcd\x6c\xe1\x5f\x05\x54\x44\x6f\x82\xe3\x08" +
	"\xf2\xa7\x22\x34\x8b\x08\x0b\xc9\x48\x16\x4b\x74\xa7\xf8\x61\x9a\xd6\x34\x9a\xc9\x1c\x87\x6e\x7a\xd1\xac\x42\xd3" +
	"\x2d\x8b\x85\xb7\x90\x7d\xcf\xc0\x7b\x4f\x8d\xcd\x53\xc4\xd9\xc1\xfa\xfa\xaa\x74\xc5\xc8\xe6\x1f\x62\x97\x40\xe7" +
	"\xf0\x8c\xe5\xb3\x60\x36\x0b\x23\xda\x56\x54\x37\xa3\xa9\xba\x03\x5b\x14\x81\xfe\xf6\x89\xff\x30\x1b\x52\x75\x8d" +
	"\x7c\x21\x38\x93\x52\x42\xe6\x25\x3e\xb1\xa9\x8b\x69\x5e\xf6\xd8\xbf\x67\x79\xb9\x4e\x2c\x0d\xde\xa0\xc8\xa6\xe5" +
	"\x06\x65\x17\xf1\x5e\xc2\x77\x55\xee\xfa\x1a\xa8\x84\xec\xfb\x0f\xe2\xfe\xeb\xca\x3a\x90\xae\xf7\xd6\x4d\x13\xbb" +
	"\x2e\xfc\x48\x7a\xbe\x11\x97\xbc\x4c\x93\x85\x46\x4c\xe9\x55\x29\x1a\xea\x72\xbf\x23\x45\xac\x9c\x7d\x90\x74\xcf" +
	"\xa9\xd5\x5b\xf4\x01\x37\x9c\x3f\x14\xbf\x8e\x97\xce\xd6\xc9\x5d\x71\x6d\x65\xaa\x1c\xf4\x81\x4d\x81\xfb\x3b\x32" +
	"\x61\x26\x21\xf1\xef\x48\xcf\xff\xb1\x8c\x2e\xd0\xb5\xbe\xf1\x0a\xb4\x11\x7c\x4f\x4c\x13\xf7\xc2\xae\xcf\x46\x89" +
	"\xd3\x3c\x4d\xb6\xcc\xf1\xb4\x32\xf7\xa4\xa6\x09\x17\xdf\xcf\xb1\x4f\xef\xd4\xc7\x42\x94\xdc\x4f\x55\x53\x57\x6a" +
	"\xd3\x10\x56\x75\x69\x6f\xc4\x7e\x84\x1b\xa6\xac\x05\x73\x87\x7d\x67\x41\x7f\x14\x5c\x33\xf8\x15\x54\x95\x7e\x72" +
	"\x4b\xba\xd1\xad\x9b\xfb\x9a\xe6\x93\xaa\xc9\xbc\x9b\xec\xc0\x6a\x48\x7f\xe2\x2a\xb3\xf0\x60\xe5\xd7\x41\x6a\x17" +
	"\x28\x99\xcc\x57\x61\xd3\xb8\x8f\x07\x66\x10\xda\x36\xb4\xc4\xe1\x61\x4a\x2b\x24\x06\x59\xc1\xb4\x41\x5a\x85\xff" +
	"\x6c\x5f\xa2\xcf\x5d\xcd\x36\xcd\x9b\xa0\x02\x9c\xd2\xf8\x71\x6f\x48\x55\x5d\x80\x83\xb1\x30\xec\x81\xed\x51\x57" +
	"\x42\x6e\x13\x1c\x07\x23\x38\x8f\x66\xa6\xaa\x4a\xc9\xc7\xcd\x66\x9c\x89\x8f\x88\x4e\x49\x47\x4c\x13\x6f\x65\xea" +
	"\x1b\x34\x98\x33\x07\xfa\x98\x17\xf7\xbd\x21\xc5\xfd\x49\xec\xdf\xc9\x3d\xa1\xc9\xb4\x70\xd1\x1b\xa4\xeb\x61\x22" +
	"\x19\x89\x61\x0f\x58\x9f\xe0\xd9\x91\xd8\xa1\xd9\x59\x7a\xb3\xaf\x2a\xa6\x0f\x30\xe1\x4e\x47\x0a\xa1\x9b\xe2\x5d" +
	"\x0e\x07\x94\x89\x0a\x1b\xd8\xd2\xc4\x3b\x9d\xba\x6a\x58\xff\x1f\x00\x00\xff\xff\x42\x08\x63\x62\x9a\x0c\x00\x00" +
	"")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3226,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139854, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
