// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x79\x6f\xdb\x38\x16\xff\xbf\x9f\xe2\xc1\x83\x01\x9a\xc2\x92\x73" +
	"\xb4\x45\xab\x66\x82\xed\xa4\xed\x4e\x81\x06\xbb\xa8\x67\x3e\x00\x25\xd2\x12\x1b\x1e\x02\xf9\x1c\xc7\x35\xfc\xdd" +
	"\x17\xd4\x61\x4b\x14\x65\x3b\xd9\xc1\x24\x40\x24\x91\xef\xfa\x3d\xbe\x83\x64\x36\x1b\xca\x16\x5c\x31\x98\x48\xad" +
	"\xd8\xfa\x1b\xb7\x38\xd9\x6e\x5f\x00\x00\x6c\x36\x86\xa8\x9c\x41\xdc\x7c\xd7\x63\x0b\x6d\x24\xc1\x3b\x47\xec\x66" +
	"\xae\x53\x73\xd3\x50\x33\x45\xb7\xdb\x17\xed\xf3\xc5\x5e\x32\x1a\x92\xdd\x33\xfa\x55\x2d\xf4\x5e\xf6\x8a\x63\xe1" +
	"\x89\x8e\x60\xf6\x2a\xd7\xb8\x2e\x59\x02\x39\xc7\x62\x99\xc6\x99\x96\xb3\x1f\x44\x59\x6d\xf2\x19\x6a\x39\xcb\x75" +
	"\xe4\x1e\x94\x20\xfb\x93\x4b\x16\xbb\x3f\x9f\x15\x9a\xf5\x9c\x19\xce\xec\xab\x19\x44\x3d\x91\xb3\x57\x9b\x8d\xe4" +
	"\xea\xd3\xd2\x10\xe4\x5a\x41\x7c\xc7\xd5\x76\xfb\x6a\x76\x84\x88\x3c\x0e\x88\x7a\x04\x1f\x1f\xf2\x1d\x90\x51\xd8" +
	"\xf3\xa5\x94\xc4\xac\xf7\x90\x8f\xe0\xcb\x35\x72\xc9\xda\x87\x61\xa5\x36\x18\x7f\x67\x76\x29\xf0\xf7\x65\x76\xcf" +
	"\xb0\x41\x57\x49\xbb\x46\x92\x0a\x06\x99\x20\xd6\xfe\x36\xb1\x8d\xaa\x9b\x9d\xc1\xd7\x98\x6a\xba\xbe\xe9\x00\xe0" +
	"\x8b\xf8\xab\xfd\xaf\xd1\x3f\x58\xd6\xc8\xeb\xe0\xab\x59\xcc\x4d\x6f\xa0\x1e\xa4\x37\x9b\x0d\xbf\x78\xa7\x60\xd2" +
	"\x30\x4f\xb6\xdb\xeb\x19\xd2\x20\x6d\x6b\x10\x72\x14\x6c\x72\xb3\xd9\xc4\x7f\xba\xb7\x10\xc7\xf5\xac\xab\xaf\xf5" +
	"\x5f\xd7\x5e\x50\x1a\xa1\xf6\xc3\x7f\x4a\xe7\x78\x1b\x7f\xaf\xbd\xf2\x89\x20\xfb\xc2\x05\x32\xf3\xdd\x85\x68\xfc" +
	"\x59\x96\xb8\x86\xa7\xe2\x71\xc1\x03\x55\x8c\x27\xa7\x61\x92\x2c\xaa\xc8\x1d\xb0\x93\xec\xba\xe3\x8a\x4b\x22\xe6" +
	"\x68\xb8\xca\x4f\x72\x82\xb0\x0c\x1a\xe4\x95\xb4\x0e\xbe\x7f\x14\x5e\x47\xf9\xd3\x41\xf4\x56\x72\x60\x67\xcf\xc6" +
	"\xba\x34\x80\x53\x1e\xb6\xd2\xb3\xd0\xd9\xd6\x4b\xc5\xf6\x2d\xfe\xb7\x0b\xe8\x3e\xbf\x6f\x18\x5f\x78\xe1\x34\x2f" +
	"\xf4\xea\xf3\x23\xc9\xb0\x95\x62\x9f\x1c\x44\x15\x3b\xe0\x51\x1c\x4f\xc5\x52\xc9\x7d\x66\xde\x10\x45\x03\x40\x5b" +
	"\x5f\xc7\x7f\x10\xfb\x89\x70\xb1\x6e\x06\x9e\x8a\xb8\xe2\x7d\x2e\xe2\x01\x45\x6d\x34\x32\x59\x0a\x82\x5e\xb3\x00" +
	"\xe7\x88\x03\xa6\x36\xee\xf8\xbb\x1c\xf4\x97\x1a\xb8\x68\x37\xf4\x3c\x27\x2d\xd5\x3f\xeb\xa6\x31\x73\x9f\xe3\xa8" +
	"\xeb\x59\xa7\x85\x5c\xcf\xaa\x7e\x73\x13\xea\x73\x99\x96\x52\xab\xdb\xf9\xbc\xed\x74\xd7\x16\xd7\x8e\xb6\x95\x94" +
	"\x18\xad\x11\x36\x3d\xdd\x51\xb4\xd0\x0a\x23\xcb\x7f\xb2\x04\x2e\x2e\x4b\xfc\x10\x9a\x5e\x10\xc9\xc5\x3a\x81\x89" +
	"\x5d\x5b\x64\x32\x5a\xf2\xc9\x14\x22\x52\x96\x82\x45\xf5\xd0\x14\x7e\x17\x5c\xdd\xdf\x91\x6c\x5e\x7d\x7f\xd1\x0a" +
	"\xa7\x30\x99\xb3\x5c\x33\xf8\xeb\xeb\x64\x0a\xdf\x75\xaa\x51\x4f\xe1\x0f\x26\x1e\x18\xf2\x8c\x4c\xe1\xa3\xe1\x44" +
	"\x4c\xc1\x12\x65\x23\xcb\x0c\x5f\x4c\x61\xf2\xd1\x09\x85\x5b\x2d\xb4\x81\xcf\x52\xff\x70\x9a\x76\x62\x02\x23\xf3" +
	"\xb5\x4c\xb5\x98\xf8\x66\x57\x55\xb4\x6f\xfb\xb7\x65\xc6\x29\x81\x5b\xad\xac\x16\x6c\x32\x85\x3b\xad\x48\xa6\xa7" +
	"\x20\xb5\xd2\xb6\x24\x19\x1b\x17\xb2\x62\x3c\x2f\x30\x01\xe5\x76\x5d\xe2\xc3\x0b\x8f\x30\x73\xe6\x26\x90\x0a\x92" +
	"\xdd\xfb\x42\xd2\xbc\x9d\x5e\x15\x1c\x03\x3a\x50\xb0\x96\xe2\x97\xab\x8b\xb7\x6f\xd2\xd7\x3e\x8d\xd1\xab\x48\x53" +
	"\xba\xa3\x62\xd5\x8f\x4f\x55\xcd\x46\x4b\xb5\xb4\x8c\x26\xf0\xcb\xbb\xf7\xee\x77\x60\x8d\x36\x94\x99\x86\x56\xd4" +
	"\xa0\x1e\x88\x79\xd9\x67\x3f\x1b\x20\xac\xc2\x2e\x5a\x71\x8a\x45\x02\x17\xe7\xe7\xbf\x0e\x70\x54\x04\x94\x20\x39" +
	"\x4e\x85\x45\x0b\xa5\xa3\xfa\x6c\x94\x36\xcd\x7b\xd4\xad\x43\xc7\x19\xda\xd5\x4a\xb5\xa0\xa3\x44\x6e\x5d\xeb\xb0" +
	"\x3f\x8f\xdf\x19\x26\x07\x90\x9b\xcd\x5c\xcf\x65\xad\x0d\xbd\x15\xe9\x18\xb2\xdd\x0b\x29\x50\x0a\x2f\xd9\x3a\xa9" +
	"\x56\x8b\xd9\x0d\x78\x58\x8e\x7a\x27\x25\xd9\x7d\x6e\xf4\x52\xd1\xe8\x14\xdf\xf4\x12\xa1\xa3\xba\x1e\xf2\x57\x1b" +
	"\xd9\x23\x46\x86\x29\xca\xdc\x4e\x23\x01\x5d\x22\x97\xfc\x27\xfb\xc6\x72\x9e\x72\xc1\x71\x1d\x04\x5c\xef\x84\xfb" +
	"\x88\x9b\x50\xa8\x55\x76\x62\xc8\x87\xb3\x73\xb1\x20\xa5\x65\x09\xb4\x6f\x3d\x45\x7b\x4d\xc5\x14\x90\x7a\xaa\x04" +
	"\x57\x2c\x2a\x9a\x95\xbf\x88\x2f\xdf\x54\x6b\xda\xa5\x28\x09\xa5\x15\xa0\xf3\x7a\x16\x2e\x06\x24\xdd\x62\x18\x9e" +
	"\xf4\x2b\x41\xc8\x11\x45\x5c\x65\xb5\x33\xb2\x7e\xf3\x4c\x1d\x18\x72\x3e\x22\xc7\xf7\xa6\x2b\x20\x51\x55\xaa\x9c" +
	"\x01\x2b\x43\xca\x0f\xc3\x95\x23\x82\xe7\x2a\x01\xc1\x16\x5e\x31\x7f\x60\xc6\xd5\x5d\xd1\x52\xa4\x1a\x51\xcb\xb0" +
	"\x6a\xdf\xbb\x3e\x2f\xea\x72\xc4\x66\x46\xe8\xd0\xf2\xb1\x78\xf5\x73\xfc\x50\x1e\xf4\x6b\x47\x28\xc2\xbb\xa9\x35" +
	"\xc8\xf3\x10\x43\xbb\x98\x1e\x4b\x3d\x1c\x4e\xeb\x78\x5f\xe8\x8e\xc7\xfa\xbe\x1c\x1e\x14\xa6\x29\x05\x34\x89\x72" +
	"\xd8\x0a\x2e\xe8\xcb\x4b\x15\x5d\x9c\x01\xd2\x69\x8f\xc2\x6d\x03\x82\x74\xa7\x7a\xfb\x84\xaa\xd5\xe8\x93\x04\x0d" +
	"\x7f\x04\xa4\x89\xd2\xf8\x32\x11\xc4\x62\xad\xf2\x6c\xea\x93\x14\x03\x92\x70\xb4\x47\xa6\x49\xcd\x5e\x5e\x75\x55" +
	"\xd7\x12\xa3\x50\xc6\x8c\xb6\x94\x2a\xe2\xf5\x03\x33\x0b\xa1\x57\x09\x30\x21\x78\x69\xb9\xed\x13\xb5\xf3\xd1\x63" +
	"\x02\x05\xa7\x94\xa9\xc3\x89\x21\x39\xa5\x82\x8d\xf8\xa7\x70\x0b\x3a\xb0\xaf\x9f\x99\xfd\xd2\xd0\x01\xf0\xfe\xfd" +
	"\xaf\x61\xb1\x95\xe6\xc8\xe5\xac\x27\x79\x3c\xa5\x87\xec\x95\x87\x0f\xf0\x57\xf3\x23\xb0\x02\x4e\xef\x67\xdf\x7e" +
	"\x9f\x72\x28\x93\x86\x2d\xb7\x5b\x52\xe3\xab\xd1\xc5\x4f\xab\xab\x10\x0b\x37\x61\x5b\x7a\x52\xde\x8e\x4a\x69\x7a" +
	"\x76\x38\x7a\xc8\x12\x75\xa8\xef\x24\x70\x55\x3e\x82\xd5\x82\xd3\x06\x6c\xa8\xf5\x7b\xa8\x25\x31\x39\x57\x09\x9c" +
	"\xc3\x39\x5c\x8d\xd7\xf0\x9d\x45\x83\x8a\xba\x6b\x02\xf1\x9b\x03\x70\x52\xd4\x48\xfc\x7d\x44\xad\x3b\x42\x5d\x1e" +
	"\x4a\x27\x97\xed\x3b\x01\xae\x65\x7a\x23\xbe\x41\x0d\xd8\x5a\xaa\xe7\x90\xe1\xb6\x71\xa4\x7c\x64\x5a\xec\x54\x4c" +
	"\xfb\x9f\x61\x75\x2e\xa6\xff\x0f\x7d\xd5\x6d\xa9\xab\x49\x5c\x06\x43\xa6\xbf\xe9\xf1\x4f\x05\x27\xf4\x04\xef\x08" +
	"\x70\x36\xde\x70\xbd\xec\x82\x63\x0d\x7b\x00\x23\x72\xbd\x93\x99\x06\x4d\xf3\x75\x7a\x3a\x1f\x55\x38\x80\xd8\x4f" +
	"\xd6\x7e\x39\x90\x6c\x6c\xe1\x4e\x28\x0b\x03\x51\xcf\x94\xf3\x04\x8b\xeb\xfa\x11\x4c\x94\x3a\x49\x2f\x0f\x25\x29" +
	"\x12\x83\x11\x25\x2e\x92\xea\x77\x67\x75\xf5\xa1\xcb\x28\x10\x5b\x92\xab\xf6\x98\xf3\x76\xb0\x4f\x3c\x79\xd5\x95" +
	"\x46\x66\xa7\x10\x53\x66\x33\xc3\xab\x1b\x10\xff\x78\x2e\x6d\x54\xac\xcb\x82\x29\x1b\xaa\x5f\xd1\x8a\xa5\xf7\x1c" +
	"\x0f\x91\x8c\x4c\x75\xcd\xa0\xcd\x75\x57\xf4\x93\x19\x7d\x68\x91\xbc\x23\xe2\x5e\x16\x54\x57\x13\xcd\x75\x43\xfd" +
	"\x55\x7d\x80\x64\x94\x93\xdf\x26\xa5\xe1\x0a\x3b\xb7\x29\xff\x2a\x49\x3e\x70\x69\xb3\x56\x97\xe7\x32\x5c\xd0\xaa" +
	"\xed\xcf\xc9\xb7\x17\xdd\x93\xd8\xc5\x81\x66\xf2\x6e\x8c\xe9\x72\x0a\xc5\xd5\x14\x8a\xd7\x07\x98\x5f\x8f\x30\x1f" +
	"\x38\x0a\x0d\xb7\x30\xce\x17\x51\x6a\x18\xb9\x8f\xb8\xb2\x9c\xb2\x04\xc8\x83\xe6\xe1\x38\x47\xbf\x20\x1c\xe7\xf6" +
	"\xa8\xc8\x02\x5d\xcb\x1b\x0d\x87\x7a\x07\x3f\xaa\x24\x65\x0b\x6d\x4e\x56\x72\x90\xe8\x80\xbd\x94\xdb\x52\x90\x75" +
	"\x52\x7b\xb2\x29\x85\x91\xdb\xd3\x8e\x1c\x3b\x02\xc1\xf1\x37\x19\xdd\xd5\xb2\x18\x5e\xa0\x3d\x59\xcb\xe9\xa8\x5d" +
	"\xbb\x1e\x40\x86\x6e\xaa\x85\x6e\x01\x97\x16\xb5\xec\xdc\x02\x36\xff\xe2\xeb\x5f\xb3\xde\xb6\x54\xdd\x8b\x46\xef" +
	"\xba\xb0\x66\x8e\x7b\x57\x91\x1d\x92\x9d\xee\xe3\x4a\xbe\x70\xc1\x8e\x2a\xe2\xca\x9d\xe0\x6f\xe7\x73\x38\xaa\xb2" +
	"\x79\xfe\x2f\x00\x00\xff\xff\xab\x89\x30\xa3\x34\x1d\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 7476,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1561197023, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\xcc\x0a\x39\xa4\xc5\x4a\x42\x6e" +
	"\x45\xa1\xf8\xd0\x64\xbb\x28\xb0\x0f\x20\x49\xf7\xb0\x37\x5a\x62\x2c\x6e\x25\xd1\x2b\x52\x4d\xbd\x82\xff\xfb\x82" +
	"\x2f\x89\x92\x28\x5a\x4e\x1c\xb4\xbe\xd8\xe2\x63\x66\xf8\xcd\x83\xdf\xc8\x6d\x1b\x42\xfc\x76\x4b\xf9\x7e\x87\xdf" +
	"\xc3\x96\xf0\xbc\xd9\x44\x29\x2d\xe3\x7f\x50\xc5\x68\xbd\x8d\x39\x2d\xe3\x2d\x0d\xc5\x57\x8d\x77\xb4\xe6\xd1\x1d" +
	"\x66\x4d\xc1\x3f\x34\xe9\x17\xcc\xdf\xc6\x10\x1e\x0e\xab\x55\xdb\x66\xf8\x91\x54\x18\x82\x07\xb4\x29\xb0\x9a\x0c" +
	"\x0e\x87\x15\x00\xc0\x79\x74\x28\x49\x17\x1b\x39\x06\xef\xaf\x21\xea\x07\x59\x4e\x9f\x7e\xf9\x86\x52\x39\xae\x44" +
	"\xfc\xb9\xe3\x84\x56\x2c\xba\x37\x53\xb7\x4d\x8d\xe4\x10\x08\x83\x4f\xb5\x2b\xe7\x65\xa1\x04\xc7\x5a\xf2\xd0\x2c" +
	"\xba\xe3\x6c\xa2\xbc\xd3\x94\x70\x81\x0a\xa4\x05\x62\xec\x3a\x90\x0f\x21\xcd\xb2\x60\x2d\x67\xd5\x8a\x1c\xa3\xcc" +
	"\x7e\xae\xfb\x07\xbd\xa0\xdb\x9f\x87\x4f\x24\xc3\xc1\x3a\x61\x3b\x54\x75\xa3\x84\x17\x38\x58\xb7\x6d\xf4\x20\x7e" +
	"\x1d\x0e\x49\x2c\xa6\xd7\x49\xcc\xf3\xa1\xa8\xb6\x25\x8f\x20\x2d\x96\xe8\xdc\xa3\x02\x33\x7d\x92\x19\x8d\x25\xad" +
	"\xf0\x3e\x14\x16\xe2\x5a\xa8\x20\x57\xef\x2a\x08\xe4\xc6\x40\x28\xe2\xf9\x1a\xda\x16\x57\xd9\x48\xcc\x48\xd3\xe7" +
	"\xea\xa1\x46\xe9\x17\x3c\x5e\x36\x3e\x1f\x29\xf1\x44\xd9\x2d\x22\xc5\x1e\x9a\x2a\xe4\x4a\x84\xd1\x3b\xd2\x77\xd4" +
	"\x86\x97\x5a\x70\xaa\xfa\xa3\x52\x75\x58\xce\x08\x14\xb6\x77\xd1\xed\x30\x7a\xa1\x2f\x17\xf9\x53\x65\x10\xb3\xbd" +
	"\xea\xd0\x37\x3d\xe2\x92\x63\x2a\xd9\x99\xff\xb0\x43\xd1\x49\x6c\xe7\x80\x58\x3f\xca\x90\x0d\xcd\xf6\xfd\x73\xdb" +
	"\xd6\xa8\xda\x62\xd0\x15\x22\xba\xc9\x49\x91\xa9\x0a\x32\x46\x64\x92\x5c\x6a\x30\x1b\x24\x0f\xcf\xd6\xab\xe7\xc2" +
	"\x9d\xf0\x6c\x00\xb5\xc0\x81\xe3\x72\x57\x20\x8e\x41\x0d\xfd\x46\x18\x0f\x20\x92\x12\xa2\x3b\xda\x54\x99\x08\x4a" +
	"\xa5\x76\x29\xe8\x27\xa5\x57\x66\xfb\x67\x68\x90\x8e\xe9\x4f\xd5\x23\x0d\x20\xfa\x15\x73\x19\xea\x96\xb8\x17\x99" +
	"\x75\x56\xa3\x16\x9a\xb4\x44\x55\x49\x2a\x93\x7c\x10\x99\x5f\x42\xd1\x11\xef\xfb\xd2\xd1\x71\x7c\x7f\x4a\x9e\x16" +
	"\x27\x5a\xad\xfb\xec\x3e\x97\x9c\x0a\x81\x57\x91\xb3\xcc\x0d\x92\xd5\x91\xca\xc3\x64\x4d\xf8\x23\xa5\x7c\x70\xdd" +
	"\x19\xdb\x6a\xfa\x14\xb2\x66\xc3\x29\x47\x45\x30\xb9\x03\xbb\x82\xf2\x20\xe7\xe7\x8b\xa6\x17\xff\x71\x29\x84\x71" +
	"\x41\x74\x3a\xc1\x54\x96\x69\xce\x0a\xb3\x96\xdf\x7e\xb0\xf8\x8a\x98\xc9\x06\x63\x88\x3b\x53\x9f\x7d\x27\x9e\xdd" +
	"\xae\x13\xad\x1a\xe9\x83\x91\x52\x3b\x58\x8d\xa6\x49\xda\xbe\xd6\x05\x7a\x8e\x88\xe9\x93\xca\x1d\x2f\x67\xc0\xc0" +
	"\x56\x71\xda\xe5\xda\xe7\x63\x12\x4b\x82\xba\x5e\x75\xc5\xb4\x67\xf7\xbf\x23\x5e\x93\x6f\x3f\x3c\xbd\xb7\xf7\x95" +
	"\x3b\xbe\x9f\xee\xbb\x53\x86\xdc\x9b\x15\x3e\xa6\x9e\x21\x8e\xa0\x23\xed\xfa\x57\x29\x91\x78\x26\x83\x57\x9b\x43" +
	"\x4d\xd9\x9f\x4d\xe3\x9f\x08\xcf\xbb\x30\xf8\x48\x6a\xc6\xff\xa0\x95\x3c\x8e\x24\x3f\xce\x68\x3f\x97\xaf\x86\x52" +
	"\x15\xf5\xf2\x71\xae\x99\x00\xb7\x62\xdb\xa2\x5e\x0b\x89\xe7\x73\xf8\xb6\xfb\xde\x78\x3d\xae\x29\xeb\x0b\xad\xe1" +
	"\x12\x55\x19\x58\x11\x19\xc9\xaf\x37\x70\x59\x51\x6e\x1e\x9c\xf5\xc0\x41\x55\xc1\x13\x4d\x20\xbf\xae\x83\x1e\xcf" +
	"\x29\xb6\x33\xd4\x61\xb9\x13\xc1\x45\x27\x66\x57\x76\x30\xf4\xa5\xea\x13\xd3\xd7\xe7\xdf\xb8\xa6\x1e\x25\x9d\x32" +
	"\x3b\x45\x4c\x17\x11\xfe\x87\x6b\x7a\x94\xc9\xc9\xec\x39\xaa\x40\x24\xc6\xe0\xaa\x70\x06\xba\xd3\xb4\xcd\x8c\x87" +
	"\xbe\xc3\x19\xe6\xc9\x9f\xb5\xa6\x60\x78\x29\xe2\x3f\x02\xb6\xd2\x90\x45\xab\xcd\x47\x43\xdc\xb6\xa0\x52\x5e\x87" +
	"\x5a\xdf\x7d\x82\x4a\x8a\xe3\xec\xf7\xac\xb8\x7b\xd7\x1c\xa7\xf4\xc7\xaa\x40\x4a\x8b\x8e\x37\x43\xcf\x1d\x3a\x2a" +
	"\xed\x2a\x0c\xb3\xe6\x78\xfd\xee\xd9\x75\xaa\xa3\x3b\x07\x2f\x72\xda\x59\xbc\xe6\x6d\x91\x9c\x57\xcf\xf0\x72\x70" +
	"\xc9\x78\xbd\x7e\xc7\xcd\x18\x96\x34\x41\xfa\x86\x22\x3f\x5f\xa4\xa2\xa0\x0b\x0a\x34\x4f\x15\x8e\x15\xfd\xb6\xbd" +
	"\x30\x8e\x10\x82\x58\x53\xca\x0d\x7f\xa1\xa2\xc1\xcc\xc8\x85\x0b\xb2\x94\xd1\xce\x1c\xb8\xdb\xa3\x8b\xcf\xe5\x80" +
	"\xef\x66\x96\xb3\xdf\xf8\x1d\x7d\x5a\x24\xbe\x30\x0a\x07\x86\x2d\x88\xc2\x59\xee\xff\x82\x17\x8a\x30\x93\xfe\x73" +
	"\x28\x2f\x69\xa7\x9c\xec\x71\x19\xaa\x2f\x45\xd4\xd7\xda\xb8\x81\x9d\x79\x29\xe1\xe3\x78\xcb\x5a\x9e\xef\xd2\xec" +
	"\x9c\xd8\xb4\x64\xe4\xab\x01\x5a\xc9\x0c\x6c\xae\x4a\x1e\x41\x90\xcf\x69\xe3\xa4\xba\x39\xf9\x8f\x0d\x83\x4b\xc2" +
	"\xd4\x73\x97\xce\x92\x9a\xf6\xf6\xbc\x19\xf3\x53\xbb\xe9\x1d\x34\x86\x9d\x84\x61\x89\x2c\x18\x16\xe1\x83\xff\xed" +
	"\xfd\x8b\x77\x3c\x87\xab\xf1\x8b\x07\x5b\xb0\xfd\x7f\x92\xd9\x37\x11\xeb\xe2\xdc\x91\x81\x68\x1a\x29\x1a\x90\x4b" +
	"\x3f\xba\x86\x9b\xdf\x22\x8e\xef\x44\x31\x9d\x67\xe9\x63\x27\xc8\x32\x0d\xb2\x02\x4b\xf6\xdd\x89\x10\xf1\x9b\x91" +
	"\xaf\x8b\xdb\x1b\x37\x57\x9b\xfa\x9b\xf9\x0a\xe9\xb1\xd6\xf2\x2c\xed\x80\xed\x33\xe3\xae\x68\xf6\x0d\xe9\x5c\x01" +
	"\x9c\x60\xe3\xbb\x69\xf5\xf2\x2e\x67\x93\x9f\x32\x9a\x8a\xc4\x84\x9c\x97\xc5\x7a\x95\x88\x2f\x28\x50\xb5\x95\xf5" +
	"\x47\xfc\xf8\x80\x18\x96\xec\x6f\x95\xf4\x1d\x5e\x52\x62\x8e\x20\xcd\x51\xcd\x30\xbf\x0e\x3e\x3f\x7c\x0c\xdf\x69" +
	"\x3c\x75\x8f\x3d\x0c\x94\x9b\x86\x71\x5a\x6a\x0c\xad\x2b\x5d\x0c\xac\xdb\x16\x22\x90\x37\xb2\x7c\x5c\xc1\x98\xc2" +
	"\xd9\x40\xa5\xb4\x2c\x69\x75\x73\x7f\xdf\x97\x17\x6b\x52\xaa\xd1\x93\x49\xac\xec\x4d\x14\xaf\x58\x9d\xe5\xbf\x4b" +
	"\xef\xff\x96\xe6\xf5\x82\x7c\x35\x66\x1d\xd9\x24\x6b\x92\x5f\x89\x50\x12\x47\xcd\xaf\x06\x95\x73\xb2\xef\x16\xb3" +
	"\xb4\x26\x52\x76\xb7\x7b\xd7\x75\x42\xfd\x64\x60\x04\xee\x06\xf2\x86\x2f\xe8\x9a\xb2\x44\xf5\x1e\x1c\x80\xe9\xa9" +
	"\x00\x74\xc9\x95\x27\x54\x52\x9c\xd1\xd9\xad\x4a\x62\x85\x6a\x22\xa1\x5a\xff\x1f\x00\x00\xff\xff\x3a\x98\x3f\x22" +
	"\x14\x1f\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 7956,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1561197324, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\x58\x63\x0f\xed\x00\xb6\x31\x28" +
	"\x0a\x2c\x16\x4e\x0e\xf3\x57\xf4\xd2\x16\x9b\xf4\x01\x14\x8b\x63\xab\x6b\x4b\x86\xc4\xec\x34\x30\xfc\xee\x85\x24" +
	"\xff\x24\x19\xdb\x93\x64\x73\x88\x2c\x91\xfc\xf8\x2f\xb1\x69\x22\x48\xee\x72\x45\x87\x1a\xbf\x40\x2e\xa8\xd8\xef" +
	"\xe2\x4c\x55\xc9\xbf\x4c\x1a\xa5\xf3\x24\x57\x24\x2a\xec\x17\x8d\xb5\xd2\x14\x3f\xec\xb3\x6f\x48\x5f\xdd\xe6\x2e" +
	"\x81\xa8\x6d\x83\xa0\x69\x38\xbe\x0a\x89\x10\x7a\x6a\xd8\xb6\x01\x00\xc0\x87\x1a\x48\x55\x49\xae\x22\xbb\x74\xf0" +
	"\x5f\xd1\xec\x4b\xf2\x30\x1d\xbc\x47\xfa\xb4\x73\x67\xf0\x65\x05\xf1\x78\x68\x0a\xf5\xf6\x5c\xd5\x74\xb0\xe7\x1e" +
	"\xe2\xaf\x9a\x84\x92\x26\xf6\x26\xc6\x9b\x9e\xc3\x1a\x6a\xa5\x52\x2e\xbe\x43\x56\x32\x63\x56\xa1\xc7\x0c\xd7\x8e" +
	"\xe0\x21\xc5\x2b\x74\xaa\xe2\x5e\x0c\x8e\x7e\x8e\x41\x69\xf8\x59\x2a\x3a\x65\xdc\xa8\xbd\xce\xf0\x17\x18\x6d\x3a" +
	"\x13\x75\xca\x89\xed\x4a\xec\xd5\xbb\x4d\xc4\x19\x31\xf0\x9f\x8a\xf3\x23\x63\x4e\x05\x0b\x64\x7c\x8e\xa6\xa7\x09" +
	"\xde\xe0\xe4\x0e\xab\x1d\x72\x8e\x1c\x48\x50\x89\x40\x0a\xbe\x21\xd6\xdd\x8e\x49\xee\xb5\x1b\x20\x95\x23\x15\xa8" +
	"\x41\x48\xa8\xb5\x90\x84\x1c\xfe\x7e\x7a\x31\x77\xc9\x84\x2b\x47\x96\x41\xa6\x4a\x53\x33\xb9\x0a\x7f\x0b\x07\xdf" +
	"\x2c\x78\xb8\x1e\x12\x17\x6f\xed\x41\xdb\x8e\xa9\x8c\x37\x75\x29\xe8\xe1\xb0\x3d\xd4\xd8\xb6\x69\x42\xc5\x8c\x7b" +
	"\xc9\x9c\x7f\x8b\x8e\x3b\xbb\xbc\x2d\x9c\x11\x46\x36\x7e\xa8\xad\x45\xe2\xfe\xb3\x84\xf0\x89\x11\x86\x4b\x7a\x2f" +
	"\x01\xd9\x10\xd3\xf4\xc3\x28\xcf\x92\x5f\x83\x61\xdb\xf1\xbd\x3b\x7b\xcd\x6c\xe1\x5f\x05\x54\x44\x6f\x82\xe3\x08" +
	"\xf2\xa7\x22\x34\x8b\x08\x0b\xc9\x48\x16\x4b\x74\xa7\xf8\x61\x9a\xd6\x34\x9a\xc9\x1c\x87\x6e\x7a\xd1\xac\x42\xd3" +
	"\x2d\x8b\x85\xb7\x90\x7d\xcf\xc0\x7b\x4f\x8d\xcd\x53\xc4\xd9\xc1\xfa\xfa\xaa\x74\xc5\xc8\xe6\x1f\x62\x97\x40\xe7" +
	"\xf0\x8c\xe5\xb3\x60\x36\x0b\x23\xda\x56\x54\x37\xa3\xa9\xba\x03\x5b\x14\x81\xfe\xf6\x89\xff\x30\x1b\x52\x75\x8d" +
	"\x7c\x21\x38\x93\x52\x42\xe6\x25\x3e\xb1\xa9\x8b\x69\x5e\xf6\xd8\xbf\x67\x79\xb9\x4e\x2c\x0d\xde\xa0\xc8\xa6\xe5" +
	"\x06\x65\x17\xf1\x5e\xc2\x77\x55\xee\xfa\x1a\xa8\x84\xec\xfb\x0f\xe2\xfe\xeb\xca\x3a\x90\xae\xf7\xd6\x4d\x13\xbb" +
	"\x2e\xfc\x48\x7a\xbe\x11\x97\xbc\x4c\x93\x85\x46\x4c\xe9\x55\x29\x1a\xea\x72\xbf\x23\x45\xac\x9c\x7d\x90\x74\xcf" +
	"\xa9\xd5\x5b\xf4\x01\x37\x9c\x3f\x14\xbf\x8e\x97\xce\xd6\xc9\x5d\x71\x6d\x65\xaa\x1c\xf4\x81\x4d\x81\xfb\x3b\x32" +
	"\x61\x26\x21\xf1\xef\x48\xcf\xff\xb1\x8c\x2e\xd0\xb5\xbe\xf1\x0a\xb4\x11\x7c\x4f\x4c\x13\xf7\xc2\xae\xcf\x46\x89" +
	"\xd3\x3c\x4d\xb6\xcc\xf1\xb4\x32\xf7\xa4\xa6\x09\x17\xdf\xcf\xb1\x4f\xef\xd4\xc7\x42\x94\xdc\x4f\x55\x53\x57\x6a" +
	"\xd3\x10\x56\x75\x69\x6f\xc4\x7e\x84\x1b\xa6\xac\x05\x73\x87\x7d\x67\x41\x7f\x14\x5c\x33\xf8\x15\x54\x95\x7e\x72" +
	"\x4b\xba\xd1\xad\x9b\xfb\x9a\xe6\x93\xaa\xc9\xbc\x9b\xec\xc0\x6a\x48\x7f\xe2\x2a\xb3\xf0\x60\xe5\xd7\x41\x6a\x17" +
	"\x28\x99\xcc\x57\x61\xd3\xb8\x8f\x07\x66\x10\xda\x36\xb4\xc4\xe1\x61\x4a\x2b\x24\x06\x59\xc1\xb4\x41\x5a\x85\xff" +
	"\x6c\x5f\xa2\xcf\x5d\xcd\x36\xcd\x9b\xa0\x02\x9c\xd2\xf8\x71\x6f\x48\x55\x5d\x80\x83\xb1\x30\xec\x81\xed\x51\x57" +
	"\x42\x6e\x13\x1c\x07\x23\x38\x8f\x66\xa6\xaa\x4a\xc9\xc7\xcd\x66\x9c\x89\x8f\x88\x4e\x49\x47\x4c\x13\x6f\x65\xea" +
	"\x1b\x34\x98\x33\x07\xfa\x98\x17\xf7\xbd\x21\xc5\xfd\x49\xec\xdf\xc9\x3d\xa1\xc9\xb4\x70\xd1\x1b\xa4\xeb\x61\x22" +
	"\x19\x89\x61\x0f\x58\x9f\xe0\xd9\x91\xd8\xa1\xd9\x59\x7a\xb3\xaf\x2a\xa6\x0f\x30\xe1\x4e\x47\x0a\xa1\x9b\xe2\x5d" +
	"\x0e\x07\x94\x89\x0a\x1b\xd8\xd2\xc4\x3b\x9d\xba\x6a\x58\xff\x1f\x00\x00\xff\xff\x42\x08\x63\x62\x9a\x0c\x00\x00" +
	"")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3226,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139854, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
