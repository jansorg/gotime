// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7d\x6f\xd3\xba\x1a\xff\x7f\x9f\xe2\x51\x11\x12\x43\x71\xba\x6e" +
	"\x80\x46\x18\xd3\x85\x01\xf7\x22\x5d\x74\x8e\x28\xe7\x03\x38\xb1\x9b\x98\x39\x76\x64\xbb\xeb\x4a\xd4\xef\x7e\xe4" +
	"\xbc\xb4\x89\xe3\xa4\x1d\xe7\x6c\x7f\x34\x89\x9f\x97\xdf\xf3\x6e\xbb\x2c\x09\x5d\x31\x41\x61\xb6\x5c\xe7\x39\x56" +
	"\xdb\xd9\x6e\x77\x06\x00\x50\x96\x08\xe6\x2f\x53\x69\xb6\x05\x8d\x20\x65\x26\x5b\xc7\x61\x22\xf3\xf9\x4f\x2c\xb4" +
	"\x54\xe9\x3c\x95\x86\xe5\xb4\xfd\x51\xb4\x90\xca\x84\xdf\xa9\x5e\x73\xf3\x71\x9d\xdc\x53\xf3\x72\x0e\x68\xb7\x3b" +
	"\xab\xa4\xdd\x18\x1c\x73\x0a\x09\xc7\x5a\xbf\x9f\xe9\x46\xd5\x6d\xb5\x56\xaf\xc7\x92\x6c\x0f\xef\x65\xc9\x56\xe1" +
	"\x57\xfd\xa7\x92\x3f\x69\xd2\xc8\x6b\x80\x1d\x58\xd4\x6d\xef\x43\xfd\x91\xdc\x96\x25\x5b\x5c\x0b\x98\x35\xcc\xb3" +
	"\xdd\xee\x66\x6e\x88\x97\xb6\x05\x64\x98\xe1\x74\x76\x5b\x96\xe1\x0f\xfb\xe4\xe3\xb8\x99\x77\xf5\x95\x25\x15\xa4" +
	"\x03\xc8\xe2\x05\x21\x0d\x84\x9f\xb0\xa1\xdf\xb1\x48\x69\xf8\x39\x2f\xcc\xf6\xa9\xa0\x7f\xb0\x9c\x82\xb2\xfc\xd1" +
	"\x69\xc0\x73\x8a\x2a\xf2\x0a\xfd\x41\xf9\x37\x26\x58\x8e\xf9\xd2\x28\x26\xd2\xa7\xdb\x33\xc0\xd9\xc3\xa8\x70\x72" +
	"\x4f\x09\x58\xe5\x7e\x94\x0e\x42\x8b\x2d\x67\xe2\xd3\x5a\x61\xc3\xa4\x80\xb0\x7d\x0a\xff\x6b\xc3\xda\xe7\x77\x81" +
	"\xb1\x15\xd4\xc9\xf5\x47\x61\x59\x74\xb8\xcc\xe4\xe6\xf3\x23\x4e\x4c\x2b\x45\xc3\x53\xbd\x5c\xb1\x83\x39\x6a\xc7" +
	"\x53\x6d\xa9\xe4\xfe\x86\xb7\xe7\x9d\xf4\xbf\x99\x57\xb5\x72\x7b\xd6\x52\x9d\x1d\x6a\x34\x91\x79\x2e\xc5\xdd\x72" +
	"\xd9\x56\xe9\x8d\x36\x5b\x4b\xdb\x4a\x8a\x94\x94\x06\xca\x9e\x6e\x84\x56\x52\x18\xa4\xd9\x2f\x1a\xc1\xe2\xb2\x30" +
	"\xef\x7c\xcb\x2b\x9c\x33\xbe\x8d\x60\xa6\xb7\xda\xd0\x1c\xad\xd9\x2c\x00\x84\x8b\x82\x53\x54\x7f\x0a\xe0\x23\x67" +
	"\xe2\xfe\x1b\x4e\x96\xd5\xfb\x17\x29\x4c\x00\xb3\x25\x4d\x25\x85\xbf\xbe\xce\x02\xf8\x2e\x63\x69\x64\x00\xff\xa3" +
	"\xfc\x81\x1a\x96\xe0\x00\x3e\x28\x86\x79\x00\x1a\x0b\x8d\x34\x55\x6c\x15\xc0\xec\x83\x15\x0a\x77\x92\x4b\x05\x9f" +
	"\x73\xf9\xd3\x6a\xda\x8b\xf1\x7c\x59\x6e\xf3\x58\xf2\x99\x0b\xbb\xca\xfd\x3e\xf6\xff\xaf\x13\x46\x30\xdc\x49\xa1" +
	"\x25\xa7\xb3\x00\xbe\x49\x81\x13\x19\x40\x2e\x85\xd4\x05\x4e\xe8\xb8\x90\x0d\x65\x69\x66\x22\x10\x52\xe5\x98\xbf" +
	"\x3b\x73\x08\x13\x0b\x37\x82\x98\xe3\xe4\xde\x15\x12\xa7\xed\xf2\x26\x63\xc6\xa3\xc3\x70\xda\x52\x3c\xbb\x5a\xbc" +
	"\x79\x1d\xbf\x72\x69\x94\xdc\x20\x49\xc8\x9e\x8a\x56\x7f\x2e\x55\xb5\x8a\xd6\x62\xad\x29\x89\xe0\xd9\xf5\x5b\xfb" +
	"\x3f\x40\x23\x15\xa1\xaa\xa1\xe5\xb5\x51\x0f\x58\xbd\xe8\xb3\x9f\x0f\x2c\xac\xd2\x0e\x6d\x18\x31\x59\x04\x8b\x8b" +
	"\x8b\xe7\x03\x3b\x2a\x02\x82\x0d\x3e\x4e\x65\xb2\xd6\x94\x8e\xea\xf3\x51\xda\x38\xed\x51\xb7\x0e\x1d\x67\x68\xa3" +
	"\x15\x4b\x4e\x46\x89\x6c\x5c\xeb\xb4\xbf\x08\xaf\x15\xcd\x07\x26\x37\x83\xa8\xe7\xb2\x16\x43\x2f\x22\x1d\x20\xbb" +
	"\x83\x90\xcc\xe4\xdc\x29\xb6\x4e\xa9\xd5\x62\xf6\x1f\x1c\x5b\x8e\x7a\x27\xc6\xc9\x7d\xaa\xe4\x5a\x10\x74\x8a\x6f" +
	"\x7a\x85\xd0\x51\x5d\x7f\xf2\xe3\xaf\x87\x72\xdf\x80\x26\xb2\xb5\x84\x4e\x4a\xb8\xe8\xf6\x1e\xe3\xb8\xd0\x34\x82" +
	"\xf6\xa9\xa7\xe8\xa0\x29\x0b\xc0\x10\x47\x15\x67\x82\xa2\xac\x09\xe4\x22\xbc\x7c\x5d\x85\xa8\x4b\x51\x60\x42\x98" +
	"\x48\x6d\xfc\xaa\x55\x58\x0c\x48\xba\xbd\xcd\xbf\xe8\x16\xb6\xcf\x11\x59\x58\x15\xa9\x05\x59\x3f\x39\x50\x07\x40" +
	"\x2e\x46\xe4\xb8\xde\xb4\xfd\x00\x55\x9d\xc7\x02\xd8\x28\x5c\xf4\x11\x1a\xfa\x68\x10\xe6\x2c\x15\x11\x70\xba\x72" +
	"\x7a\xf3\x03\x55\xb6\x8d\xf2\x96\x22\x96\xc6\xc8\xdc\xaf\xda\xf5\xae\xcb\x6b\x64\x31\x82\x99\x62\x32\x44\x3e\x96" +
	"\x7e\x6e\xc9\x4e\xa5\x75\xbf\x15\xf8\x12\xb6\x5b\x29\x83\xb2\xf5\x31\xb4\xc1\x74\x58\xea\xcf\xfe\x2c\x0f\x0f\x7d" +
	"\xeb\x78\xae\x1f\xba\xdb\xa4\x30\x49\x08\x18\x15\x09\x6b\x5b\xc6\x38\x79\x71\x29\xd0\xe2\x1c\x0c\x09\x7a\x14\x76" +
	"\xaa\x7b\xe9\x4e\xf5\xf6\x09\x4d\xa8\xd1\x97\x63\xa3\xd8\x23\x18\x12\x09\x69\x5e\x44\x1c\x6b\x53\xab\x3c\x0f\x5c" +
	"\x92\x6c\x40\xe2\xcf\x76\xa4\x9a\xd2\xec\xd5\x55\x57\x75\x2d\x11\xf9\x2a\x66\x74\x42\x54\x19\x2f\x1f\xa8\x5a\x71" +
	"\xb9\x89\x80\x72\xce\x0a\xcd\x74\x9f\xa8\x5d\x47\x8f\x11\x64\x8c\x10\x2a\xa6\x0b\x23\x67\x84\x70\x3a\xe2\x9f\xcc" +
	"\x06\x74\x80\xaf\x5f\x99\xfd\xd6\xd0\x31\xe0\xed\xdb\xe7\x7e\xb1\x95\x66\x64\x6b\xd6\x91\x3c\x5e\xd2\x43\xf6\xca" +
	"\xc3\x13\xfc\xd5\xfa\x88\x59\x1e\xa7\xf7\xab\xef\xb0\xed\x98\xaa\xa4\xe1\x04\xed\xb6\xd4\xf0\x6a\x34\xf8\x71\x75" +
	"\x2a\xd3\x70\xeb\xc7\xd2\x93\xf2\x66\x54\x4a\x33\x82\xfd\xd9\x83\xd7\x46\xfa\xe6\x4e\x04\x57\xc5\x23\x68\xc9\x19" +
	"\x69\x8c\xf5\x4d\x72\xc7\xea\x1c\xab\x94\x89\x08\x2e\xe0\x02\xae\xc6\x7b\xf8\x1e\xd1\xa0\xa3\xee\x87\x40\xf8\x7a" +
	"\xc2\x9c\xd8\x48\x83\xdd\x6d\x41\xad\x1b\x19\x59\x4c\x95\x93\xad\xf6\xbd\x00\x3b\x32\x9d\x2f\x2e\xa0\xc6\xd8\x5a" +
	"\xaa\xe3\x90\xe1\x2e\x70\xa4\x7d\x24\x92\xef\x55\x04\xfd\x57\xbf\x3a\x9b\xd3\xff\x40\x9f\xdd\x71\xfb\x52\xa5\xbf" +
	"\x77\x71\x37\xf7\x27\xcc\x02\x67\x27\x7f\x3e\x3e\x68\x9d\xaa\x82\x63\x83\xda\x85\x8f\xec\xc8\xa4\xea\xf4\xba\x3d" +
	"\xaa\x61\x60\x53\xbf\x2a\x07\x00\x46\x22\x74\x42\xfd\x0f\x44\xfd\xa6\x9c\x27\x20\xae\x1b\x85\xb7\x22\xea\x6a\xbc" +
	"\x9c\xaa\x46\x83\x95\x41\x04\x6f\x83\xf6\xd9\xa2\xae\x5e\x64\x81\x3c\xc9\x94\x33\xd1\x1c\x4f\xde\x0c\xf6\x83\x27" +
	"\x47\x59\x48\x43\xb5\x7b\x8e\xce\x35\xca\xb6\x45\x46\x85\xf6\x75\x26\xb4\xa1\xf1\x3d\x33\x53\x24\x23\x4b\x5d\xc5" +
	"\xa4\xb9\x4d\x40\xbf\xa8\x92\x53\x51\x71\xce\x72\x07\x59\x50\xdd\x21\x34\xf7\x02\xf5\x5b\xf5\x02\x39\x25\x0c\xbf" +
	"\x9f\x15\x8a\x09\xd3\xb9\x7a\xfb\x4f\x81\xd3\x81\x0f\x9b\xe0\x5c\x5e\xe4\xfe\x56\x55\x6d\x6c\x4e\xbe\x66\xe8\x1e" +
	"\x99\x16\x13\x63\xe2\x7a\x8c\xe9\x32\x80\xec\x2a\x80\xec\xd5\x04\xf3\xab\x11\xe6\x89\x43\xce\x70\x73\x62\x7d\x81" +
	"\x62\x45\xf1\x3d\x62\x42\x33\x42\x23\xc0\x0f\x92\xf9\x13\xdb\xb8\x1d\xe0\x38\xb7\x43\x85\x57\xc6\x0e\xb3\xd1\x74" +
	"\xa8\xf7\xe6\xa3\x4a\x62\xba\x92\xea\x64\x25\x93\x44\x13\x78\x09\xd3\x05\xc7\xdb\xa8\xf6\x64\xd3\xfb\x90\xdd\xad" +
	"\x8e\x1c\x28\x3c\xc9\xf1\x2f\x81\xee\x6a\x59\x0d\x6f\xba\x9e\xac\xe5\x74\xab\xed\x20\x1e\x98\x0c\xdd\x52\xf3\x5d" +
	"\xd7\xad\xb5\x91\x79\xe7\xba\xae\x2c\x37\xcc\x64\xce\x7d\xe6\x5d\x4b\xd5\xbd\x11\x74\xee\xf5\x6a\xe6\xb0\x77\x67" +
	"\xd8\x21\xd9\xeb\x3e\xae\xe4\x0b\xe3\xf4\xa8\x22\x26\xec\xd9\xfc\x6e\xb9\x84\xa3\x2a\x9b\xdf\xbf\x03\x00\x00\xff" +
	"\xff\x96\x0e\x4b\x5d\x48\x18\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6216,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139907, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x73\xa4\x36\x10\xbd\xcf\xaf\xe8\x50\x3e\x78\xb7\x02\x94\x6f" +
	"\x5b\x5b\x78\x0e\x6b\x67\x53\x39\x24\xa9\xf2\x38\x39\xe4\xa6\x01\x79\x50\x02\x88\x20\xb1\x5e\x47\x35\xff\x3d\xa5" +
	"\x0f\x84\x18\x04\x0c\xeb\xd9\xda\xe4\x04\x48\xea\x96\xf4\xba\xf5\xf4\x1a\x21\x42\x88\xdf\x1e\x28\x7f\xa9\xf1\x7b" +
	"\x38\x10\x9e\xb7\xfb\x28\xa5\x65\xfc\x27\xaa\x18\x6d\x0e\x31\xa7\x65\x7c\xa0\xa1\x7c\x34\xb8\xa6\x0d\x8f\x1e\x30" +
	"\x6b\x0b\xfe\xa1\x4d\xff\xc2\xfc\x6d\x0c\xe1\xf1\xb8\xd9\x08\x91\xe1\x27\x52\x61\x08\x1e\xd1\xbe\xc0\xba\x33\x38" +
	"\x1e\x37\x00\x00\x97\x99\x43\x7b\xba\xda\xab\x36\x78\x7f\x0b\x51\xdf\xc8\x72\xfa\xfc\xc3\x67\x94\xaa\x76\xed\xe2" +
	"\xd7\x9a\x13\x5a\xb1\x68\xd7\x75\xdd\xb7\x0d\x52\x4d\x60\xec\x12\x2e\x97\x0a\x69\x81\x18\xbb\x0d\xd4\x47\x48\xb3" +
	"\x2c\xd8\xaa\x5e\x3d\x22\xc7\x28\x73\xbf\x9b\xfe\xc3\x0c\xb0\xf6\x79\xf8\x4c\x32\x1c\x6c\x13\x56\xa3\xca\xb6\x12" +
	"\x5e\xe0\x60\x2b\x44\xf4\x28\xdf\x8e\xc7\x24\x96\xdd\xdb\x24\xe6\xf9\xb4\x2b\x52\xe2\x50\xce\x8c\x1b\x69\x4a\x6e" +
	"\xde\x55\x10\x74\xcb\x0f\xa4\x8f\x53\x63\x21\xc8\x13\xf4\x28\x98\x0d\xae\x71\xaf\xd1\xcb\xe6\x27\xc1\x55\xe6\xb8" +
	"\x4e\x62\x17\x0e\x39\xfe\x04\xac\x3d\xcd\x5e\xfa\x6f\x21\x1a\x54\x1d\x30\x98\x08\x46\x77\x39\x29\x32\x1d\x61\x76" +
	"\xb2\xe0\x11\xce\xba\x31\x1b\xe0\xc8\x33\xef\x18\x77\x97\x72\x7b\x25\xa9\x3a\xe8\x20\xea\xde\xa2\x1f\x31\x9f\xf2" +
	"\xb1\x8c\xe5\xda\x99\x8c\x9f\xa9\xe9\x86\xa8\x8e\x91\xf5\xe0\x3e\x44\x36\xe1\x4f\x94\xf2\x41\x9a\x76\x6b\x6b\xe8" +
	"\x73\xc8\xda\x3d\xa7\x1c\x15\xc1\x28\xe1\x6c\xf4\x1f\x55\xbf\x2f\xe8\x27\x79\x03\x27\xc9\xe3\xee\xb9\x0b\xec\x08" +
	"\xe4\xd7\x26\xeb\xda\x49\x7b\xbc\xd7\x66\x70\x8f\x63\x12\x2b\x42\xd8\x6e\x3a\x1b\x87\xe2\x7e\x46\xbc\x21\x9f\xff" +
	"\x17\x1c\xd7\xd9\x95\x35\x7f\x19\xdb\x3d\xe8\x85\xec\xba\x11\x72\x9b\x30\xc1\x8c\x19\xe2\x08\x2c\x49\x9a\xb7\x52" +
	"\x21\xf1\x85\x8c\xa9\x8d\x43\x43\x91\x5f\x48\x9b\x42\x3c\x13\x9e\xdb\x34\xf8\x48\x1a\xc6\x7f\xa1\x95\xda\x8e\x62" +
	"\x18\x4f\x7a\x5d\x2e\x56\x43\xaf\x9a\xdf\xe6\x88\x6d\x22\xc1\x9d\xdc\x76\xf8\x2d\x3f\x8f\x2c\xbc\x04\xb2\xc0\xf6" +
	"\xfe\xf3\xfe\xf5\x08\x5d\x1d\x79\xda\xc0\x35\xaa\x32\x70\x32\x32\x52\x8f\x37\x70\x5d\x51\xde\x7d\x78\xf9\xc0\x73" +
	"\x1f\xc0\x4c\x36\x81\x7a\xdc\x06\x3d\x9e\x63\x6c\xbd\x0e\xd7\x04\x11\x7c\xd7\xc0\xe4\x48\x0b\x43\x4f\x55\x3f\xb1" +
	"\x07\xda\x56\x19\xce\xfe\xc0\x0d\x9d\x99\xc4\x4e\xe6\x1e\x91\xee\xaa\x0e\xff\xc1\x0d\x5d\xbc\xe8\xd4\xe9\x59\x9c" +
	"\x40\x1e\x8c\x01\x37\x7b\x13\xdd\xbb\xb4\xfd\x44\x84\xbe\xc1\x1e\xc6\xc7\xc1\x33\xa6\x60\xf8\x5c\xc4\xff\x0b\xd8" +
	"\x0e\x60\x13\x02\xf4\x31\x36\xe9\xd3\xcb\x36\xd0\x89\xbe\xac\x44\x2e\x8a\xe5\xec\x18\xbf\xea\x71\x2d\x97\x4e\x76" +
	"\x4a\x0b\xab\x61\xa0\xd7\x03\x56\xd6\xf8\x0e\xfb\xe4\x72\x66\x63\x39\x63\xb5\x36\x78\xeb\x82\x76\x91\xa8\xcd\x45" +
	"\xc2\x7f\x9d\x0c\x09\xdf\xe7\xe3\xeb\x69\x4f\xbf\x0a\x58\x16\xa4\xf6\xd6\x21\xdf\x5f\xa5\x92\xa4\xa5\xac\x99\xbe" +
	"\xfe\x97\x88\x5c\x88\xab\x2e\x10\xd2\x11\x6b\x4b\x65\xf0\x3b\x2a\x5a\xcc\x3a\xbf\x70\x45\xce\x55\xa9\x13\x1b\xb6" +
	"\x36\x86\x50\xae\x07\x1a\x36\x73\x82\xfd\x66\x3e\xd0\xeb\x32\xf1\x95\x59\x38\x58\xd8\x19\x59\x38\x95\x81\xcb\x4a" +
	"\xdc\x83\xa7\x11\x2d\x30\x71\xfc\xa7\x50\x3e\xa7\x26\xf1\x2a\xc2\xf3\x50\x7d\x2d\xa2\x73\xe5\x8a\x1f\xd8\x89\x02" +
	"\x71\x4e\xb7\x9d\x57\xc6\x7c\x93\x02\x66\x65\x21\x92\x91\x4f\x1d\xd0\xda\x67\xe0\xea\x4f\xf2\x04\x52\x50\x8e\x8b" +
	"\x21\x5d\xa1\xa9\x5f\x51\x0c\xae\x09\xd3\xdf\xf6\x38\x2b\xb9\xd9\xaf\xe7\xcd\xa9\xe6\x14\x82\xe3\xb2\x2e\x10\x3f" +
	"\x2d\xf6\xac\x87\x21\x45\x16\x0c\xcb\xf4\xc1\x7f\xf7\xf1\xc5\x35\xcf\xe1\x06\x66\x1c\xbb\x3f\xca\x3a\xbb\x91\x5b" +
	"\x9f\x8e\x8e\x3a\x88\xc6\x99\x62\x00\xb9\x9e\x47\xb7\xd3\xdb\xf7\x88\xe3\x07\x49\xa6\xd3\xca\xfb\x34\x08\x8a\xa6" +
	"\x41\x31\xb0\x52\xd4\xd6\x85\xcc\xdf\x8c\x7c\x3a\xbb\x64\xf1\xeb\xaf\x71\xbc\xd9\x1c\x91\x2e\x95\x8b\x17\x91\xf8" +
	"\x6e\xcc\xba\x70\x45\x13\xe3\xa7\x09\x70\x84\xcd\xdc\x4d\x6b\x86\xdb\x33\x9b\x7c\x97\xd1\x54\x1e\x4c\xc8\x79\x59" +
	"\x6c\x37\x89\x7c\x40\x81\xaa\x83\xe2\x1f\xf9\xf2\x01\x31\xac\xd4\xdf\x26\xe9\xab\xb6\xa4\xc4\x1c\x41\x9a\xa3\x86" +
	"\x61\x7e\x1b\xfc\xf6\xf8\x31\x7c\x67\xf0\x34\x75\xf3\x30\x51\xee\x5a\xc6\x69\x69\x30\x74\xae\x74\xd9\xb0\x15\x02" +
	"\x22\x50\x37\xb2\xfa\xdc\xc0\xa9\x84\x73\x81\x4a\x69\x59\xd2\xea\x6e\xb7\xeb\xe9\xc5\xe9\x54\xd3\x98\xce\x24\xd6" +
	"\xeb\x4d\xb4\xae\xd8\xac\xe1\x21\x09\x83\xde\x41\x6c\xb6\x60\x68\x48\x88\x2b\x5a\x73\x36\x22\x1a\xd0\x0c\xa8\x7f" +
	"\x19\xc8\x11\xee\x96\xed\x7f\xe1\xfc\x46\xa6\x92\xdc\x6a\x7e\x33\x60\xce\x91\xdd\x3d\x66\x69\x43\x94\x6f\x6b\x5d" +
	"\xdb\xea\xa6\xef\x0c\x3a\x87\xf5\xc0\x9f\xbc\x72\x94\x37\x79\x34\x77\x6d\x59\xa2\xe6\x05\x3c\x80\x99\xae\x00\x0c" +
	"\xe5\xaa\x1d\x6a\x2f\xde\xec\xb4\xa3\x92\x58\xa3\x9a\x28\xa8\xb6\xff\x06\x00\x00\xff\xff\x73\x55\xd8\x92\xed\x17" +
	"\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6125,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549137624, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\x58\x63\x0f\xed\x00\xb6\x31\x28" +
	"\x0a\x2c\x16\x4e\x0e\xf3\x57\xf4\xd2\x16\x9b\xf4\x01\x14\x8b\x63\xab\x6b\x4b\x86\xc4\xec\x34\x30\xfc\xee\x85\x24" +
	"\xff\x24\x19\xdb\x93\x64\x73\x88\x2c\x91\xfc\xf8\x2f\xb1\x69\x22\x48\xee\x72\x45\x87\x1a\xbf\x40\x2e\xa8\xd8\xef" +
	"\xe2\x4c\x55\xc9\xbf\x4c\x1a\xa5\xf3\x24\x57\x24\x2a\xec\x17\x8d\xb5\xd2\x14\x3f\xec\xb3\x6f\x48\x5f\xdd\xe6\x2e" +
	"\x81\xa8\x6d\x83\xa0\x69\x38\xbe\x0a\x89\x10\x7a\x6a\xd8\xb6\x01\x00\xc0\x87\x1a\x48\x55\x49\xae\x22\xbb\x74\xf0" +
	"\x5f\xd1\xec\x4b\xf2\x30\x1d\xbc\x47\xfa\xb4\x73\x67\xf0\x65\x05\xf1\x78\x68\x0a\xf5\xf6\x5c\xd5\x74\xb0\xe7\x1e" +
	"\xe2\xaf\x9a\x84\x92\x26\xf6\x26\xc6\x9b\x9e\xc3\x1a\x6a\xa5\x52\x2e\xbe\x43\x56\x32\x63\x56\xa1\xc7\x0c\xd7\x8e" +
	"\xe0\x21\xc5\x2b\x74\xaa\xe2\x5e\x0c\x8e\x7e\x8e\x41\x69\xf8\x59\x2a\x3a\x65\xdc\xa8\xbd\xce\xf0\x17\x18\x6d\x3a" +
	"\x13\x75\xca\x89\xed\x4a\xec\xd5\xbb\x4d\xc4\x19\x31\xf0\x9f\x8a\xf3\x23\x63\x4e\x05\x0b\x64\x7c\x8e\xa6\xa7\x09" +
	"\xde\xe0\xe4\x0e\xab\x1d\x72\x8e\x1c\x48\x50\x89\x40\x0a\xbe\x21\xd6\xdd\x8e\x49\xee\xb5\x1b\x20\x95\x23\x15\xa8" +
	"\x41\x48\xa8\xb5\x90\x84\x1c\xfe\x7e\x7a\x31\x77\xc9\x84\x2b\x47\x96\x41\xa6\x4a\x53\x33\xb9\x0a\x7f\x0b\x07\xdf" +
	"\x2c\x78\xb8\x1e\x12\x17\x6f\xed\x41\xdb\x8e\xa9\x8c\x37\x75\x29\xe8\xe1\xb0\x3d\xd4\xd8\xb6\x69\x42\xc5\x8c\x7b" +
	"\xc9\x9c\x7f\x8b\x8e\x3b\xbb\xbc\x2d\x9c\x11\x46\x36\x7e\xa8\xad\x45\xe2\xfe\xb3\x84\xf0\x89\x11\x86\x4b\x7a\x2f" +
	"\x01\xd9\x10\xd3\xf4\xc3\x28\xcf\x92\x5f\x83\x61\xdb\xf1\xbd\x3b\x7b\xcd\x6c\xe1\x5f\x05\x54\x44\x6f\x82\xe3\x08" +
	"\xf2\xa7\x22\x34\x8b\x08\x0b\xc9\x48\x16\x4b\x74\xa7\xf8\x61\x9a\xd6\x34\x9a\xc9\x1c\x87\x6e\x7a\xd1\xac\x42\xd3" +
	"\x2d\x8b\x85\xb7\x90\x7d\xcf\xc0\x7b\x4f\x8d\xcd\x53\xc4\xd9\xc1\xfa\xfa\xaa\x74\xc5\xc8\xe6\x1f\x62\x97\x40\xe7" +
	"\xf0\x8c\xe5\xb3\x60\x36\x0b\x23\xda\x56\x54\x37\xa3\xa9\xba\x03\x5b\x14\x81\xfe\xf6\x89\xff\x30\x1b\x52\x75\x8d" +
	"\x7c\x21\x38\x93\x52\x42\xe6\x25\x3e\xb1\xa9\x8b\x69\x5e\xf6\xd8\xbf\x67\x79\xb9\x4e\x2c\x0d\xde\xa0\xc8\xa6\xe5" +
	"\x06\x65\x17\xf1\x5e\xc2\x77\x55\xee\xfa\x1a\xa8\x84\xec\xfb\x0f\xe2\xfe\xeb\xca\x3a\x90\xae\xf7\xd6\x4d\x13\xbb" +
	"\x2e\xfc\x48\x7a\xbe\x11\x97\xbc\x4c\x93\x85\x46\x4c\xe9\x55\x29\x1a\xea\x72\xbf\x23\x45\xac\x9c\x7d\x90\x74\xcf" +
	"\xa9\xd5\x5b\xf4\x01\x37\x9c\x3f\x14\xbf\x8e\x97\xce\xd6\xc9\x5d\x71\x6d\x65\xaa\x1c\xf4\x81\x4d\x81\xfb\x3b\x32" +
	"\x61\x26\x21\xf1\xef\x48\xcf\xff\xb1\x8c\x2e\xd0\xb5\xbe\xf1\x0a\xb4\x11\x7c\x4f\x4c\x13\xf7\xc2\xae\xcf\x46\x89" +
	"\xd3\x3c\x4d\xb6\xcc\xf1\xb4\x32\xf7\xa4\xa6\x09\x17\xdf\xcf\xb1\x4f\xef\xd4\xc7\x42\x94\xdc\x4f\x55\x53\x57\x6a" +
	"\xd3\x10\x56\x75\x69\x6f\xc4\x7e\x84\x1b\xa6\xac\x05\x73\x87\x7d\x67\x41\x7f\x14\x5c\x33\xf8\x15\x54\x95\x7e\x72" +
	"\x4b\xba\xd1\xad\x9b\xfb\x9a\xe6\x93\xaa\xc9\xbc\x9b\xec\xc0\x6a\x48\x7f\xe2\x2a\xb3\xf0\x60\xe5\xd7\x41\x6a\x17" +
	"\x28\x99\xcc\x57\x61\xd3\xb8\x8f\x07\x66\x10\xda\x36\xb4\xc4\xe1\x61\x4a\x2b\x24\x06\x59\xc1\xb4\x41\x5a\x85\xff" +
	"\x6c\x5f\xa2\xcf\x5d\xcd\x36\xcd\x9b\xa0\x02\x9c\xd2\xf8\x71\x6f\x48\x55\x5d\x80\x83\xb1\x30\xec\x81\xed\x51\x57" +
	"\x42\x6e\x13\x1c\x07\x23\x38\x8f\x66\xa6\xaa\x4a\xc9\xc7\xcd\x66\x9c\x89\x8f\x88\x4e\x49\x47\x4c\x13\x6f\x65\xea" +
	"\x1b\x34\x98\x33\x07\xfa\x98\x17\xf7\xbd\x21\xc5\xfd\x49\xec\xdf\xc9\x3d\xa1\xc9\xb4\x70\xd1\x1b\xa4\xeb\x61\x22" +
	"\x19\x89\x61\x0f\x58\x9f\xe0\xd9\x91\xd8\xa1\xd9\x59\x7a\xb3\xaf\x2a\xa6\x0f\x30\xe1\x4e\x47\x0a\xa1\x9b\xe2\x5d" +
	"\x0e\x07\x94\x89\x0a\x1b\xd8\xd2\xc4\x3b\x9d\xba\x6a\x58\xff\x1f\x00\x00\xff\xff\x42\x08\x63\x62\x9a\x0c\x00\x00" +
	"")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3226,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549139854, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
