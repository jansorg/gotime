// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xd4\x3e\x12\x7f\xdf\x4f\x31\xca\x5f\x48\x14\xc5\xd9\x6e" +
	"\x0b\xa8\x84\x52\x1d\x14\xb8\x43\x3a\x74\x27\x96\xfb\x00\x4e\xec\x4d\x4c\x1d\x3b\xb2\xbd\xdd\x2e\x51\xbf\xfb\xc9" +
	"\x79\xd8\x4d\x1c\x27\xbb\xe5\x0e\x5e\x34\x1b\xcf\xc3\x6f\xc6\xf3\x9b\x71\x5c\x55\x84\xae\x99\xa0\x10\xac\x36\x45" +
	"\x81\xd5\x2e\x78\x7a\x3a\x03\x00\xa8\x2a\x04\x8b\x57\x99\x34\xbb\x92\xc6\x90\x31\x93\x6f\x92\x28\x95\xc5\xe2\x17" +
	"\x16\x5a\xaa\x6c\x91\x49\xc3\x0a\xda\xfd\x51\xb4\x94\xca\x44\x3f\xa8\xde\x70\xf3\x69\x93\xde\x53\xf3\x6a\x01\xe8" +
	"\xe9\xe9\xac\xb6\x76\x63\x70\xc2\x29\xa4\x1c\x6b\xfd\x21\xd0\xad\xab\xdb\x7a\xad\x59\x4f\x24\xd9\x1d\x7e\x57\x15" +
	"\x5b\x47\xdf\xf4\xbf\x95\xfc\x45\xd3\xd6\x5e\x0b\xec\xa0\xa2\x6e\x07\x2f\x9a\x97\xe4\xb6\xaa\xd8\xf2\x5a\x40\xd0" +
	"\x2a\x07\x4f\x4f\x37\x0b\x43\xbc\xb2\x1d\x20\xc3\x0c\xa7\xc1\x6d\x55\x45\x3f\xed\x93\x4f\xe3\x66\xd1\xf7\x57\x55" +
	"\x54\x90\x1e\x20\x8b\x17\x84\x34\x10\x7d\xc6\x86\xfe\xc0\x22\xa3\xd1\x97\xa2\x34\xbb\xe7\x82\xfe\xc9\x0a\x0a\xca" +
	"\xea\xc7\xa7\x01\x2f\x28\xaa\xc5\x6b\xf4\x07\xe7\xdf\x99\x60\x05\xe6\x2b\xa3\x98\xc8\x9e\x1f\xcf\x08\xe7\x00\xa3" +
	"\xc2\xe9\x3d\x25\x60\x9d\xfb\x51\x3a\x08\x2d\xb6\x82\x89\xcf\x1b\x85\x0d\x93\x02\xa2\xee\x29\xfa\xbb\xdd\xd6\xa1" +
	"\xbe\x0b\x8c\xad\xa1\x29\xae\x7f\x95\x56\x45\x47\xab\x5c\x6e\xbf\x3c\xe2\xd4\x74\x56\x34\x3c\x37\xcb\xb5\x3a\x98" +
	"\xa3\x71\x3c\x37\x96\xda\xee\x1f\x64\x7b\xd1\x2b\xff\x9b\x45\xcd\x95\xdb\xb3\x4e\xea\xec\xc0\xd1\x54\x16\x85\x14" +
	"\x77\xab\x55\xc7\xd2\x1b\x6d\x76\x9c\x82\x25\xe9\x87\xc0\xd0\x47\xb3\x48\xb5\xee\xf1\x2a\x56\x52\x1a\xa8\x06\x58" +
	"\x10\x5a\x4b\x61\x90\x66\xbf\x69\x0c\xcb\xcb\xd2\xbc\xf7\x2d\xaf\x71\xc1\xf8\x2e\x86\x40\xef\xb4\xa1\x05\xda\xb0" +
	"\x20\x04\x84\xcb\x92\x53\xd4\xbc\x0a\xe1\x13\x67\xe2\xfe\x3b\x4e\x57\xf5\xef\xaf\x52\x98\x10\x82\x15\xcd\x24\x85" +
	"\xff\x7c\x0b\x42\xf8\x21\x13\x69\x64\x08\xff\xa0\xfc\x81\x1a\x96\xe2\x10\x3e\x2a\x86\x79\x08\x1a\x0b\x8d\x34\x55" +
	"\x6c\x1d\x42\xf0\xd1\x1a\x85\x3b\xc9\xa5\x82\x2f\x85\xfc\x65\x3d\xed\xcd\x78\xde\xac\x76\x45\x22\x79\xe0\xc2\xae" +
	"\xb9\x30\xc4\xfe\xcf\x4d\xca\x08\x86\x3b\x29\xb4\xe4\x34\x08\xe1\xbb\x14\x38\x95\x21\x14\x52\x48\x5d\xe2\x94\x4e" +
	"\x1b\xd9\x52\x96\xe5\x26\x06\x21\x55\x81\xf9\xfb\x33\x47\x30\xb5\x70\x63\x48\x38\x4e\xef\x5d\x23\x49\xd6\x2d\x6f" +
	"\x73\x66\x3c\x3e\x0c\xa7\x9d\xc4\x5f\x57\xcb\xb7\x6f\x92\xd7\xae\x8c\x92\x5b\x24\x09\xd9\x4b\xd1\xfa\x9f\x2b\x55" +
	"\xaf\xa2\x8d\xd8\x68\x4a\x62\xf8\xeb\xfa\x9d\xfd\x3f\x42\x23\x15\xa1\xaa\x95\xe5\x4d\x50\x0f\x58\xbd\x1c\xaa\x9f" +
	"\x8f\x22\xac\xcb\x10\x6d\x19\x31\x79\x0c\xcb\x8b\x8b\x17\xa3\x38\x6a\x01\x82\x0d\x3e\x2e\x65\xf2\x2e\x94\x9e\xeb" +
	"\xf3\x49\xd9\x24\x1b\x48\x77\x09\x9d\x56\xe8\x76\x2b\x91\x9c\x4c\x0a\xd9\x7d\x6d\xca\xfe\x22\xba\x56\xb4\x18\x85" +
	"\xdc\x0e\xa6\x41\xca\x3a\x0c\x83\x1d\xe9\x01\x79\x3a\x18\xc9\x4d\xc1\x1d\xb2\xf5\xa8\xd6\x98\xd9\xbf\x70\x62\x39" +
	"\x9a\x9d\x04\xa7\xf7\x99\x92\x1b\x41\xd0\x29\xb9\x19\x10\xa1\xe7\xba\x79\xe5\xc7\xdf\x0c\xe9\x61\x00\xed\xce\x36" +
	"\x16\x7a\x25\xe1\xa2\xdb\x67\x8c\xe3\x52\xd3\x18\xba\xa7\x81\xa3\x83\xa7\x3c\x04\x43\x1c\x57\x9c\x09\x8a\xf2\x76" +
	"\x23\x97\xd1\xe5\x9b\x7a\x8b\xfa\x12\x25\x26\x84\x89\xcc\xee\x5f\xbd\x0a\xcb\x91\x48\xbf\xb7\xf9\x17\x5d\x62\xfb" +
	"\x12\x91\x47\x35\x49\x2d\xc8\xe6\xc9\x81\x3a\x02\x72\x31\x61\xc7\xcd\xa6\xed\x07\xa8\xee\x3c\x16\xc0\x56\xe1\x72" +
	"\x88\xd0\xf6\x70\x84\x39\xcb\x44\x0c\x9c\xae\x9d\xde\xfc\x40\x95\x6d\xa3\xbc\x93\x48\xa4\x31\xb2\xf0\xbb\x76\xb3" +
	"\xeb\xea\x1a\x59\x4e\x60\xa6\x98\x8c\x91\x4f\x95\x9f\x4b\xd9\xb9\xb2\x1e\xb6\x02\x5f\xc1\xf6\x99\x32\xa2\xad\x4f" +
	"\xa1\xdb\x4c\x47\xa5\x79\xed\xaf\xf2\xe8\xd0\xb7\x8e\xd7\xfa\xa1\xbb\xcd\x1a\x93\x84\x80\x51\xb1\xb0\xb1\xe5\x8c" +
	"\x93\x97\x97\x02\x2d\xcf\xc1\x90\x70\x20\x61\xa7\xbc\x57\xee\xd4\x6c\x9f\xd0\x84\x5a\x7f\x05\x36\x8a\x3d\x82\x21" +
	"\xb1\x90\xe6\x65\xcc\xb1\x36\x8d\xcb\xf3\xd0\x15\xc9\x47\x22\xfe\x6a\x47\xaa\xa5\xe6\x80\x57\x7d\xd7\x8d\x45\xe4" +
	"\x63\xcc\xe4\x84\xa8\x2b\x5e\x3e\x50\xb5\xe6\x72\x1b\x03\xe5\x9c\x95\x9a\xe9\xa1\x50\xb7\x8e\x1e\x63\xc8\x19\x21" +
	"\x54\xcc\x13\xa3\x60\x84\x70\x3a\x91\x9f\xdc\x6e\xe8\x08\xdf\x90\x99\xc3\xd6\xd0\x0b\xe0\xdd\xbb\x17\x7e\xb3\xb5" +
	"\x67\x64\x39\xeb\x58\x9e\xa6\xf4\x58\xbd\xce\xf0\x8c\x7e\xbd\x3e\x11\x96\x27\xe9\x43\xf6\x1d\x8e\x1d\x73\x4c\x1a" +
	"\x4f\xd0\x7e\x4b\x8d\xae\x26\x37\x3f\xa9\xbf\xd2\x34\xdc\xfa\xb1\x0c\xac\xbc\x9d\xb4\xd2\x8e\x60\x7f\xf5\xe0\x8d" +
	"\x91\xbe\xb9\x13\xc3\x55\xf9\x08\x5a\x72\x46\xda\x60\x7d\x93\xdc\x89\xba\xc0\x2a\x63\x22\x86\x0b\xb8\x80\xab\xe9" +
	"\x1e\xbe\x47\x34\xea\xa8\xfb\x21\x10\xbd\x99\x09\x27\x31\xd2\x60\xf7\x58\xd0\xf8\x46\x46\x96\x73\x74\xb2\x6c\xdf" +
	"\x1b\xb0\x23\xd3\x79\xe3\x02\x6a\x83\x6d\xac\x3a\x09\x19\x9f\x02\x27\xda\x47\x2a\xf9\xde\x45\x38\xfc\xe9\x77\x67" +
	"\x6b\xfa\x7f\xf0\x67\x4f\xdc\xbe\x52\x19\x9e\x5d\xdc\xc3\xfd\x09\xb3\xc0\x39\xc9\x9f\x4f\x0f\x5a\x87\x55\x70\x6c" +
	"\x50\xbb\xf0\x91\x1d\x99\x54\x9d\xce\xdb\xa3\x1e\x46\x31\x0d\x59\x39\x02\x30\xb1\x43\x27\xf0\x7f\x64\xea\x0f\xed" +
	"\x3c\x03\x71\xd3\x28\xbc\x8c\x68\xd8\x78\x39\xc7\x46\x83\x95\x41\x04\xef\xc2\xee\xd9\xa2\xae\x7f\xc8\x12\x79\x8a" +
	"\xe9\xe4\x9d\x14\xd2\x50\xed\x7e\x2b\x17\x1a\xe5\xbb\x32\xa7\x42\xfb\xba\x0f\xda\xd2\xe4\x9e\x99\x39\x91\x89\xa5" +
	"\xbe\x63\xd2\xde\x20\xa0\xdf\x54\xc9\xb9\xcc\x3b\xdf\x6b\x07\x5b\x50\xdf\x1b\xd4\x77\x01\xb7\xed\x85\x9b\xf7\x62" +
	"\x00\x0a\x4a\x18\xfe\x10\x94\x8a\x09\xd3\xbb\x26\xf8\x5b\x89\x33\x37\x6f\x4d\xab\x1e\x07\xd4\x6d\xd4\xe5\x45\xe1" +
	"\x6f\x5b\xf5\x21\xe7\xe4\x2b\x87\xfe\xe7\xd3\x72\x66\x64\x5c\x4f\x29\x5d\x86\x90\x5f\x85\x90\xbf\x9e\x51\x7e\x3d" +
	"\xa1\x3c\xf3\xc1\x33\x3e\xa8\xd8\x1c\xa1\x44\x51\x7c\x8f\x98\xd0\x8c\xd8\xec\x3c\x48\xe6\x2f\x72\xe3\x76\x83\xe3" +
	"\xda\x8e\x14\x5e\x1b\x3b\xd8\x26\xcb\xa6\x39\xa7\x4f\x3a\x49\xe8\x5a\xaa\x93\x9d\xcc\x0a\xcd\xe0\x25\x4c\x97\x1c" +
	"\xef\xe2\x26\x93\x6d\x1f\x44\xf6\xe4\x3a\xf1\x71\xe1\x29\x8e\xff\x13\xe8\xbe\x97\xf5\xf8\xd6\xeb\xd9\x5e\x4e\x8f" +
	"\xda\x0e\xe5\x51\xc8\xd0\xa7\xa4\xef\x2a\x6f\xa3\x8d\x2c\x7a\x57\x79\x55\xb5\x65\x26\x77\xee\x3a\xef\x3a\xa9\xfe" +
	"\x6d\xe1\x91\x3b\xbf\xc6\x58\x34\xb8\x5f\x6c\x71\x40\xef\xf2\xf1\x04\xa7\x5f\x19\xa7\xcf\x76\xcc\x84\xfd\x8e\xbf" +
	"\x5b\xad\xe0\x28\x84\xf6\xef\x7f\x03\x00\x00\xff\xff\x1b\xe8\x98\xdf\x84\x18\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6276,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549117736, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x4c\x85\x1c\xb2\x8b\x48\x6a\x6e" +
	"\x8b\x85\x64\xa0\x9b\x74\x8b\x1e\xda\x02\x49\xb6\x28\x7a\xa3\x45\xc6\x62\x2b\x89\x5a\x91\x8a\x93\x12\xfe\xef\x05" +
	"\x49\x51\x9f\x94\x6c\x6f\xbc\xd8\xd6\x17\x49\x24\x67\x38\x7c\x33\x7c\x7c\xb4\x94\x3e\x84\x6f\xb7\x4c\xbc\x94\xe4" +
	"\x3d\x6c\xa9\x48\xeb\x4d\x90\xb0\x3c\xfc\x0b\x15\x9c\x55\xdb\x50\xb0\x3c\xdc\x32\x5f\x3d\x2a\x52\xb2\x4a\x04\x77" +
	"\x84\xd7\x99\xf8\x50\x27\x7f\x13\xf1\x36\x04\x7f\xbf\x5f\xad\xa4\xc4\xe4\x91\x16\x04\xbc\x07\xb4\xc9\x88\xe9\xf4" +
	"\xf6\xfb\x15\x00\xc0\x79\xe6\x30\x9e\x2e\x36\xba\x0d\xde\xc7\x10\x74\x8d\x3c\x65\xbb\x1f\x9f\x51\xa2\xdb\x8d\x8b" +
	"\xdf\x4a\x41\x59\xc1\x83\x7b\xdb\x75\x5b\x57\x48\x37\x41\x63\x17\x09\x15\x2a\x24\x19\xe2\x3c\xf6\xf4\x87\xcf\x30" +
	"\xf6\xd6\xba\xd7\x8c\x48\x09\xc2\xfd\xef\xaa\xfb\x68\x06\xb4\xf6\xa9\xbf\xa3\x98\x78\xeb\x88\x97\xa8\x68\x5b\xa9" +
	"\xc8\x88\xb7\x96\x32\x78\x50\x6f\xfb\x7d\x14\xaa\xee\x75\x14\x8a\x74\xde\x15\xcd\x89\xaf\x66\x26\x95\x32\xa5\xd7" +
	"\xef\x0a\xf0\x6c\xf8\x9e\xf2\x31\x36\x96\x92\x3e\x42\x87\x42\xb3\xc0\x53\xdc\x1b\xf4\xf0\xf2\x24\xa4\xc0\x3d\xd7" +
	"\x51\xd8\x87\x43\x8d\x1f\x81\xb5\x61\xf8\xa5\xfb\x96\xb2\x42\xc5\x96\x40\x93\xc1\xe0\x26\xa5\x19\x36\x19\xe6\xa3" +
	"\x80\x27\x38\x9b\x46\x3c\xc0\x51\x60\xe7\x98\xfe\x2a\xd5\xf2\x72\x5a\x58\xe8\x20\xb0\x6f\xc1\x4f\x44\xcc\xf9\x38" +
	"\x8c\xe5\xa9\x33\x35\x7e\xe6\xa6\x1b\xa2\x3a\x45\xd6\x81\xfb\x10\xd9\x48\x3c\x32\x26\x06\x65\x6a\x63\xab\xd8\xce" +
	"\xe7\xf5\x46\x30\x81\x32\x6f\x52\x70\x6d\xf6\x1f\x74\xbf\x2b\xe9\xa3\xba\x81\x51\xf1\xf4\xd7\x6c\x13\x3b\x01\xf9" +
	"\xb5\xc5\x7a\xea\xa4\x1d\xde\xa7\x56\x70\x87\x63\x14\x6a\x42\x58\xaf\xac\x4d\x8f\xe2\x7e\x41\xa2\xa2\xcf\xff\x0b" +
	"\x8e\xb3\x76\x79\x29\x5e\xa6\x76\x77\x26\x90\x7b\x3b\x42\x2d\x13\x66\x98\x11\x23\x81\xa0\x25\xc9\xe6\x2d\xd7\x48" +
	"\x7c\x21\x63\x1a\x63\xbf\xa1\xc8\x2f\xa4\x4d\x29\x77\x54\xa4\x6d\x19\x7c\xa4\x15\x17\xbf\xb2\x42\x2f\x47\x33\x8c" +
	"\xa3\xbc\xce\x97\xab\xa1\x57\xc3\x6f\x4b\xc4\x36\x53\xe0\xbd\xda\x0e\x4c\x71\x75\x2c\x97\x1e\x47\x19\x4e\x1a\x39" +
	"\xc0\xf9\xee\x5d\xff\xf5\x68\x5d\x6f\x7c\x56\xc1\x25\x2a\x30\xf4\xea\x32\xd0\x8f\x37\x70\x59\x30\x61\x3f\x9c\xac" +
	"\xe0\x38\x15\x60\xa1\xa6\x40\x3f\x62\xaf\x2b\xa3\x61\x49\xa9\x55\x3b\x1d\x9e\x92\x4a\x70\x1d\x06\xb3\x23\x5b\x18" +
	"\x3a\xc2\xfa\x99\xdf\xb1\xba\xc0\x04\xff\x49\x2a\xb6\x30\x49\x3b\x59\x7f\xa3\xd8\x03\xdb\xff\x87\x54\xec\xe0\x71" +
	"\xa7\xf7\xd0\xc1\x09\xd4\xf6\x18\x30\xb4\xb3\xdc\x9d\xa1\x6d\x66\x32\xf4\x0d\xd6\x30\xdd\x0e\x8e\x31\x19\x27\xc7" +
	"\x22\xfe\x5f\xc0\x56\x07\x72\xd4\x68\xfb\x6b\x20\x96\x12\xcc\x96\x6f\x4a\xad\x13\x7a\x60\x36\xc5\x61\xed\x72\x56" +
	"\xdc\x17\xc7\xb8\x75\x52\xdf\xf2\x10\x0b\x24\x2c\x6b\x55\x0f\x74\x0a\xa2\x15\x42\x2e\x62\x98\x0d\x67\x31\xef\x0b" +
	"\x56\xa7\x26\xba\x4d\xf0\x51\x49\x3b\x4b\xd6\x96\x32\xe1\x3e\x7a\x86\x87\x83\xcb\xc7\xd7\x53\xab\x6e\xdd\x70\x58" +
	"\xc2\xb6\x27\x14\xbd\xba\x48\x14\xa1\x2b\x21\x34\x2f\x18\x0e\x91\xbe\x94\x17\x36\x11\xca\x11\xaf\x73\x6d\xf0\x3b" +
	"\xca\x6a\xc2\xad\x5f\xb8\xa0\xc7\xea\xda\x99\x05\xb7\x36\x0d\xf9\x5c\x0e\x54\x2f\xee\x25\xfb\xcd\x72\xa2\x4f\xab" +
	"\xc4\x57\x56\xe1\x20\xb0\x23\xaa\x70\xae\x02\x0f\x6b\x77\x07\x9e\x8d\xc0\x81\x99\xed\x3f\x87\xf2\x31\xb7\x18\xa7" +
	"\x86\x3c\x0e\xd5\xd7\x22\xba\x74\xc1\x71\x03\x3b\x73\xa5\x5c\xd2\x78\xc7\x5d\x7c\xbe\xc9\x95\xe7\xc4\xab\x0b\xa6" +
	"\x4f\x16\x68\xe3\xd3\xeb\x6b\x55\xfa\x08\x4a\x7c\x4e\xaf\x4f\x8d\xec\x56\x4b\xe7\x70\x49\xb9\xf9\x6e\xb7\xb3\x96" +
	"\xa6\x5d\x3c\x6f\xc6\xfa\x54\x4a\x41\xf2\x32\x43\x62\x7c\x3d\x6c\x3d\x0c\x29\x32\xe3\x44\x95\x0f\xf9\xdc\xe5\x97" +
	"\x94\x22\x85\x6b\x58\x70\xdc\xff\x6b\xcd\xda\x4d\xdc\xba\x34\x77\x60\x21\x9a\x56\x4a\x03\xc8\xe5\x32\xba\x56\x9b" +
	"\xdf\x22\x41\xee\x14\x99\xce\xab\xf4\x71\x12\x34\x4d\x83\x66\x60\xad\xbe\x5b\x17\xaa\x7e\x31\x7d\x3a\xfa\x7a\xe3" +
	"\xd6\x6a\xd3\x7c\xf3\x25\x22\x3d\x74\xc1\x3c\xcb\x75\xa0\x9f\x33\x9b\xae\x60\x66\xfc\x3c\x01\x4e\xb0\x59\x3a\x69" +
	"\x9b\xe1\xed\x9e\x8d\xbe\xc3\x2c\x51\x1b\x13\x52\x91\x67\xeb\x55\xa4\x1e\x90\xa1\x62\xab\xf9\x47\xbd\x7c\x40\x9c" +
	"\x68\xf5\xb7\x8a\xba\x1b\x5e\x94\x13\x81\x20\x49\x51\xc5\x89\x88\xbd\x4f\x0f\x1f\xfd\x77\x5e\xbf\xab\x40\x39\x89" +
	"\xbd\x27\x4a\x76\xaa\x42\xbc\x5e\x80\x09\x2b\x04\x29\x44\xec\xed\x28\x16\x69\x8c\xc9\x13\x4d\x88\xaf\x3f\xae\xa0" +
	"\xe6\xa4\xf2\x79\x82\x32\x55\xc2\x71\xc1\xae\x80\x16\x54\x50\x94\xe9\x46\x12\x5f\x07\xdf\x5f\x41\x8e\x9e\x69\x5e" +
	"\xe7\x83\x26\x5a\x0c\x9b\x06\xc1\xa4\x42\x94\x3e\xf9\x5c\xd3\xa7\xd8\xfb\xc3\xff\xf4\x83\x7f\xc3\xf2\x12\x09\xba" +
	"\x51\x97\xbf\x36\x1e\x4a\x62\x82\x55\xf5\xd9\x3f\x37\x54\xc6\xd7\x52\x8e\x58\xe0\xa6\xe6\x82\xe5\xba\x1c\x40\xcb" +
	"\x08\x3d\x6c\xb5\x1a\x67\x34\x61\x79\xce\x8a\x9b\xfb\xfb\x8e\x07\x7b\x9d\xda\x49\xd3\x19\x85\x06\xd8\xc8\x08\xa0" +
	"\xd5\x29\x84\xa9\xf2\x65\xe2\x0b\x9b\x00\x1b\xbe\x94\xf2\x82\x95\x82\x4f\x18\x11\x0c\x55\x9b\x7f\x43\xd4\x88\xd1" +
	"\x82\xcc\xda\xd3\x6b\x55\xf3\x6a\x79\xe9\xf5\x80\xe2\x27\x76\xb7\x84\x27\x15\xd5\xbe\x5b\xeb\xb2\xbd\xb2\x75\x9d" +
	"\x9e\x75\x58\x0e\xfc\xa9\xb3\x51\x7b\x53\x1c\x72\x5f\xe7\x39\xaa\x5e\xc0\x01\x58\xd3\xe5\x41\x73\x36\xe8\x15\x1a" +
	"\x2f\xce\x6d\xd4\x8e\x8a\x42\x83\x6a\xa4\xa1\x5a\xff\x1b\x00\x00\xff\xff\xbe\xd7\xf2\xfc\xc8\x18\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6344,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549121201, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x89\x9e\x82\xc8\xea\xa2\x28" +
	"\xb0\x58\x48\x01\xda\x3c\xd0\x5e\x8a\x22\xce\x02\xbd\xd2\xe2\x58\x62\x97\x0f\x55\x1c\x39\x6b\x08\xfa\xef\x0b\x92" +
	"\x92\x2d\x67\xa5\x24\x5e\x5d\x28\xce\x70\xbe\x79\x71\x66\xd8\x75\x09\xa4\x57\xa5\xa5\x43\x8d\x9f\xa0\x94\x54\xb5" +
	"\xdb\x75\x61\x75\xfa\x1f\x37\xce\x36\x65\x5a\x5a\x92\x1a\xc7\xa5\xc1\xda\x36\xb4\xfe\xa3\x2d\xbe\x20\x3d\x86\xcd" +
	"\x55\x0a\x49\xdf\xaf\x56\x5d\x27\x70\x27\x0d\x02\x8b\x5c\xd6\xf7\x2b\x00\x80\x37\x35\x90\xd5\x69\x69\x13\xbf\x0c" +
	"\xf0\x8f\xe8\x5a\x45\x11\x66\x80\x8f\x48\x3f\x6f\x03\x0d\x3e\xe5\xb0\x3e\x11\x15\xf2\x9d\x0b\xb4\x7b\x5d\xd3\xe1" +
	"\xb6\x92\x4a\x34\x68\x4e\x07\x5c\x65\x9f\xef\xbf\xf2\x22\x0a\xfe\xc9\xdd\xa3\x6d\x8d\x40\x31\x39\x19\x8e\x66\x42" +
	"\xee\xa1\x50\xdc\xb9\x9c\x45\x4d\xec\x26\x30\x22\x8e\xdc\x0d\x1a\x06\xe4\xf1\xcb\x88\x6f\x15\x8e\x82\x61\x93\x08" +
	"\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x90\x8b\x39\x7a\xf3\x3d\x31\xea\x4f\xaf\x50\x6f\x51\x08\x14\x40\x92\x14" +
	"\x02\x59\xf8\x82\x58\x0f\x3b\x6e\x44\xd4\xe8\x80\x6c\x89\x54\x61\x03\xd2\x40\xdd\x48\x43\x28\xe0\x9f\xbb\x07\x77" +
	"\x95\xbe\x30\x7d\x62\x0d\x14\x56\xb9\x9a\x9b\x9c\xfd\xc6\x8e\xbe\x78\x60\x76\xd3\x75\xeb\x27\xff\xd7\xf7\x59\x4a" +
	"\xd5\x8c\xcd\xe9\x9c\xd1\x8b\x9e\x04\x65\x51\x81\xe0\x14\xf0\xe5\x87\x8f\x06\xd8\x9d\xdf\x2d\x29\x79\x55\x72\x43" +
	"\xbc\xa1\x1f\x13\xbd\x37\xe2\xbd\x82\xbe\x04\x26\xd6\xb6\x0d\x27\x69\xcd\xbb\xa5\xab\xe4\x59\x8a\x09\xc0\xdf\x96" +
	"\xd0\x2d\x4a\x2f\x04\x35\x5d\xbc\x37\x5b\x2b\x0e\xdf\xd3\xbb\xae\xe1\xa6\x44\x58\x3f\x34\x5c\xa3\x1b\x96\xc5\x6b" +
	"\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\xfc\xe0\x9d\xd9\xd9\x46\x73\xf2\xb9\x83\x75\xc8\x43\xf0\x68\xc6\xc4" +
	"\x45\xa0\x31\xae\x11\xe9\x49\xea\x1f\x42\xb2\xf5\x00\xb4\x78\x1c\x8e\x65\xfc\x97\xdb\x90\xad\x6b\x14\x0b\x81\x98" +
	"\x95\x90\xa6\x54\x78\xc7\x5f\x96\xff\xb2\xdc\xd4\x9f\x7b\xf3\x3e\x5d\xa8\x1c\x5e\xa8\xc0\x87\xfe\x42\x25\x6f\x9e" +
	"\x7b\xeb\xcc\xbb\xf3\x32\xe6\x56\x4b\x33\x16\x0c\xac\xc7\xbf\x0b\xf2\x6b\x42\xb1\xf8\x56\x14\xca\xe6\x35\xc9\xf9" +
	"\xca\x59\xf2\x28\x4b\x17\x2a\x27\xa3\x9d\xb5\x74\xbc\x5f\xed\x96\x2c\x71\x35\xdb\xca\x5f\x6b\x74\x63\x57\xfd\xf5" +
	"\x54\xf8\x4f\x01\xe8\xc2\xa6\xb3\x1c\xc0\x65\x8c\x9b\x0b\x5b\x8b\x77\xf8\x9c\x91\xa5\x61\xa4\x4c\xc7\xe0\xcc\x0d" +
	"\x9d\x0e\xce\x99\x99\x21\xe4\xfe\x1c\xf5\xd8\x94\xc2\x04\x8e\x83\x7e\xae\x27\x75\x1d\xa1\xae\x95\x6f\x2d\xe3\xab" +
	"\xe2\x38\xf8\x27\x06\x9d\xe5\x75\xba\x1f\x54\x8f\xa4\x55\xf6\x93\xb0\x85\x7f\x88\x40\x45\x5a\xdd\xac\x32\xbf\x80" +
	"\xe2\xa6\xcc\x19\x1a\xe6\x09\xc7\xe6\x9a\x69\x24\x0e\x45\xc5\x1b\x87\x94\xb3\xcf\x4f\x0f\xc9\x47\x36\x65\x19\xae" +
	"\x31\x67\x7b\x89\xcf\xfe\xd1\xc2\x26\x46\x15\xd6\x10\x1a\xca\xd9\xb3\x14\x54\xe5\x02\xf7\xb2\xc0\x24\x6c\xae\xa1" +
	"\x75\xd8\x24\xae\xe0\xca\xc7\x35\x37\xf6\x1a\xa4\x91\x24\xb9\x0a\x44\xcc\x3f\xac\x7f\xb9\x06\xcd\xbf\x4a\xdd\xea" +
	"\x33\x92\x34\xe7\xa4\x33\x63\x2a\xa2\x3a\xc1\xff\x5b\xb9\xcf\xd9\xbf\xc9\xe7\xdf\x93\x5b\xab\x6b\x4e\x72\xab\x90" +
	"\x9d\xec\x91\x98\xa3\x28\xc7\x16\x99\x85\x54\xf9\x3b\x12\xd6\xd5\xea\x65\xc8\x0b\xab\xb5\x35\xb7\x9b\xcd\xe9\x2d" +
	"\x37\x61\xb6\x8e\xac\x1e\x98\x59\x1a\x03\x97\xc5\x52\x9a\x9e\xdb\xb4\x5a\xf3\xe6\xc0\x60\x78\xd6\xf5\xfd\x6a\x36" +
	"\xad\x47\x6e\x96\x46\x90\x2c\x0d\x49\xfa\x16\x00\x00\xff\xff\xc8\x46\x1b\x05\xa2\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2722,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548973265, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
