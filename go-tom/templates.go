// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\xdb\xb8\x12\xbe\xcf\x53\x10\x3a\x28\xd0\x04\xa6\x14\xa7" +
	"\x27\x3d\xad\x9a\x1a\xa7\xbf\xd8\x5e\x74\xb1\x88\xbb\x0f\x40\x89\xb4\xc4\x5a\x24\x05\x72\x1c\xd7\x2b\xf8\xdd\x17" +
	"\xd4\x8f\x2d\x51\x94\xed\xa2\xcd\x4d\x28\x72\x7e\xbe\x19\xce\x7c\x24\x5d\x55\x94\xad\xb8\x64\x28\x58\x6e\x84\x20" +
	"\x7a\x17\xec\xf7\x57\x08\x21\x54\x55\x18\x45\x37\x99\x82\x5d\xc9\x62\x94\x71\xc8\x37\x49\x98\x2a\x11\x7d\x27\xd2" +
	"\x28\x9d\x45\x99\x02\x2e\x58\xf7\x4f\xb3\x52\x69\x08\x1f\x99\xd9\x14\xf0\x7e\x93\xae\x19\xdc\x44\x08\xef\xf7\x57" +
	"\xb5\xb5\x07\x20\x49\xc1\x50\x5a\x10\x63\xde\x06\xa6\x75\xb5\xa8\xd7\x9a\xf5\x44\xd1\xdd\xf1\xbb\xaa\xf8\x2a\xfc" +
	"\x62\xfe\xd2\xea\x3b\x4b\x5b\x7b\x2d\xb0\xa3\x8a\x5e\x0c\x26\x9a\x49\xba\xa8\x2a\x3e\x7f\x25\x51\xd0\x2a\x07\xfb" +
	"\xfd\x43\x04\xd4\x2b\xdb\x01\x02\x0e\x05\x0b\x16\x55\x15\x7e\xb3\x23\x9f\xc6\x43\xd4\xf7\x57\x55\x4c\xd2\x1e\x20" +
	"\x8b\x17\x49\x05\x28\xfc\x48\x80\x3d\x12\x99\xb1\xf0\x93\x28\x61\xf7\xb3\xa0\xbf\x71\xc1\x90\xb6\xfa\xf1\x65\xc0" +
	"\x05\xc3\xb5\x78\x8d\xfe\xe8\xfc\x2b\x97\x5c\x90\x62\x09\x9a\xcb\xec\xe7\xe3\x19\xe1\x1c\x60\xd4\x24\x5d\x33\x8a" +
	"\xac\x73\x3f\x4a\x17\x61\xc1\x56\x60\x01\x0a\x2e\x3f\x6e\x34\x01\xae\x24\x0a\xbb\x91\x6b\xc0\x45\xc6\x57\x88\x48" +
	"\x8a\xc2\x2f\xe6\x51\x6d\x24\x65\x14\x3d\xcf\x89\xf9\x5c\x90\x0c\x05\x26\x57\xdb\x4f\x3f\x48\x0a\xc1\x35\xfa\xd9" +
	"\x54\xd7\x7a\x08\xce\x06\x73\x71\x40\xb5\xc1\xa9\xa8\xce\xe7\xbc\xaa\xa2\x1b\x0b\xfa\x26\x72\x22\x69\x16\x8e\xc0" +
	"\x3f\x6b\x22\x98\x39\x80\x3d\x21\xbf\x52\x5a\x10\xf8\x73\x23\x12\xa6\x51\x58\xeb\x7d\x50\x1b\x09\x3e\xcd\x5a\x2b" +
	"\x72\xfd\x3f\x44\xbd\xce\x7c\x88\xea\x36\x5e\x5c\x75\xd0\xaf\x8e\xf4\x91\x2a\x21\x94\xfc\xb0\x5c\x76\x04\xf2\x60" +
	"\x60\x57\x30\x64\xf9\xe3\x6d\x00\xec\x07\x44\xa9\x31\xbd\x96\x8f\xb5\x52\x80\xaa\x01\x72\x8c\x57\x4a\x02\x36\xfc" +
	"\x1f\x16\xa3\xf9\x5d\x09\x6f\x7c\xcb\x2b\x22\x78\xb1\x8b\x51\x60\x76\x06\x98\xc0\x1b\x1e\xcc\x10\x26\x65\x59\x30" +
	"\xdc\x4c\xcd\xd0\xfb\x82\xcb\xf5\x57\x92\x2e\xeb\xef\xcf\x4a\xc2\x0c\x05\x4b\x96\x29\x86\xfe\xfe\x12\xcc\xd0\xa3" +
	"\x4a\x14\xa8\x19\xfa\x83\x15\x4f\x0c\x78\x4a\x66\xe8\x9d\xe6\xa4\x98\x21\x43\xa4\xc1\x86\x69\xbe\x9a\xa1\xe0\x9d" +
	"\x35\x8a\x3e\xa8\x42\x69\xf4\x49\xa8\xef\xd6\xd3\xc1\x8c\x67\x66\xb9\x13\x89\x2a\x02\x17\x76\x5d\x33\x03\xec\x42" +
	"\x49\x65\x4a\x92\xb2\x69\xd1\x2d\xe3\x59\x0e\x31\x92\x76\x13\x8b\x37\x57\x8e\x60\x6a\x41\xc5\x28\x29\x48\xba\x76" +
	"\x8d\x24\x59\xb7\xbc\xcd\x39\x78\x7c\x40\xc1\x3a\x89\xff\xbc\x98\xbf\xbc\x4f\xfe\xeb\xca\x68\xb5\xc5\x8a\xd2\x83" +
	"\x14\xab\xff\x46\x28\xea\x82\xc0\x5b\x4e\x21\x8f\xd1\xfc\xf6\xf6\xd9\xc8\x57\x2d\x40\x09\x90\x4e\xea\xf5\xfd\x84" +
	"\x10\xe4\x9d\xb7\x27\xa2\x9f\xb7\x11\x5e\x4f\xca\x26\xd9\x40\xba\x8b\x79\x5a\xa1\x4b\x68\xa2\x0a\x3a\x29\x64\x53" +
	"\xdf\xd4\xdf\x6d\xf8\x4a\x33\x31\x8a\xb8\x3d\xbc\x70\xa2\x34\x65\x7a\x88\x78\x90\xb4\x1e\x90\xfd\xd1\x48\x0e\xa2" +
	"\x70\xaa\xbe\x57\xf3\x8d\x99\xc3\x84\x13\xcb\xd9\xec\x24\x24\x5d\x67\xda\xb2\x24\xbe\x24\x37\x83\x8a\xec\xb9\x6e" +
	"\xa6\xfc\xf8\x9b\x83\x7c\x18\x40\xbb\xb1\x8d\x85\x5e\x45\xb8\xe8\x0e\x19\x2b\x48\x69\x58\x8c\xba\xd1\xc0\xd1\xd1" +
	"\x53\x3e\x43\x40\x1d\x57\x05\x97\x0c\xe7\xed\x46\xce\xc3\xbb\xfb\x7a\x8b\xfa\x12\x25\xa1\x94\xcb\xcc\xee\x5f\xbd" +
	"\x8a\xe6\x03\x91\x7d\xcf\x7e\x58\x37\x82\xf5\xd2\x8c\x1c\x5f\x23\x4b\xb7\xfe\x8c\xe4\x6e\x3a\x6c\xcf\xe1\xba\xbb" +
	"\x6d\xf7\x6e\x35\x29\x87\x10\x2d\x1b\x62\x52\xf0\x4c\xc6\xc8\x9e\x24\xc3\xd5\x27\xa6\x2d\x21\x15\x9d\x44\xa2\x00" +
	"\x94\xf0\xbb\x76\xd3\xe3\xea\x82\x2a\x27\x30\x33\x42\xc7\xc8\xa7\xea\xc7\xed\xb9\x53\x75\x39\xec\x65\x5f\xc5\xf5" +
	"\x4b\x7d\xd4\x77\x3e\x85\xae\x71\x1d\x95\x66\xda\x5f\xa6\xe1\x91\x77\xce\x17\xeb\x91\x9d\x4e\x1a\x53\x94\x22\xd0" +
	"\xb1\xb4\xb1\xe5\xbc\xa0\xcf\xef\x24\x9e\x5f\x8f\x37\x61\x2a\x8b\x17\xb0\x43\x68\xc3\xe2\x74\xd4\x60\xc3\x8a\x6a" +
	"\xce\x03\x4f\x50\xaf\x5f\x3f\xf3\x9b\xad\xcb\x01\x6b\x9b\x2f\xc7\x74\xbf\x16\xeb\xf5\x09\x5c\x9e\xfe\x18\x6e\xfb" +
	"\xf1\x4c\x39\xb5\x85\x63\xee\xed\x9f\xf8\xe1\x54\xaf\x86\x49\xfd\x04\x30\x68\xe1\x87\x32\x30\xf2\xd2\x31\x72\xb4" +
	"\xd2\x72\xb7\xbf\x22\xc8\x06\x94\x8f\xb0\x62\xf4\xa2\xfc\x81\x8c\x2a\x38\x6d\x63\xf5\x1d\x01\x4e\xd0\x82\xe8\x8c" +
	"\xcb\x18\xdd\xa2\x5b\xf4\x62\x9a\x3b\x0e\x88\x46\x45\x74\x20\x9f\xf0\xfe\x44\x38\x09\x28\x20\xee\x79\xd2\xf8\xc6" +
	"\xa0\xca\x78\x44\x7e\x1e\x65\xa0\xb3\xfe\x97\xcb\x09\x67\xb6\xaf\xcd\x41\xed\xec\xee\x90\x27\xe7\x56\x32\x60\x9e" +
	"\xd0\x5e\x71\x2e\xaf\x42\x74\x8e\x51\x07\x7c\xe8\x33\xee\x39\xe6\xdc\x0b\xd9\x05\xac\xe3\xdc\xcb\xae\xa7\x29\xfd" +
	"\x57\x02\x58\xd9\x4b\xf1\xef\x09\xe2\x37\x41\x6a\x5b\xcf\xfd\x6f\x1c\x7c\xd1\x4d\x5b\x76\xf6\x40\x8b\xeb\x9a\x7f" +
	"\x73\x13\x9d\x32\xe8\x2b\xda\xa6\x61\xee\x4e\x35\x0c\x10\x0d\x98\x92\xdd\xac\x1b\xdb\x34\xd4\x1f\xaa\xc4\x9e\xc4" +
	"\x5d\x1c\xa7\x54\xc0\xdc\xa8\xb0\x30\x38\xdf\x95\x39\x93\xc6\x47\x10\x78\xcb\x92\x35\x87\x53\x22\x13\x4b\xed\x1b" +
	"\x29\xaa\x1f\x49\x8b\xab\x13\x2f\x26\x24\x18\xe5\xe4\x6d\x50\x6a\x2e\xa1\xf7\x7e\xfa\x7f\x49\x32\x37\xd6\x86\x01" +
	"\xc7\x20\xba\xe4\xfe\x2f\xbc\x17\x7e\x3a\xb0\x8f\xbc\x93\x8f\xb1\xdb\xd2\x7f\x32\x9c\xb8\x0f\x8e\x9f\x03\x16\x32" +
	"\x4e\x34\x23\x6b\xcc\xa5\xe1\xd4\x82\x7d\x52\x9c\xfa\x2d\xeb\x11\x25\x9e\xd3\x76\xa4\xc8\x0a\x2c\x7d\xbb\x99\x77" +
	"\x6e\x41\x93\x4e\x12\xb6\x52\xfa\x62\x27\x27\x85\x4e\xe0\xa5\xdc\x94\x05\xd9\xc5\x4d\x26\xb1\x85\xc4\x34\xb6\xf7" +
	"\x87\x09\x8a\xf0\x6c\xd5\x6f\x02\x3d\x22\xa2\x5f\xf4\x72\x79\xd4\xf6\x6a\x34\x0a\x19\xf5\x3b\xc4\xf7\x93\xc3\xc6" +
	"\x80\x12\xcd\x4f\x0e\xed\xf2\xbf\x01\x00\x00\xff\xff\x68\x28\xd8\x57\xcf\x14\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 5327,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548924609, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc9\x6e\xf3\x36\x10\xbe\xfb\x29\x58\xa2\x87\x36\x88\xa4\xe6\x16" +
	"\x04\x92\x81\x66\x43\x0f\x3d\x65\x01\x7a\xa5\xc5\xb1\xc5\x96\x8b\x2b\x8e\xec\x18\x82\xde\xfd\x07\x29\x6b\xb3\xa9" +
	"\xc4\x87\xfc\xbe\x58\x9a\x5d\xdf\x37\x33\x64\x5d\x47\x24\xb9\xda\x18\x3c\x6c\xe1\x8e\x6c\x04\x16\xd5\x2a\xce\x8d" +
	"\x4a\xfe\x65\xda\x9a\x72\x93\xa0\x51\xc9\xc6\x44\xee\xaf\x84\xad\x29\x31\x7e\x01\x5b\x49\xbc\xaf\xf2\xff\x00\xaf" +
	"\x12\x12\x35\xcd\x62\x51\xd7\x1c\xd6\x42\x03\xa1\xad\x9c\x36\xcd\x82\x10\x42\xbe\x27\x7c\x1b\xe9\xd7\x95\x97\x91" +
	"\xbb\x8c\xc4\x83\x50\x02\x5b\x5b\x2f\xfb\x1b\xd8\xfa\xa1\x10\x92\x97\xa0\x07\xbd\x2d\xcc\xfe\xe9\x83\xe5\xde\x8f" +
	"\x69\x4e\xe2\xbf\x98\x7d\x31\x95\xe6\xc0\x3b\x6b\xf2\x5b\xc1\xec\xb3\x64\x1b\x42\x7b\x73\xfa\x3b\x71\x1f\xe6\xa2" +
	"\xa4\x5c\xec\x48\x2e\x99\xb5\x19\x6d\x6b\xa0\x4b\xaf\x68\x53\x88\x35\x69\xab\x38\x26\xed\x7e\x29\xb2\x95\x84\xce" +
	"\xd1\xbf\x44\x86\xf3\x91\xef\x60\x59\x00\xe3\x21\x79\x79\x2e\x3c\x3a\xf4\x71\x8b\x68\x2f\x38\xd0\x65\x6a\xb7\x4c" +
	"\xf7\x52\x81\x12\xe8\xb2\xae\xe3\x37\xf7\xd4\x34\x69\xe2\xd4\xcb\x34\xc1\xe2\xeb\x90\x42\x79\x5f\x71\x73\xab\x09" +
	"\x7d\xac\x4a\x86\xc2\x68\xea\x82\xcc\x79\xb7\x28\xf4\xe0\x9d\x20\x71\x51\x9e\x96\x24\x7e\x59\x36\xd0\x3c\x90\x23" +
	"\x4d\x42\x80\xb9\x38\x33\xf0\xae\x0c\x3f\x9c\xcb\xeb\xba\x64\x7a\x03\x61\x56\x07\xe7\x19\x6e\x5a\x25\x9f\x60\x8f" +
	"\x81\xec\x23\xdb\x53\x40\x94\xd0\x1d\xea\x24\xee\x9e\xbe\x8a\x73\x39\x05\x97\x64\xf5\x31\x2e\x4f\x1d\xe6\x83\xcc" +
	"\x72\xf2\x09\x83\x61\x4e\x52\x5c\x1b\x83\x5d\xc9\xb6\x5a\xa1\x41\x26\x83\xb3\x34\x3f\x33\x7d\xaf\xbd\x79\xe7\xcf" +
	"\x5a\x2c\xd0\xa6\x63\x7c\x8e\xbb\x68\x4a\xce\xcf\x98\x8d\x50\xd2\x73\x6e\xbe\x6b\x4e\x1c\xc6\x53\x45\x9a\xf8\xc5" +
	"\x35\xde\x77\x20\x2d\x9c\x04\xf5\x9f\x18\x3f\xa9\x2d\x1e\x02\xe9\xbc\x56\x1b\x24\xf1\x23\x43\x78\x71\xb3\x35\x6b" +
	"\x4b\x4e\xf6\xad\x5f\x64\xc4\xcf\xa3\x5f\x67\x7d\x04\xf7\xdd\x5c\xec\x2e\x6b\xad\x60\xd1\xa7\xa9\x5a\x74\x6d\xa0" +
	"\xa7\xbc\xe5\x25\xeb\x75\x86\x85\x76\x9d\x1c\x4f\xb6\xb9\x85\x32\x45\xea\x33\x7c\x06\x6b\x04\xb5\x95\x0c\x87\x63" +
	"\xb7\x3f\x19\xc3\xf6\xf3\x63\x3a\xdf\x2a\x67\x20\x9f\x9a\x8e\xdf\x8f\xe6\x9d\x68\x91\xfe\xc2\x4d\xee\x0e\x7f\x52" +
	"\xa0\x92\xcb\x45\xea\xfe\x88\x64\x7a\x93\xd1\xba\xf6\x0f\xf7\xcc\x02\x69\x1a\xea\x94\xfd\x9a\x4e\x15\x20\x23\x79" +
	"\xc1\x4a\x0b\x98\xd1\xf7\xb7\xe7\xe8\x96\x8e\x55\x9a\x29\xc8\xe8\x4e\xc0\xde\x5d\x1a\xe8\xa8\xc0\xdc\x68\x04\x8d" +
	"\x19\xdd\x0b\x8e\x45\xc6\x61\x27\x72\x88\xfc\xcb\x35\xa9\x2c\x94\x91\xcd\x99\x74\x4d\x9d\x69\x73\x4d\x84\x16\x28" +
	"\x98\xf4\x42\xc8\x6e\xe2\x3f\xae\x89\x62\x1f\x42\x55\x6a\x22\x12\x7a\x2a\x9a\x14\x53\x20\x6e\x23\xf8\xbf\x12\xbb" +
	"\x8c\xfe\x13\xbd\xff\x19\x3d\x18\xb5\x65\x28\x56\x12\xe8\x50\x8f\x80\x0c\xb8\x6b\xe3\xe3\xad\xc2\x37\x91\x3b\x91" +
	"\xfd\xff\x62\x71\x4a\x69\x6e\x94\x32\xfa\xe1\xf5\x75\xb8\x4c\x8d\x94\x95\x45\xa3\x8e\xca\x34\x69\x91\x4b\xdb\xdd" +
	"\xe9\xbb\x68\x72\xa3\x79\xad\x94\x62\xe5\x21\x14\xa8\x53\x75\xed\xd9\x34\x3d\x7b\xc1\xfe\xea\xad\xd2\xa4\xcd\x96" +
	"\x26\x9e\xda\x1f\x01\x00\x00\xff\xff\x74\xb2\x52\x2b\x49\x0a\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 2633,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548924643, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdd\x6b\xe4\x36\x10\x7f\xdf\xbf\x62\x2a\xfa\x14\x62\xbb\x47\x29" +
	"\x1c\x87\x1d\x68\xf3\x41\x0b\xa5\x94\x6c\x0e\xfa\xaa\xb5\x66\x6d\xf5\xf4\xe1\x5a\xe3\xcd\x2d\x66\xff\xf7\x22\xc9" +
	"\xde\xf5\xe6\xec\x24\x7b\x7e\x91\x35\xa3\xf9\xcd\x97\x66\x46\x7d\x9f\x40\x76\x55\x59\xda\x37\xf8\x09\x2a\x49\x75" +
	"\xb7\x49\x4b\xab\xb3\x7f\xb9\x71\xb6\xad\xb2\xca\x92\xd4\x38\x2e\x2d\x36\xb6\xa5\xf4\xb7\xae\xfc\x82\xf4\x18\x36" +
	"\x57\x19\x24\x87\xc3\x6a\xd5\xf7\x02\xb7\xd2\x20\xb0\xc8\x65\x87\xc3\x0a\x00\xe0\x4d\x0d\x64\x75\x56\xd9\xc4\x2f" +
	"\x03\xfc\x23\xba\x4e\x51\x84\x19\xe0\x23\xd2\x8f\x9b\x40\x83\x4f\x05\xa4\x27\xa2\x42\xbe\x75\x81\xf6\x27\xf2\xed" +
	"\x6d\x2d\x95\x68\xd1\x9c\xf8\xae\xb6\xcf\xf7\x5f\x79\x19\xe5\x7e\xe7\xee\xd1\x76\x46\xa0\x98\x9c\x0c\x47\x73\x21" +
	"\x77\x50\x2a\xee\x5c\xc1\xa2\x22\x76\x13\x18\x11\x47\x6e\x21\xbd\xd7\x0d\xed\x07\xe4\xf1\xcb\x89\x6f\x14\x8e\x82" +
	"\x61\x93\x08\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x91\x8b\x39\x7a\xfb\x2d\x31\xea\xcf\xae\x50\x6f\x50\x08\x14" +
	"\x40\x92\x14\x02\x59\xf8\x82\xd8\x0c\x3b\x6e\x44\xd4\xe8\x80\x6c\x85\x54\x63\x0b\xd2\x40\xd3\x4a\x43\x28\xe0\xef" +
	"\xbb\x07\x77\x95\xbd\x30\x7d\x62\x0d\x94\x56\xb9\x86\x9b\x82\xfd\xc2\x8e\xbe\x78\x60\x76\xd3\xf7\xe9\x93\xff\x3b" +
	"\x1c\xf2\x8c\xea\x19\x9b\xb3\x39\xa3\x17\x3d\x09\xca\xa2\x02\xc1\x29\xe0\xcb\x0f\x1f\x0d\xb0\x3b\xbf\x5b\x52\xf2" +
	"\xaa\xe4\x9a\x78\x4b\xdf\x27\x7a\x6f\xc4\x7b\x05\x7d\x05\x4c\xac\xed\x5a\x4e\xd2\x9a\x77\x4b\xd7\xc9\xb3\x14\x13" +
	"\x80\xbf\x2c\xa1\x5b\x94\x5e\x08\x6a\xb6\x78\x6f\x36\x56\xec\xbf\xa5\xf7\x7d\xcb\x4d\x85\x90\x3e\xb4\x5c\xa3\x1b" +
	"\x96\xc5\x6b\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\x7c\xef\x9d\xd9\xda\x56\x73\xf2\xb9\x83\x34\xe4\x21\x78" +
	"\x34\x63\xe2\x22\xd0\x18\xd7\x88\xf4\x24\xf5\x77\x21\xd9\x66\x00\x5a\x3c\x0e\xc7\x32\xfe\xc3\xad\xc9\x36\x0d\x8a" +
	"\x85\x40\xcc\x4a\x48\x53\x29\xbc\xe3\x2f\xcb\x7f\x59\x6e\xea\xcf\xbd\x79\x9f\x2e\x54\x0e\x2f\x54\xe0\x43\x7f\xa1" +
	"\x92\x37\xcf\xbd\x75\xe6\xdd\x79\x19\x73\xab\xa5\x19\x0b\x06\xd2\xf1\xef\x82\xfc\x9a\x50\x2c\xbe\x15\x85\xb2\x79" +
	"\x4d\x72\xbe\x72\x96\x3c\xca\xb3\x85\xca\xc9\x69\x6b\x2d\x1d\xef\x57\xb7\x21\x4b\x5c\xcd\xb6\xf2\xd7\x1a\xdd\xd8" +
	"\x55\x7f\x3e\x15\xfe\x53\x00\xba\xb0\xe9\x2c\x07\x70\x19\xe3\xe6\xc2\xd6\xe2\x1d\x3e\x67\xe4\x59\x18\x29\xd3\x31" +
	"\x38\x73\x43\xa7\x83\x73\x66\x66\x08\xb9\x3b\x47\x3d\x36\xa5\x38\xe8\xe7\xda\x51\xdf\x13\xea\x46\xf9\xae\x32\xbe" +
	"\x27\x8e\x23\x7f\x62\xcb\x59\x4a\xa7\xfb\x41\xeb\x48\x5a\xe5\x3f\x08\x5b\xfa\x27\x08\xd4\xa4\xd5\xcd\x2a\xf7\x0b" +
	"\x28\x6e\xaa\x82\xa1\x61\x9e\x70\xec\xab\xb9\x46\xe2\x50\xd6\xbc\x75\x48\x05\xfb\xfc\xf4\x90\x7c\x64\x53\x96\xe1" +
	"\x1a\x0b\xb6\x93\xf8\xec\x9f\x2b\x6c\x62\x54\x69\x0d\xa1\xa1\x82\x3d\x4b\x41\x75\x21\x70\x27\x4b\x4c\xc2\xe6\x1a" +
	"\x3a\x87\x6d\xe2\x4a\xae\x7c\x48\x0b\x63\xaf\x41\x1a\x49\x92\xab\x40\xc4\xe2\x43\xfa\xd3\x35\x68\xfe\x55\xea\x4e" +
	"\x9f\x91\xa4\x39\x27\x9d\x19\x53\x13\x35\x09\xfe\xd7\xc9\x5d\xc1\xfe\x49\x3e\xff\x9a\xdc\x5a\xdd\x70\x92\x1b\x85" +
	"\xec\x64\x8f\xc4\x02\x45\x35\x76\xc7\x3c\x64\xc9\x5f\x8f\xb0\xae\x56\x2f\x43\x5e\x5a\xad\xad\xb9\x5d\xaf\x4f\xaf" +
	"\xb8\x09\xb3\x73\x64\xf5\xc0\xcc\xb3\x18\xb8\x3c\x56\xd1\xf4\xdc\xba\xd3\x9a\xb7\x7b\x36\xe6\xf9\x70\x58\xcd\xa6" +
	"\xf5\xc8\xcd\xb3\x08\x92\x67\x21\x49\xff\x07\x00\x00\xff\xff\x8c\xe9\x88\x64\x9c\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2716,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547324009, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
