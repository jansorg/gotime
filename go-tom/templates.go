// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xef\x6e\xdb\x38\x12\xff\x9e\xa7\x18\x68\xb1\x40\x12\x98\xb2\x93" +
	"\x5c\x17\xad\x36\x0d\xae\x4d\xdb\xbb\x02\xd7\xc3\x21\xe9\x3d\x00\x25\xd2\x12\x1b\x8a\x14\xc8\x71\x1c\xd7\xc8\xbb" +
	"\x1f\xa8\x3f\xb6\x44\x51\x8e\xd3\xdb\xe4\x83\x25\x72\x38\xf3\x9b\x19\xfe\x66\x48\x6d\xb7\x8c\x2f\x85\xe2\x10\xdd" +
	"\xaf\xca\x92\x9a\x4d\xf4\xfc\x7c\x02\x00\xb0\xdd\x12\x98\x9f\xe7\x1a\x37\x15\x4f\x20\x17\x58\xac\xd2\x38\xd3\xe5" +
	"\xfc\x07\x55\x56\x9b\x7c\x9e\x6b\x14\x25\xef\x7e\x0c\xaf\xb4\xc1\xf8\x8e\xdb\x95\xc4\x8f\xab\xec\x81\xe3\xf9\x1c" +
	"\xc8\xf3\xf3\x49\xad\xed\x1a\x69\x2a\x39\x64\x92\x5a\xfb\x3e\xb2\xad\xa9\x9b\x7a\xae\x99\x4f\x35\xdb\xec\xdf\xb7" +
	"\x5b\xb1\x8c\xbf\xda\xff\x18\xfd\x83\x67\xad\xbe\x16\xd8\x7e\x89\xb9\x19\x0c\x34\x83\xec\x66\xbb\x15\x17\x6f\x15" +
	"\x44\xed\xe2\xe8\xf9\xf9\x7a\x8e\x2c\x28\xdb\x01\x42\x81\x92\x47\x37\xdb\x6d\xfc\xdd\x3d\x85\x56\x5c\xcf\xfb\xf6" +
	"\xb6\x5b\xae\x58\x0f\x90\xc3\x0b\x4a\x23\xc4\x9f\x28\xf2\x3b\xaa\x72\x1e\x7f\x2e\x2b\xdc\xbc\x16\xf4\x77\x51\x72" +
	"\x30\x6e\x7d\x72\x1c\xf0\x92\x93\x5a\xbc\x46\xbf\x37\xfe\x4d\x28\x51\x52\x79\x8f\x46\xa8\xfc\xf5\xfe\x8c\x70\x0e" +
	"\x30\x1a\x9a\x3d\x70\x06\xce\x78\x18\xa5\x8f\x50\xf2\x25\x3a\x80\xa5\x50\x9f\x56\x86\xa2\xd0\x0a\xe2\xee\x29\xfe" +
	"\x87\xcb\xed\x50\x89\x8f\x4e\x2c\x81\x2a\x06\xf1\x57\x7b\xa7\x57\x8a\x71\x06\xa7\x05\xb5\x5f\x24\xcd\x21\xb2\x85" +
	"\x5e\x7f\x7e\xa2\x19\x46\x67\xf0\xda\x70\xd7\xeb\x00\x5f\x74\xe8\x97\x9c\xaa\x95\xff\xca\x5e\x9a\x9f\x3b\xe0\xe7" +
	"\xf3\xd1\xe0\x1e\xf8\x17\x43\x4b\x6e\x77\x60\x27\x64\x97\xda\x94\x14\xff\xbd\x2a\x53\x6e\x20\xae\xd7\xdc\xea\x95" +
	"\xc2\xc9\x55\x73\xdf\xee\xf5\xbc\xc7\xcc\xeb\x79\x4d\xe3\x9b\x93\x0e\xf2\xc9\xbe\x7c\x64\xba\x2c\xb5\xba\xbd\xbf" +
	"\xef\x0a\xc8\xb5\xc5\x8d\xe4\xe0\xea\xc7\xfb\x08\xf9\x13\xce\x33\x6b\x7b\x94\x4f\x8c\xd6\x08\xdb\x41\x60\x08\x59" +
	"\x6a\x85\xc4\x8a\x9f\x3c\x81\x8b\xcb\x0a\xff\x0c\x4d\x2f\x69\x29\xe4\x26\x81\xc8\x6e\x2c\xf2\x92\xac\x44\x34\x03" +
	"\x42\xab\x4a\x72\xd2\x0c\xcd\xe0\xa3\x14\xea\xe1\x1b\xcd\xee\xeb\xf7\x2f\x5a\xe1\x0c\xa2\x7b\x9e\x6b\x0e\xff\xfd" +
	"\x1a\xcd\xe0\x4e\xa7\x1a\xf5\x0c\xfe\xc9\xe5\x23\x47\x91\xd1\x19\x7c\x30\x82\xca\x19\x58\xaa\x2c\xb1\xdc\x88\xe5" +
	"\x0c\xa2\x0f\x4e\x29\xdc\x6a\xa9\x0d\x7c\x2e\xf5\x0f\x67\x69\xa7\x26\x30\x72\xbf\x29\x53\x2d\x23\x1f\x76\xbd\x5f" +
	"\x86\xd8\xff\xb5\xca\x04\xa3\x70\xab\x95\xd5\x92\x47\x33\xf8\xa6\x15\xcd\xf4\x0c\x4a\xad\xb4\xad\x68\xc6\xa7\x95" +
	"\xac\xb9\xc8\x0b\x4c\x40\xb9\xf4\xca\x3f\x4f\x3c\xc1\xcc\xc1\x4d\x20\x95\x34\x7b\xf0\x95\xa4\x79\x37\xbd\x2e\x04" +
	"\x06\x6c\xa0\xe4\x9d\xc4\x6f\x57\x17\x7f\xbc\x49\xff\xe6\xcb\x18\xbd\x26\x9a\xb1\x9d\x14\xaf\xff\x7c\xa9\x7a\x96" +
	"\xac\xd4\xca\x72\x96\xc0\x6f\x6f\xdf\xb9\xff\x11\x1a\x6d\x18\x37\xad\xac\x6c\x9c\x7a\xa4\xe6\x74\xb8\xfc\x6c\xe4" +
	"\x61\xbd\x0d\xc9\x5a\x30\x2c\x12\xb8\x58\x2c\x7e\x1f\xf9\x51\x0b\x30\x8a\xf4\x65\x29\x2c\x3a\x57\x7a\xa6\xcf\x26" +
	"\x65\xd3\x7c\x20\xdd\x05\x74\x7a\x41\x97\xad\x54\x4b\x36\x29\xe4\xf2\xda\x6c\xfb\x45\xfc\xd6\xf0\x72\xe4\x72\xdb" +
	"\x33\x07\x21\xeb\x30\x0c\x32\xd2\x03\xf2\xbc\x57\x52\x60\x29\x3d\xb2\xf5\xa8\xd6\xa8\xd9\x0d\x78\xbe\xbc\x18\x9d" +
	"\x94\x66\x0f\xb9\x71\x85\x99\x1c\x13\x9b\x01\x11\x7a\xa6\x9b\xa1\x30\xfe\xe6\xfc\x30\x74\xa0\xcd\x6c\xa3\xa1\xb7" +
	"\x25\x7c\x74\xbb\x88\x49\x5a\x59\x9e\x40\xf7\x34\x30\xb4\xb7\x54\xcc\x00\x99\x67\x4a\x0a\xc5\x49\xd1\x26\xf2\x22" +
	"\xbe\x7c\x53\xa7\xa8\x2f\x51\x51\xc6\x84\xca\x5d\xfe\xea\x59\xb8\x18\x89\xf4\x6b\x5b\x78\xd2\x27\x76\x28\x10\x45" +
	"\x5c\x93\xd4\x81\x6c\x9e\x3c\xa8\x23\x20\x8b\x09\x3d\x7e\x34\x5d\x3d\x20\x75\xe5\x71\x00\xd6\x86\x56\x43\x84\xae" +
	"\x86\x13\x2a\x45\xae\x12\x70\xbd\x6f\x38\xfb\xc8\x8d\x2b\xa3\xb2\x93\x48\x35\xa2\x2e\xc3\xa6\xfd\xe8\xfa\x6b\x51" +
	"\x57\x13\x98\x39\x65\x63\xe4\x53\xdb\xcf\xa7\xec\xa1\x6d\x3d\x2c\x05\xa1\x0d\xdb\x67\xca\x88\xb6\xa1\x05\x5d\x32" +
	"\xbd\x25\xcd\x70\x78\x97\xc7\xfb\xba\xf5\xf2\x5e\xdf\x57\xb7\x83\xca\x34\x63\x80\x26\x51\xce\xb7\x42\x48\x76\x7a" +
	"\xa9\xc8\xc5\x19\x20\x9b\x0d\x24\x5c\x97\x0f\xca\x1d\x1b\xed\x23\x8a\x50\x6b\xaf\xa4\x68\xc4\x13\x20\x4b\x94\xc6" +
	"\xd3\x44\x52\x8b\x8d\xc9\xb3\x99\x2f\x52\x8c\x44\xc2\xbb\x9d\x98\x96\x9a\x03\x5e\xf5\x4d\x37\x1a\x49\x88\x31\x6d" +
	"\x6c\x2f\x17\x23\x52\x96\xf4\x89\x4c\xcf\xd6\x84\xd0\x8f\xdc\x2c\xa5\x5e\x27\xc0\xa5\x14\x95\x15\x76\x28\xd4\xcd" +
	"\x93\xa7\x04\x0a\xc1\x18\x57\x13\xa1\x29\x9c\xa5\x11\xb4\x21\x29\x87\x55\xa1\x87\xfd\xdd\xbb\xdf\xc3\x6a\x6b\x46" +
	"\x35\xd1\xf1\x54\xf7\xe9\x5c\xcf\x4f\xe0\x0a\x04\x6c\xc8\x9c\xfd\x91\xe1\x10\x0b\xc6\xdd\xaf\x5f\x0e\xe3\xab\xc9" +
	"\xc4\xa5\xf5\xe5\xcf\xc2\x4d\x18\xcb\x40\xcb\x1f\x93\x5a\xda\xf6\x19\xce\x3c\x5d\xa1\x0e\xf5\x8c\x04\xae\xaa\x27" +
	"\xb0\x5a\x0a\xd6\x3a\x1b\xea\xc2\x67\xfe\x9e\x31\xb9\x50\x09\x2c\x60\x01\x57\xd3\xf5\x77\x87\x68\x54\x0d\x77\x05" +
	"\x3c\x7e\x73\xc0\x9d\x14\x35\x52\xbf\xa5\x37\xb6\x09\xea\xea\x10\x15\x1c\x53\x77\x0a\x5c\xbb\xf3\x46\x7c\x40\xad" +
	"\xb3\x8d\x56\x2f\x20\xe3\x13\xdc\x04\xf5\x33\x2d\x77\x26\x66\xc3\xd7\xb0\x39\xd7\x62\xfe\x0f\x7b\xee\xb4\x1c\xda" +
	"\x2a\xc3\x73\x87\x7f\x30\x3f\xa2\x8e\x7b\xa7\xf0\xb3\xe9\x26\xe9\xb1\x0a\x5e\x6a\xb2\x3e\x7c\xe2\xda\x1d\x37\xc7" +
	"\xf3\xf6\x45\x0b\x23\x9f\x86\xac\x1c\x01\x98\xc8\xd0\x11\xfc\x1f\xa9\xfa\x45\x3d\xaf\x40\xdc\x14\x8a\x20\x23\x1a" +
	"\x36\x5e\x1e\x62\x23\x52\x83\x84\xd1\xcd\xac\x7b\x76\xa8\xeb\x17\x5d\x91\xc0\x66\x3a\x3a\x93\x4a\x23\xb7\xfe\x3d" +
	"\xb7\xb4\xa4\xd8\x54\x05\x57\x36\x54\x7d\xc8\x9a\xa7\x0f\x02\x0f\x89\x4c\x4c\xf5\x0d\xb3\xf6\x53\x04\xf9\xc9\x8d" +
	"\x3e\x14\x79\xef\xae\xb5\xd7\x05\xf5\x9d\xbf\xbe\xc7\xdf\xb4\xdf\xf1\x82\x97\x7a\x28\x39\x13\xf4\x7d\x54\x19\xa1" +
	"\xb0\x77\xc5\xff\x7b\x45\x73\x3f\x6e\x4d\xa9\x1e\x3b\xd4\x25\xea\x72\x51\x86\xcb\x56\x7d\x40\x39\xfc\xb9\xe0\xe9" +
	"\xb5\x57\x87\xf1\xa5\xd0\x21\x26\xa9\xe1\xf4\x81\x08\x65\x05\x73\x58\x1f\xb5\x08\x6f\x39\xf4\xb9\xf9\xf2\x6a\x4f" +
	"\x8a\x2e\xd1\xb5\x99\xc9\x24\x36\x27\xde\x49\x23\x29\x5f\x6a\x73\xb4\x91\x83\x42\x07\xf0\x32\x61\x2b\x49\x37\x49" +
	"\x13\xc9\xb6\x2a\x11\x77\x06\x9c\x38\xa6\x07\x52\xf5\x17\x81\xee\x5b\x59\x8e\xbf\x1f\xbd\xda\xca\xf1\x5e\xbb\x16" +
	"\x39\x72\x19\xfa\x04\x09\x7d\x14\x5b\x59\xd4\x65\xf3\x51\xac\x9d\xfe\x5f\x00\x00\x00\xff\xff\x6f\x8c\xeb\x91\x71" +
	"\x17\x00\x00")

func bindataReportsHtmlCommonsgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsgohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 6001,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549014599, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultgohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\xb6\x1c\x1f\xec\x8c\x29\x26\xb7" +
	"\x4c\x86\xd4\x4c\xe3\x24\x6d\x0f\xbd\xd8\x4e\xa7\xd3\x1b\x44\xac\x44\xb4\x24\xa0\x12\xa0\x65\x97\xa3\x77\xef\x00" +
	"\xfc\x01\x49\x81\x14\x65\x7b\x32\x39\xe4\x24\x11\x58\xec\x02\xdf\xee\x7e\xbb\x40\x59\xfa\x10\xbc\xd9\x0a\xf5\xb4" +
	"\xc3\x0f\xb0\x65\x2a\x29\xd6\xcb\x58\x64\xc1\xdf\x84\x4b\x91\x6f\x03\x25\xb2\x60\x2b\x7c\xfd\x93\xe3\x4e\xe4\x6a" +
	"\x79\x8b\xb2\x48\xd5\xc7\x22\xfe\x07\xd5\x9b\x00\xfc\xc3\x61\xb1\x28\x4b\x8a\x1b\xc6\x11\xbc\x7b\xb2\x4e\xb1\x9a" +
	"\xf4\x0e\x87\x05\x00\xc0\xeb\xd8\xa8\x34\x5d\xac\xcd\x18\x7c\x88\x60\x69\x07\x53\x24\x1b\x69\xc6\x3e\x67\x3b\xf5" +
	"\x74\x93\xb0\x94\xe6\xc8\xad\x80\x4c\xc4\xfe\xf3\x23\x89\xcd\x42\xc2\x29\x2c\x7f\x25\xf2\x56\x14\x9c\x22\x6d\xa4" +
	"\xe1\x32\x21\xf2\x4b\x4a\xb6\xe0\xb5\xe2\xde\x15\xe8\xe3\x69\x2d\xa1\xd2\x27\x83\x38\x25\x52\x46\x9e\xf9\xf0\x05" +
	"\xa5\xde\xca\xcc\x56\x12\x09\x12\xda\xfd\xce\xed\x47\x2d\xd0\xae\x4f\xfc\x3d\xa3\xe8\xad\x42\xb9\x23\xbc\x1d\x65" +
	"\x2a\x45\x6f\x55\x96\xcb\x7b\xfd\xef\x70\x08\x03\x3d\xbd\x0a\x03\x95\x8c\xab\x62\x19\xfa\xda\x32\xe6\x7a\x29\x7b" +
	"\xf7\x9e\x83\xf7\xa9\xc8\x89\x62\x82\x7b\x5a\xc7\x70\x71\x59\xb2\x0d\x58\x4c\x6a\x98\xce\x51\x5f\x61\x49\xa7\x8d" +
	"\x20\xa7\x1d\xd5\x61\xd0\x85\x43\xcb\x0f\xc0\x5a\x0b\xfa\x64\xbf\xcb\x32\x27\x7c\x8b\x50\xf9\x76\xb0\xc5\x23\x64" +
	"\xab\x41\xda\x43\x4e\x51\xa7\x4c\xf7\x5c\xfa\x40\x19\xe3\x0d\x58\xb0\x6c\xfe\x2d\x7f\x41\x35\xa6\xe3\x34\x7a\xe7" +
	"\x5a\xaa\xf5\x8c\x99\xeb\xe3\x78\x8c\xa5\x03\xe9\x3e\x96\xa1\xda\x08\xa1\x7a\x81\xd9\xec\x2d\x17\x7b\x5f\x16\x6b" +
	"\x25\x14\x49\xbd\xa3\x10\x6b\xfd\x7d\x6f\xe6\x5d\x6e\x1e\x44\x0a\x0c\xc2\xa5\x7b\xe6\x3a\x77\x8f\x41\x7e\x69\x78" +
	"\x9e\x6b\xd4\xe2\x7d\x6e\xcc\x5a\x1c\xc3\xc0\x50\xc0\x6a\xd1\xac\xe9\x70\xe0\xef\x44\xe5\xec\xf1\x9b\x91\xe0\x28" +
	"\x3d\x51\xa2\x08\xb4\x4c\x55\xff\xcb\xcc\xe6\xce\xa4\xad\xe7\xd2\x54\x59\xee\x99\x4a\x80\x71\x8a\x8f\xad\x2b\x0c" +
	"\xe1\x56\xc7\x92\xf0\xd6\xe1\xde\xd7\xc3\xaa\xaf\xb5\x62\x94\x9e\xfd\xd1\xec\x1d\xe3\xbf\x0e\xbf\xe8\xf4\x38\xce" +
	"\x4d\x67\xbe\x9e\xa0\x53\x77\x7a\x3d\x97\x31\x1d\x30\xcf\xe3\xcf\x76\x93\x55\x8c\xf8\x95\x9f\xc1\xfc\x44\x9e\x3d" +
	"\xfb\x11\x0e\x8b\x17\x82\x3d\xa0\x4a\xa7\x14\x34\xcc\x60\x53\xf9\xb7\xa6\x84\xff\x85\xb9\x18\x51\xde\x1a\xe9\x06" +
	"\x70\x53\xb8\xfc\xff\x30\x17\x27\x8b\x80\x89\xed\x89\x3d\x61\x2a\x71\x8e\xf5\x17\xdb\x39\x8a\xab\x56\xfd\x64\xe5" +
	"\x98\xf2\x74\x2c\xd2\x96\xff\xc1\x72\x69\x5b\x12\xdc\xce\x9f\xae\x99\xc3\x0a\xf1\x8d\x8a\x95\x33\x78\x67\x54\xb0" +
	"\x36\x6f\xd8\xf5\x45\xac\xa3\x55\xf3\xea\x65\x45\x59\x03\xae\xba\x3a\x15\xce\xce\xc2\x34\xb2\xe5\x76\x4d\x1d\x1b" +
	"\x97\x5d\x54\x2f\x65\x91\x19\x5b\x7f\x90\xb4\x40\xd9\x24\x35\x5c\xb0\x2b\x8d\xf3\xd5\x78\xbc\x9c\xae\x6a\x8e\x8d" +
	"\xd6\x8c\x04\x23\xe1\x50\x6f\xff\xfc\x72\xfe\xcc\x02\xfa\xfd\xdc\x1f\xaa\xad\x52\xf6\xd0\xa0\x55\xad\xf7\xba\x01" +
	"\xcd\x36\xc0\x64\x55\xf3\x1b\x50\x8e\x6a\x82\xc2\x6c\x97\x12\x35\x6c\x0e\x5a\xbf\x76\x16\x54\x84\x02\xba\x07\x72" +
	"\xf5\xbe\x5d\x5d\xdd\xcb\x96\xc3\xb4\x93\x9a\x2a\x0e\x35\xe7\x74\x16\x49\xb6\x01\x2e\x14\x2c\x3f\x11\x85\xb7\x3a" +
	"\x31\x46\x65\x87\xd0\x98\x8c\x03\x93\x4c\xa6\x42\xb4\x1a\x74\x54\x50\xf6\x30\xaf\xb7\x1d\xe5\xd3\x63\x2f\xc8\xa9" +
	"\x8c\x3a\xd5\xac\x38\x57\x9e\x53\xb6\xfa\x70\x4d\x81\x64\xa5\xad\xeb\x1a\xaf\x2d\x27\xb5\x8f\x53\xfe\xd8\x9c\x03" +
	"\xe9\xa1\x68\xf7\xbb\x16\x1f\xcd\xc1\x2a\x5a\xbf\x87\x4c\x84\xd7\xbb\xc9\x9f\x4c\xe7\x91\x4b\xe7\xa9\x07\x00\x2b" +
	"\xd9\xef\xd4\xec\xb8\xa3\xed\x82\xd7\x7d\x18\x70\xa9\xac\xef\x9f\x33\x5e\x06\xfa\x28\x9c\xba\xe3\x4e\xda\x99\xf1" +
	"\x44\x60\xad\x8d\xc5\xb2\xb3\x4f\x1d\x36\xc2\x76\x2b\xfd\x4e\xc2\xaa\x9f\x78\x4a\xb0\x8b\x47\x7c\x03\x33\x9f\x16" +
	"\x3a\xb2\x2f\x7e\x62\xb0\x3b\x9f\xeb\x86\x73\x2d\x4f\x3e\x39\x58\xf3\x93\x2d\xa7\x03\xb0\x09\x4f\xba\x7d\x33\xec" +
	"\xf6\xec\xf8\x9c\xae\xcf\x4a\xcf\x79\xaa\xe8\x48\x4f\xe1\x34\xf7\x99\xc2\x9e\xf9\x05\xb9\xf2\xec\xa7\x8a\x19\x88" +
	"\xbb\x73\xe7\x18\xef\xb6\x13\xeb\xe8\xfc\xd1\x37\xfc\xe8\x1b\xce\xe9\x1b\xc2\x9f\xa8\x88\x75\x5b\x00\x89\xca\xd2" +
	"\xd5\x22\xd4\x3f\x90\x12\xbe\xd5\x77\x47\xf3\xe7\x23\x91\x08\xfa\xfe\xb8\x08\x2d\x7f\x87\x19\x2a\x02\x71\x42\x72" +
	"\x89\x2a\xf2\xbe\xde\x7f\xf1\xdf\x7b\xdd\x29\x4e\x32\x8c\xbc\x07\x86\x7b\xdd\x4e\x78\x9d\x0d\xc6\x82\x2b\xe4\x2a" +
	"\xf2\xf6\x8c\xaa\x24\xa2\xf8\xc0\x62\xf4\xcd\xc7\x35\x14\x12\x73\x5f\xc6\x24\xd5\x91\x1d\x71\x71\x0d\x8c\x33\xc5" +
	"\x48\x6a\x06\x31\x7a\xb7\x7c\x7b\x0d\x19\x79\x64\x59\x91\xf5\x86\x18\xef\x0f\xf5\x36\x93\x28\xb5\xf3\xf1\xdf\x82" +
	"\x3d\x44\xde\x9f\xfe\xd7\x9f\xfd\x1b\x91\xed\x88\x62\xeb\x14\x3d\xbb\x1f\x86\x11\x52\x1d\xcb\xcd\xcb\x9c\x8e\x1f" +
	"\x5d\xaa\xcd\xef\x62\x31\x74\x69\x2c\xb2\x4c\xf0\x9b\xbb\x3b\xdb\x66\x75\x26\x0b\xa9\x44\x56\x4f\x86\x41\x85\x5c" +
	"\x58\x91\xa9\x89\xa2\x5e\xab\x73\x57\x64\x19\xc9\x9f\x5c\x8a\x9a\x29\xa8\x5b\xb2\xc3\xa1\xf5\x9e\x33\xbe\x5a\xa9" +
	"\x30\xa8\xac\x85\x81\x71\xed\xff\x01\x00\x00\xff\xff\x28\x4b\x7e\x6d\x32\x1a\x00\x00")

func bindataReportsHtmlDefaultgohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultgohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultgohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultgohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 6706,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1549013404, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimeloggohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x4c\x89\x9e\x82\xc8\xea\xa2\x28" +
	"\xb0\x58\x48\x01\xda\x3c\xd0\x5e\x8a\x22\xce\x02\xbd\xd2\xe2\x58\x62\x97\x0f\x55\x1c\x39\x6b\x08\xfa\xef\x0b\x92" +
	"\x92\x2d\x67\xa5\x24\x5e\x5d\x28\xce\x70\xbe\x79\x71\x66\xd8\x75\x09\xa4\x57\xa5\xa5\x43\x8d\x9f\xa0\x94\x54\xb5" +
	"\xdb\x75\x61\x75\xfa\x1f\x37\xce\x36\x65\x5a\x5a\x92\x1a\xc7\xa5\xc1\xda\x36\xb4\xfe\xa3\x2d\xbe\x20\x3d\x86\xcd" +
	"\x55\x0a\x49\xdf\xaf\x56\x5d\x27\x70\x27\x0d\x02\x8b\x5c\xd6\xf7\x2b\x00\x80\x37\x35\x90\xd5\x69\x69\x13\xbf\x0c" +
	"\xf0\x8f\xe8\x5a\x45\x11\x66\x80\x8f\x48\x3f\x6f\x03\x0d\x3e\xe5\xb0\x3e\x11\x15\xf2\x9d\x0b\xb4\x7b\x5d\xd3\xe1" +
	"\xb6\x92\x4a\x34\x68\x4e\x07\x5c\x65\x9f\xef\xbf\xf2\x22\x0a\xfe\xc9\xdd\xa3\x6d\x8d\x40\x31\x39\x19\x8e\x66\x42" +
	"\xee\xa1\x50\xdc\xb9\x9c\x45\x4d\xec\x26\x30\x22\x8e\xdc\x0d\x1a\x06\xe4\xf1\xcb\x88\x6f\x15\x8e\x82\x61\x93\x08" +
	"\x4e\x1c\xe2\xaf\x15\x62\x02\x73\x12\xaa\x90\x8b\x39\x7a\xf3\x3d\x31\xea\x4f\xaf\x50\x6f\x51\x08\x14\x40\x92\x14" +
	"\x02\x59\xf8\x82\x58\x0f\x3b\x6e\x44\xd4\xe8\x80\x6c\x89\x54\x61\x03\xd2\x40\xdd\x48\x43\x28\xe0\x9f\xbb\x07\x77" +
	"\x95\xbe\x30\x7d\x62\x0d\x14\x56\xb9\x9a\x9b\x9c\xfd\xc6\x8e\xbe\x78\x60\x76\xd3\x75\xeb\x27\xff\xd7\xf7\x59\x4a" +
	"\xd5\x8c\xcd\xe9\x9c\xd1\x8b\x9e\x04\x65\x51\x81\xe0\x14\xf0\xe5\x87\x8f\x06\xd8\x9d\xdf\x2d\x29\x79\x55\x72\x43" +
	"\xbc\xa1\x1f\x13\xbd\x37\xe2\xbd\x82\xbe\x04\x26\xd6\xb6\x0d\x27\x69\xcd\xbb\xa5\xab\xe4\x59\x8a\x09\xc0\xdf\x96" +
	"\xd0\x2d\x4a\x2f\x04\x35\x5d\xbc\x37\x5b\x2b\x0e\xdf\xd3\xbb\xae\xe1\xa6\x44\x58\x3f\x34\x5c\xa3\x1b\x96\xc5\x6b" +
	"\xb0\x90\xb2\xc8\x14\xa3\x2b\xce\x87\x3b\x11\xfc\xe0\x9d\xd9\xd9\x46\x73\xf2\xb9\x83\x75\xc8\x43\xf0\x68\xc6\xc4" +
	"\x45\xa0\x31\xae\x11\xe9\x49\xea\x1f\x42\xb2\xf5\x00\xb4\x78\x1c\x8e\x65\xfc\x97\xdb\x90\xad\x6b\x14\x0b\x81\x98" +
	"\x95\x90\xa6\x54\x78\xc7\x5f\x96\xff\xb2\xdc\xd4\x9f\x7b\xf3\x3e\x5d\xa8\x1c\x5e\xa8\xc0\x87\xfe\x42\x25\x6f\x9e" +
	"\x7b\xeb\xcc\xbb\xf3\x32\xe6\x56\x4b\x33\x16\x0c\xac\xc7\xbf\x0b\xf2\x6b\x42\xb1\xf8\x56\x14\xca\xe6\x35\xc9\xf9" +
	"\xca\x59\xf2\x28\x4b\x17\x2a\x27\xa3\x9d\xb5\x74\xbc\x5f\xed\x96\x2c\x71\x35\xdb\xca\x5f\x6b\x74\x63\x57\xfd\xf5" +
	"\x54\xf8\x4f\x01\xe8\xc2\xa6\xb3\x1c\xc0\x65\x8c\x9b\x0b\x5b\x8b\x77\xf8\x9c\x91\xa5\x61\xa4\x4c\xc7\xe0\xcc\x0d" +
	"\x9d\x0e\xce\x99\x99\x21\xe4\xfe\x1c\xf5\xd8\x94\xc2\x04\x8e\x83\x7e\xae\x27\x75\x1d\xa1\xae\x95\x6f\x2d\xe3\xab" +
	"\xe2\x38\xf8\x27\x06\x9d\xe5\x75\xba\x1f\x54\x8f\xa4\x55\xf6\x93\xb0\x85\x7f\x88\x40\x45\x5a\xdd\xac\x32\xbf\x80" +
	"\xe2\xa6\xcc\x19\x1a\xe6\x09\xc7\xe6\x9a\x69\x24\x0e\x45\xc5\x1b\x87\x94\xb3\xcf\x4f\x0f\xc9\x47\x36\x65\x19\xae" +
	"\x31\x67\x7b\x89\xcf\xfe\xd1\xc2\x26\x46\x15\xd6\x10\x1a\xca\xd9\xb3\x14\x54\xe5\x02\xf7\xb2\xc0\x24\x6c\xae\xa1" +
	"\x75\xd8\x24\xae\xe0\xca\xc7\x35\x37\xf6\x1a\xa4\x91\x24\xb9\x0a\x44\xcc\x3f\xac\x7f\xb9\x06\xcd\xbf\x4a\xdd\xea" +
	"\x33\x92\x34\xe7\xa4\x33\x63\x2a\xa2\x3a\xc1\xff\x5b\xb9\xcf\xd9\xbf\xc9\xe7\xdf\x93\x5b\xab\x6b\x4e\x72\xab\x90" +
	"\x9d\xec\x91\x98\xa3\x28\xc7\x16\x99\x85\x54\xf9\x3b\x12\xd6\xd5\xea\x65\xc8\x0b\xab\xb5\x35\xb7\x9b\xcd\xe9\x2d" +
	"\x37\x61\xb6\x8e\xac\x1e\x98\x59\x1a\x03\x97\xc5\x52\x9a\x9e\xdb\xb4\x5a\xf3\xe6\xc0\x60\x78\xd6\xf5\xfd\x6a\x36" +
	"\xad\x47\x6e\x96\x46\x90\x2c\x0d\x49\xfa\x16\x00\x00\xff\xff\xc8\x46\x1b\x05\xa2\x0a\x00\x00")

func bindataReportsHtmlTimeloggohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimeloggohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimeloggohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimeloggohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 2722,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1548973265, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsgohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultgohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimeloggohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsgohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultgohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimeloggohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
