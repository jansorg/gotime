// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p := messageKeyToIndex[key]
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de": &dictionary{index: deIndex, data: deData},
		"en": &dictionary{index: enIndex, data: enData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"total":       0,
	"trackedTime": 1,
}

var deIndex = []uint32{ // 3 elements
	0x00000000, 0x00000007, 0x00000016,
} // Size: 36 bytes

const deData string = "\x02Gesamt\x02Erfasste Zeit:"

var enIndex = []uint32{ // 3 elements
	0x00000000, 0x00000006, 0x00000013,
} // Size: 36 bytes

const enData string = "\x02Total\x02Tracked time"

// Total table size 113 bytes (0KiB); checksum: DD07800A
